<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>机器人开发教程 on Demiox</title><link>https://michaelyang628.github.io/blog/series/%E6%9C%BA%E5%99%A8%E4%BA%BA%E5%BC%80%E5%8F%91%E6%95%99%E7%A8%8B/</link><description>Recent content in 机器人开发教程 on Demiox</description><generator>Hugo -- gohugo.io</generator><language>zh-cn</language><copyright>© 2025 Demiox</copyright><atom:link href="https://michaelyang628.github.io/blog/series/%E6%9C%BA%E5%99%A8%E4%BA%BA%E5%BC%80%E5%8F%91%E6%95%99%E7%A8%8B/index.xml" rel="self" type="application/rss+xml"/><item><title>ROS2(Jazzy Jalisco) URDF教程</title><link>https://michaelyang628.github.io/blog/docs/partials/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://michaelyang628.github.io/blog/docs/partials/</guid><description>&lt;h2 class="relative group"&gt;从零开始构建机器人可视的模型
&lt;div id="从零开始构建机器人可视的模型" class="anchor"&gt;&lt;/div&gt;
&lt;span
class="absolute top-0 w-6 transition-opacity opacity-0 ltr:-left-6 rtl:-right-6 not-prose group-hover:opacity-100 select-none"&gt;
&lt;a class="group-hover:text-primary-300 dark:group-hover:text-neutral-700 !no-underline" href="#%e4%bb%8e%e9%9b%b6%e5%bc%80%e5%a7%8b%e6%9e%84%e5%bb%ba%e6%9c%ba%e5%99%a8%e4%ba%ba%e5%8f%af%e8%a7%86%e7%9a%84%e6%a8%a1%e5%9e%8b" aria-label="锚点"&gt;#&lt;/a&gt;
&lt;/span&gt;
&lt;/h2&gt;
&lt;p&gt;在本教程中，我们将构建一个机器人可视的模型，该模型看起来很像&lt;strong&gt;R2D2&lt;/strong&gt;。
在后面的教程中，你将学习如何清晰地表达模型，添加一些物理属性，并使用xacro生成更整洁的代码，但目前，我们将重点关注视觉几何结构的正确性。&lt;/p&gt;</description><media:content xmlns:media="http://search.yahoo.com/mrss/" url="https://michaelyang628.github.io/blog/docs/partials/featured.png"/></item><item><title>ROS2（Jazzy Jalisco）Launch系统</title><link>https://michaelyang628.github.io/blog/docs/thumbnails/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://michaelyang628.github.io/blog/docs/thumbnails/</guid><description>&lt;p&gt;发射&lt;/p&gt;
&lt;h2 class="relative group"&gt;创建启动文件
&lt;div id="创建启动文件" class="anchor"&gt;&lt;/div&gt;
&lt;span
class="absolute top-0 w-6 transition-opacity opacity-0 ltr:-left-6 rtl:-right-6 not-prose group-hover:opacity-100 select-none"&gt;
&lt;a class="group-hover:text-primary-300 dark:group-hover:text-neutral-700 !no-underline" href="#%e5%88%9b%e5%bb%ba%e5%90%af%e5%8a%a8%e6%96%87%e4%bb%b6" aria-label="锚点"&gt;#&lt;/a&gt;
&lt;/span&gt;
&lt;/h2&gt;
&lt;h3 class="relative group"&gt;背景
&lt;div id="背景" class="anchor"&gt;&lt;/div&gt;
&lt;span
class="absolute top-0 w-6 transition-opacity opacity-0 ltr:-left-6 rtl:-right-6 not-prose group-hover:opacity-100 select-none"&gt;
&lt;a class="group-hover:text-primary-300 dark:group-hover:text-neutral-700 !no-underline" href="#%e8%83%8c%e6%99%af" aria-label="锚点"&gt;#&lt;/a&gt;
&lt;/span&gt;
&lt;/h3&gt;
&lt;p&gt;ROS 2中的启动系统负责帮助用户描述其系统的配置，然后按所述执行。系统的配置包括要运行什么程序、在哪里运行它们、传递它们的参数，以及ROS特定的约定，这些约定通过为每个组件提供不同的配置，使得在整个系统中重用组件变得容易。它还负责监测启动的进程的状态，并报告和/或对这些进程的状态变化作出反应。
用Python、XML或YAML编写的启动文件可以启动和停止不同的节点，也可以触发和处理各种事件。有关不同格式的描述，请参见使用Python、XML和YAML for ROS 2启动文件。提供此框架的包是launch_ros，它使用下面的非ros特定的启动框架。
设计文件详细说明了ROS 2发射系统的设计目标（目前并非所有功能都可用）。&lt;/p&gt;</description><media:content xmlns:media="http://search.yahoo.com/mrss/" url="https://michaelyang628.github.io/blog/docs/thumbnails/featured.png"/></item><item><title>MoveIt2 初学者教程</title><link>https://michaelyang628.github.io/blog/docs/content-examples/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://michaelyang628.github.io/blog/docs/content-examples/</guid><description>&lt;p&gt;有关专家培训，请参阅我们更广泛的&lt;a
href="https://moveit.picknik.ai/humble/doc/examples/examples.html"
target="_blank"
&gt;示例&lt;/a&gt;。&lt;/p&gt;
&lt;h2 class="relative group"&gt;入门
&lt;div id="入门" class="anchor"&gt;&lt;/div&gt;
&lt;span
class="absolute top-0 w-6 transition-opacity opacity-0 ltr:-left-6 rtl:-right-6 not-prose group-hover:opacity-100 select-none"&gt;
&lt;a class="group-hover:text-primary-300 dark:group-hover:text-neutral-700 !no-underline" href="#%e5%85%a5%e9%97%a8" aria-label="锚点"&gt;#&lt;/a&gt;
&lt;/span&gt;
&lt;/h2&gt;
&lt;p&gt;本教程将安装MoveIt 2并创建一个工作区沙盒，以运行教程和示例机器人。&lt;/p&gt;</description><media:content xmlns:media="http://search.yahoo.com/mrss/" url="https://michaelyang628.github.io/blog/docs/content-examples/featured.png"/></item><item><title>ros2_control教程</title><link>https://michaelyang628.github.io/blog/docs/shortcodes/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://michaelyang628.github.io/blog/docs/shortcodes/</guid><description>&lt;p&gt;ros2_control是使用（ros2）对机器人进行（实时）控制的框架。
它的包是ros（机器人操作系统）中使用的ros_control包的重写。
ros2_control的目标是简化新硬件的集成并克服一些缺点。&lt;/p&gt;</description><media:content xmlns:media="http://search.yahoo.com/mrss/" url="https://michaelyang628.github.io/blog/docs/shortcodes/featured.png"/></item></channel></rss>