[{"content":"","externalUrl":"https://n9o.xyz","permalink":"/blog/users/e8b2eb823290677fbba3390d5cef2c35/","section":"用户列表","summary":"","title":"n9o.xyz","type":"users"},{"content":"设备：raspberry pi 4b os: Ubuntu Server 20.04.2 LTS 32-bit 检查可用的软件包更新 sudo apt update\n安装可用的软件包更新 sudo apt upgrade\nquery ip sudo apt install net-tools ifconfig\nnmap 网络嗅探器 sudo apt install nmap 扫描局域网主机发现 sudo nmap -sP 192.168.45.0/24\n打印所有服务状态 sudo service --status-all 查看整个系统磁盘使用情况 df -h 列出所有可用block设备的信息 lsblk 打印已安装包列表 dpkg -l 列出所有硬件 sudo lshw -short\n配置静态IP地址 # sudo nano /etc/netplan/50-cloud-init.yaml ethernets: ens33: dhcp4: false addresses: - 192.168.1.100/24 routes: - to: default via: 192.168.1.1 nameservers: addresses: - 8.8.8.8 - 114.114.114.114 sudo netplan apply 实现通过网络，为无硬盘客户机安装系统到服务器的iSCSI目标中并启动 # ls -al ~/.ssh ssh-keygen -t ed25519 -C \u0026#34;email\u0026#34; cat ~/.ssh/id_ed25519.pub ","externalUrl":null,"permalink":"/blog/docs/welcome/","section":"文档","summary":"\u003cp\u003e设备：raspberry pi 4b\nos: Ubuntu Server 20.04.2 LTS 32-bit\n\n\n\n\n\n\n\n\u003cfigure\u003e\n    \u003cimg class=\"my-0 rounded-md\" loading=\"lazy\" alt=\"\" src=\"https://img2020.cnblogs.com/blog/1934119/202102/1934119-20210201225319092-888454909.png\"\u003e\n\n  \n\u003c/figure\u003e\n\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003e检查可用的软件包更新\u003c/strong\u003e\n\u003ccode\u003esudo apt update\u003c/code\u003e\u003c/p\u003e","title":"如何搭建家用服务器","type":"docs"},{"content":"","externalUrl":"https://madoke.org/","permalink":"/blog/users/96d3e57dcc931de55cc23a825d40be2c/","section":"用户列表","summary":"","title":"madoke.org","type":"users"},{"content":" 背景 # 准备 # 服务器 # 搭建DHCP服务 搭建TFTP服务 搭建HTTP服务 搭建SMB服务 搭建NFS服务 搭建iSCSI服务 编译iPXE 下载wimboot 构建WinPE 下载Windows安装包 客户端 # 进入主板的BIOS设置中\n将“intel pxe option rom”设置为enabled。 将“CSM”设置为disabled。 任务 # 搭建DHCP服务 # DHCP（Dynamic Host Configuration Protocol 动态主机配置协议），是一个用于IP网络的网络协议，位于OSI模型的应用层，使用UDP协议工作，基于UDP的67和68端口进行通信。 主要有两个用途：\n用于局域网或网络服务供应商动态分配IP地址给用户。 用于局域网管理员对所有电脑作中央管理。 安装DHCP服务器 # sudo apt install isc-dhcp-server\n配置DHCP服务器 # sudo nano /etc/dhcp/dhcpd.conf # 编辑配置文件 option client-architecture code 93 = unsigned integer 16; subnet 192.168.45.0 netmask 255.255.255.0 { range 192.168.45.240 192.168.45.250; option subnet-mask 255.255.255.0; option broadcast-address 192.168.45.255; option routers 192.168.45.231; next-server 192.168.45.231; # 链式加载 iPXE if exists user-class and ( option user-class = \u0026#34;iPXE\u0026#34; ) { filename \u0026#34;http://192.168.45.231/nbp/boot.ipxe\u0026#34;; } elsif option client-architecture = 00:00 { filename \u0026#34;ipxe.pxe\u0026#34;; } else { filename \u0026#34;ipxe.efi\u0026#34;; } } # 编辑缺省配置文件 sudo nano /etc/default/isc-dhcp-server # 验证配置文件 dhcpd -cf /etc/dhcp/dhcpd.conf 重启DHCP服务器 # sudo service isc-dhcp-server restart\n![截图](截图 2025-09-25 06-33-41.png)\n搭建TFTP服务 # TFTP（Trivial File Transfer Protocol, 简单文件传输协议），是一种于1981年在RFC783中定义的简化的文件传输协议（FTP）。 TFTP常被用于引导计算机，例如没有大容量存储器的路由器。 现在它仍然被用于在一个网络上主机之间传输小文件，例如从一台网络主机或服务器引导一个远程X Window System终端或其他的瘦客户端。 基于UDP的69端口进行通信。\n安装TFTP服务器 # sudo apt install tftpd-hpa\n![截图](截图 2025-09-25 06-36-20.png)\n搭建SMB服务 # SMB（Server Message Block，服务器消息块），一种应用层网络传输协议，由微软开发，主要功能是使网络上的机器能够共享计算机文件、打印机、串行端口和通讯等资源。 它也提供经认证的进程间通信机能。它主要用在装有Microsoft Windows的机器上，在这样的机器上被称为Microsoft Windows Network。 经过Unix服务器厂商重新开发后，它可以用于连接Unix服务器和Windows客户机，执行打印和文件共享等任务。 基于TCP的445端口进行通信。\n安装SMB服务器 # sudo apt install samba -y\n配置SMB服务器 # sudo mkdir -p /srv/samba/win_installations sudo chown nobody:nogroup /srv/samba/win_installations sudo chmod 0777 /srv/samba/win_installations # 编辑配置文件 sudo vi /etc/samba/smb.conf [share] comment = My Public Storage path = /Samba browseable = yes writable = yes create mask = 0777 directory mask = 0777 # 允许匿名访问 guest ok = yes valid users = yang # 为访问添加用户密码 sudo smbpasswd -a yang 重启SMB服务器 # sudo /etc/init.d/smbd restart\n![截图](截图 2025-09-25 06-36-32.png)\n搭建NFS服务 # NFS（Network File System，网络文件系统）是一种分布式文件系统，力求客户端主机可以访问服务器端文件，并且其过程与访问本地存储时一样，它由Sun（已被甲骨文公司收购）开发，于1984年发布。 基于TCP的111、2049端口和UDP的111、4046端口进行通信。\n安装NFS服务器 # sudo apt install nfs-kernel-server -y\n配置NFS服务器 # sudo mkdir -p /srv/nfs/Windows sudo chown nobody:nogroup /srv/nfs/Windows sudo chmod 0777 /srv/nfs/Windows sudo nano /etc/exports # 编辑 /etc/exports 文件 /srv/nfs 192.168.1.0/24(rw,sync,no_subtree_check,no_root_squash) /srv/nfs/windows7 192.168.1.0/24(rw,sync,no_subtree_check,no_root_squash) # 192.168.1.0/24：允许访问的客户端网段 # rw：可读写 # sync：同步写入 # no_subtree_check：提高访问效率 # no_root_squash：客户端 root 用户可以直接访问（安全环境下可用） # sudo systemctl restart nfs-kernel-server sudo exportfs -ra # 应用配置 sudo systemctl enable nfs-kernel-server ![截图](截图 2025-09-25 06-37-02.png)\n搭建HTTP服务 # Nginx是异步框架的网页服务器，也可以用作反向代理、负载平衡器和HTTP缓存。该软件由俄罗斯程序员伊戈尔·赛索耶夫开发，并于2004年首次公开发布 2011年成立同名公司以提供支持服务。 2019年3月11日，Nginx公司被F5网络公司以6.7亿美元收购。\n安装HTTP服务器 # sudo apt install nginx -y\ncd /etc/nginx/sites-enabled/ ## 新建文件设置虚拟主机 重启HTTP服务器 # sudo service nginx restart\n![截图](截图 2025-09-25 06-37-27.png)\n搭建iSCSI服务 # iSCSI（Internet Small Computer System Interface，Internet小型计算机系统接口），又称为IP-SAN，是一种基于Internet及SCSI-3协议下的存储技术，由IETF提出，并于2003年2月11日成为正式的标准。 透过两部计算机之间利用iSCSI的协议来交换SCSI命令，让计算机可以透过高速的局域网集线来把SAN模拟成为本地的储存设备。 基于TCP的860、3260端口进行通信。 与传统的SCSI技术比较起来，iSCSI技术有以下三个革命性的变化：\n把原来只用于本机的SCSI协议透过TCP/IP网络发送，使连接距离可作无限的地域延伸； 连接的服务器数量无限（原来的SCSI-3的上限是15）； 由于是服务器架构，因此也可以实现在线扩容以至动态部署； 安装iSCSI服务器 # sudo apt install targetcli-fb -y\n配置iSCSI服务器 # sudo mkdir -p /iscsi_disks sudo dd if=/dev/zero of=/iscsi_disks/win10_disk.img bs=1M count=30720 # 创建一个 30GB的文件用于后端存储，方便管理，容易删除和扩容 sudo targetcli # 列出当前目录树 ls o- / ................................................................................ [...] o- backstores ..........# iscsi后端支持的存储类型 #................................. [...] | o- block .............# 块设备，磁盘驱动器、磁盘分区、逻辑卷等 #.........[Storage Objects: 0] | o- fileio ............# 指定大小的文件 #.............................. [Storage Objects: 0] | o- pscsi .............# 物理SCSI设备 #............................... [Storage Objects: 0] | o- ramdisk ...........# 内存盘，重启失效 #............................ [Storage Objects: 0] o- iscsi .................................................... [mutual disc auth, Targets: 0] o- loopback ................................................................ [Targets: 0] o- vhost ................................................................... [Targets: 0] # 导航到backstores/fileio目录创建存储对象（Storage Object） cd /backstores/fileio /backstores/fileio create win10_disk /iscsi_disks/win10_disk.img 30G # /iscsi_disks/win10_disk.img exists, using its size (32212254720 bytes) instead # Created fileio win10_disk with size 32212254720 # 导航到iscsi目录创建目标（Target） cd iscsi /iscsi create # Created target iqn.2003-01.org.linux-iscsi.ubuntu.aarch64:sn.733eacf6c06b. # Created TPG 1. # Global pref auto_add_default_portal=true # Created default portal listening on all IPs (0.0.0.0), port 3260. # 导航到target/tpg1/luns目录创建逻辑单元号 cd /iscsi/iqn.2003-01.org.linux-iscsi.ubuntu.aarch64:sn.733eacf6c06b/tpg1/luns create /backstores/fileio/win10_disk # Created LUN 0. # 导航到target/tpg1/acls目录创建允许访问客户 cd /iscsi/iqn.2003-01.org.linux-iscsi.ubuntu.aarch64:sn.733eacf6c06b/tpg1/acls create iqn.1991-05.com.microsoft:192.168.1.200 # Created Node ACL for iqn.1991-05.com.microsoft:desktop-g701sk8 # Created mapped LUN 0. # Global pref auto_add_default_portal=true # Created default portal listening on all IPs (0.0.0.0), port 3260. # 导航到root目录保存设置 cd / saveconfig # Configuration saved to /etc/rtslib-fb-target/saveconfig.json # 退出 exit ![截图](截图 2025-09-25 06-37-51.png)\niPXE # iPXE 是领先的开源网络引导固件。它提供了一个完整的 PXE 实现，并增强了额外功能，例如：\n通过 HTTP 从 Web 服务器启动 从 iSCSI SAN 引导 通过 FCoE 从光纤通道 SAN 启动 从 AoE SAN 引导 从无线网络引导 从广域网引导 从 Infiniband 网络引导 使用脚本控制引导过程 可以使用 iPXE 替换网卡上现有的 PXE ROM，也可以通过链式加载（chainloading） 进入 iPXE，从而获得 iPXE 的功能，而无需重新刷写的麻烦。 iPXE 是采用 GNU GPL 许可的免费开源软件（部分采用 GPL 兼容许可证），并被包含在多家网卡制造商和 OEM 的产品中。\n编译iPXE # # 安装编译所需的工具 sudo apt install git gcc make liblzma-dev # 下载iPXE的源码 git clone https://github.com/ipxe/ipxe.git # 进入源码目录 cd ipxe/src # 修改源码开启额外功能/ipxe/src/config/general.h # 按平台所需(https://ipxe.org/appnote/buildtargets)进行编译 make bin/ipxe.pxe make bin-x86_64-efi/ipxe.efi # 如需编译时内嵌脚本 # make bin-x86_64-efi/ipxe.efi EMBED=menu.ipxe # 将iPXE编译完成后得到的两个可执行文件，转存到TFTP目录下 sudo mv ~/ipxe/src/bin/ipxe.pxe /srv/tftp/ sudo mv ~/ipxe/src/bin-x86_64-efi/ipxe.efi /srv/tftp/ ![截图](截图 2025-09-25 06-38-26.png) ![截图](截图 2025-09-25 06-38-49.png)\nwimboot # wimboot 专门用来加载和引导 .wim 文件（Windows 安装盘和 WinPE 里的核心文件就是这种格式）。 能够不依赖本地硬盘或光盘，而是通过网络直接引导进入 Windows PE（预安装环境）用于部署或恢复系统。\n下载 # cd /var/www/html/ # 新建目录 (Network Bootstrap Program) sudo mkdir -p nbp sudu wget https://github.com/ipxe/wimboot/releases/latest/download/wimboot WinPE # Windows 评估和部署工具包 (Windows ADK) 及 Windows PE 附加组件提供对 Windows 映像进行大规模部署定制所需的工具，同时还支持测试系统、其附加组件及其运行的应用程序的质量和性能。 Windows ADK 包括：\nWindows 评估工具包和 Windows 性能工具包，用于评估系统或组件的质量和性能。 兼容性管理器和标准用户分析器工具。 部署工具，例如 Windows PE、Sysprep 和其他可用于自定义和部署 Windows 11 映像的工具。 Windows 预安装环境 (Windows PE) 可与评估和部署工具包 (ADK) 分开下载。 下载 # 要将 Windows PE 添加到 ADK 安装中，请在安装 ADK 后下载并安装 Windows PE 加载项。 下载最新的适用于 Windows 10 版本 2004 的 Windows ADK 下载最新的适用于 ADK 版本 2004 的 Windows PE 加载项\n确保你的电脑已安装 ADK 和 ADK Windows PE 加载项。 以管理员身份启动部署和映像工具环境。 创建工作文件 # # 导航到“Windows 预安装环境”文件夹和所选的处理器体系结构文件夹。 请查看 amd64 文件夹的示例命令： cd \u0026#34;..\\Windows Preinstallation Environment\\amd64\u0026#34; # 创建 Windows PE 文件的工作副本。 copype amd64 C:\\WinPE_Win10_2004_amd64 自定义Windows PE # # 装载 Windows PE 启动映像 Dism /Mount-Image /ImageFile:\u0026#34;C:\\Program Files (x86)\\Windows Kits\\10\\Assessment and Deployment Kit\\Windows Preinstallation Environment\\amd64\\en-us\\winpe.wim\u0026#34; /index:1 /MountDir:\u0026#34;C:\\Mount\u0026#34; # 获取映像已装载的驱动，并输出到文件 Dism /Image:C:\\Mount /Get-Drivers /all \u0026gt; C:\\DriversList.txt # 获取映像已装载的功能包 Dism /Get-Packages /Image:\u0026#34;C:\\Mount\u0026#34; # 卸载映像并提交更改 Dism /unmount-image /mountdir:C:\\Mount /commit # 获取 DISM /image:C:\\Mount /Get-Capabilities scp -r C:\\nbp yang@192.168.45.207:~/ wpeinit # 配置硬盘 diskpart list disk select disk 0 list partition select partition 1 assign letter=Z exit bcdedit /store Z:\\EFI\\Microsoft\\Boot\\BCD /enum /all bcdedit /store Z:\\EFI\\Microsoft\\Boot\\BCD /set {default} sos on bcdedit /store Z:\\EFI\\Microsoft\\Boot\\BCD /set {default} bootlog Yes bcdedit /store Z:\\EFI\\Microsoft\\Boot\\BCD /set {default} recoveryenabled No net view 192.168.1.119 net use z: \\\\192.168.1.119\\share z:\\sources\\setup.exe # 离线修改注册表 reg load HKLM\\OFFLINE_SYSTEM E:\\Windows\\System32\\config\\SYSTEM reg add \u0026#34;HKLM\\OFFLINE_SYSTEM\\ControlSet001\\Control\\Session Manager\\Memory Management\u0026#34; /v PagingFiles /t REG_MULTI_SZ /d \u0026#34; \u0026#34; /f reg unload HKLM\\OFFLINE_SYSTEM 总结 # Previous Next ","externalUrl":null,"permalink":"/blog/docs/installation/","section":"文档","summary":"\u003ch2 class=\"relative group\"\u003e背景 \n    \u003cdiv id=\"背景\" class=\"anchor\"\u003e\u003c/div\u003e\n    \n    \u003cspan\n        class=\"absolute top-0 w-6 transition-opacity opacity-0 ltr:-left-6 rtl:-right-6 not-prose group-hover:opacity-100 select-none\"\u003e\n        \u003ca class=\"group-hover:text-primary-300 dark:group-hover:text-neutral-700 !no-underline\" href=\"#%e8%83%8c%e6%99%af\" aria-label=\"锚点\"\u003e#\u003c/a\u003e\n    \u003c/span\u003e        \n    \n\u003c/h2\u003e\n\n\u003ch2 class=\"relative group\"\u003e准备 \n    \u003cdiv id=\"准备\" class=\"anchor\"\u003e\u003c/div\u003e\n    \n    \u003cspan\n        class=\"absolute top-0 w-6 transition-opacity opacity-0 ltr:-left-6 rtl:-right-6 not-prose group-hover:opacity-100 select-none\"\u003e\n        \u003ca class=\"group-hover:text-primary-300 dark:group-hover:text-neutral-700 !no-underline\" href=\"#%e5%87%86%e5%a4%87\" aria-label=\"锚点\"\u003e#\u003c/a\u003e\n    \u003c/span\u003e        \n    \n\u003c/h2\u003e\n\n\u003ch3 class=\"relative group\"\u003e服务器 \n    \u003cdiv id=\"服务器\" class=\"anchor\"\u003e\u003c/div\u003e\n    \n    \u003cspan\n        class=\"absolute top-0 w-6 transition-opacity opacity-0 ltr:-left-6 rtl:-right-6 not-prose group-hover:opacity-100 select-none\"\u003e\n        \u003ca class=\"group-hover:text-primary-300 dark:group-hover:text-neutral-700 !no-underline\" href=\"#%e6%9c%8d%e5%8a%a1%e5%99%a8\" aria-label=\"锚点\"\u003e#\u003c/a\u003e\n    \u003c/span\u003e        \n    \n\u003c/h3\u003e\n\u003col\u003e\n\u003cli\u003e搭建DHCP服务\u003c/li\u003e\n\u003cli\u003e搭建TFTP服务\u003c/li\u003e\n\u003cli\u003e搭建HTTP服务\u003c/li\u003e\n\u003cli\u003e搭建SMB服务\u003c/li\u003e\n\u003cli\u003e搭建NFS服务\u003c/li\u003e\n\u003cli\u003e搭建iSCSI服务\u003c/li\u003e\n\u003cli\u003e编译\u003ca\n  href=\"https://ipxe.org/\"\n    target=\"_blank\"\n  \u003eiPXE\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e下载\u003ca\n  href=\"https://github.com/ipxe/wimboot\"\n    target=\"_blank\"\n  \u003ewimboot\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e构建\u003ca\n  href=\"https://learn.microsoft.com/zh-cn/windows-hardware/manufacture/desktop/winpe-intro?view=windows-11\"\n    target=\"_blank\"\n  \u003eWinPE\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e下载Windows安装包\u003c/li\u003e\n\u003c/ol\u003e\n\n\u003ch3 class=\"relative group\"\u003e客户端 \n    \u003cdiv id=\"客户端\" class=\"anchor\"\u003e\u003c/div\u003e\n    \n    \u003cspan\n        class=\"absolute top-0 w-6 transition-opacity opacity-0 ltr:-left-6 rtl:-right-6 not-prose group-hover:opacity-100 select-none\"\u003e\n        \u003ca class=\"group-hover:text-primary-300 dark:group-hover:text-neutral-700 !no-underline\" href=\"#%e5%ae%a2%e6%88%b7%e7%ab%af\" aria-label=\"锚点\"\u003e#\u003c/a\u003e\n    \u003c/span\u003e        \n    \n\u003c/h3\u003e\n\u003cp\u003e进入主板的BIOS设置中\u003c/p\u003e","title":"Windows10 无盘启动","type":"docs"},{"content":" 按照消费级显卡驱动安装指南来安装GPU驱动 # Installing Client GPUs on Ubuntu Desktop # 刷新本地软件包索引,并安装用于管理软件仓库的软件包\nsudo apt update sudo apt install -y software-properties-common 添加 intel-graphics PPA\nsudo add repository -y ppa:kobuk-team/intel-graphics\n安装与计算相关的软件包。\nsudo apt install -y libze-intel-gpu1 libze1 intel-metrics-discovery intel-opencl-icd clinfo intel-gsc\n安装与媒体相关的软件包。\nsudo apt install -y intel-media-va-driver-non-free libmfx-gen1 libvpl2 libvpl-tools libva-glx2 va-driver-all vainfo\n如果计划使用 PyTorch,请安装:\nsudo apt install -y libze-dev intel-ocloc\n如果希望启用硬件光线追踪支持,请安装:\nsudo apt install -y libze-intel-gpu-raytracing\n验证安装 # 要验证内核和计算驱动程序是否已安装并正常运行,请运行信息:\nclinfo | grep \u0026quot;Device Name\u0026quot;\n安装 oneAPI # wget -O- https://apt.repos.intel.com/intel-gpg-keys/GPG-PUB-KEY-INTEL-SW-PRODUCTS.PUB | gpg --dearmor | sudo tee /usr/share/keyrings/oneapi-archive-keyring.gpg \u0026gt; /dev/null echo \u0026#34;deb [signed-by=/usr/share/keyrings/oneapi-archive-keyring.gpg] https://apt.repos.intel.com/oneapi all main\u0026#34; | sudo tee /etc/apt/sources.list.d/oneAPI.list sudo apt update sudo apt install intel-oneapi-common-vars=2024.0.0-49406 \\ intel-oneapi-common-oneapi-vars=2024.0.0-49406 \\ intel-oneapi-diagnostics-utility=2024.0.0-49093 \\ intel-oneapi-compiler-dpcpp-cpp=2024.0.2-49895 \\ intel-oneapi-dpcpp-ct=2024.0.0-49381 \\ intel-oneapi-mkl=2024.0.0-49656 \\ intel-oneapi-mkl-devel=2024.0.0-49656 \\ intel-oneapi-mpi=2021.11.0-49493 \\ intel-oneapi-mpi-devel=2021.11.0-49493 \\ intel-oneapi-dal=2024.0.1-25 \\ intel-oneapi-dal-devel=2024.0.1-25 \\ intel-oneapi-ippcp=2021.9.1-5 \\ intel-oneapi-ippcp-devel=2021.9.1-5 \\ intel-oneapi-ipp=2021.10.1-13 \\ intel-oneapi-ipp-devel=2021.10.1-13 \\ intel-oneapi-tlt=2024.0.0-352 \\ intel-oneapi-ccl=2021.11.2-5 \\ intel-oneapi-ccl-devel=2021.11.2-5 \\ intel-oneapi-dnnl-devel=2024.0.0-49521 \\ intel-oneapi-dnnl=2024.0.0-49521 \\ intel-oneapi-tcm-1.0=1.0.0-435 设置 Python 环境 # 如果没有安装 conda ，请按如下方式下载并安装 Miniforge ：\nwget https://github.com/conda-forge/miniforge/releases/latest/download/Miniforge3-Linux-x86_64.sh bash Miniforge3-Linux-x86_64.sh source ~/.bashrc 你可以使用 conda --version 来确认 conda 已安装成功。\nconda 安装完成后，创建一个新的 Python 环境 moe：\nconda create -n llm python=3.11\n激活新创建的 llm 环境：\nconda activate llm\n解除激活\nconda deactivate\nPyTorch # pip3 install torch torchvision torchaudio --index-url https://download.pytorch.org/whl/xpu pip3 install torch==2.8.0 torchvision==0.23.0 torchaudio==2.8.0 --index-url https://download.pytorch.org/whl/xpu Intel Extension for PyTorch # 安装 ipex # pip3 install intel-extension-for-pytorch==2.8.10+xpu oneccl_bind_pt==2.8.0+xpu --extra-index-url https://pytorch-extension.intel.com/release-whl/stable/xpu/us/ 安装 ipex-llm # pip3 install --pre --upgrade ipex-llm[xpu] --extra-index-url https://pytorch-extension.intel.com/release-whl/stable/xpu/us/ Download models using huggingface-cli:\npip install \u0026#34;huggingface_hub[cli]\u0026#34; huggingface-cli hf download Wan-AI/Wan2.2-Animate-14B --local-dir ./Wan2.2-Animate-14B Download models using modelscope-cli:\npip install modelscope modelscope download Wan-AI/Wan2.2-Animate-14B --local_dir ./Wan2.2-Animate-14B ","externalUrl":null,"permalink":"/blog/docs/advanced-customisation/","section":"文档","summary":"\u003ch3 class=\"relative group\"\u003e按照\u003ca\n  href=\"https://dgpu-docs.intel.com/driver/client/overview.html\"\n    target=\"_blank\"\n  \u003e消费级显卡驱动安装指南\u003c/a\u003e来安装GPU驱动 \n    \u003cdiv id=\"按照消费级显卡驱动安装指南来安装gpu驱动\" class=\"anchor\"\u003e\u003c/div\u003e\n    \n    \u003cspan\n        class=\"absolute top-0 w-6 transition-opacity opacity-0 ltr:-left-6 rtl:-right-6 not-prose group-hover:opacity-100 select-none\"\u003e\n        \u003ca class=\"group-hover:text-primary-300 dark:group-hover:text-neutral-700 !no-underline\" href=\"#%e6%8c%89%e7%85%a7%e6%b6%88%e8%b4%b9%e7%ba%a7%e6%98%be%e5%8d%a1%e9%a9%b1%e5%8a%a8%e5%ae%89%e8%a3%85%e6%8c%87%e5%8d%97%e6%9d%a5%e5%ae%89%e8%a3%85gpu%e9%a9%b1%e5%8a%a8\" aria-label=\"锚点\"\u003e#\u003c/a\u003e\n    \u003c/span\u003e        \n    \n\u003c/h3\u003e\n\n\u003ch4 class=\"relative group\"\u003eInstalling Client GPUs on Ubuntu Desktop \n    \u003cdiv id=\"installing-client-gpus-on-ubuntu-desktop\" class=\"anchor\"\u003e\u003c/div\u003e\n    \n    \u003cspan\n        class=\"absolute top-0 w-6 transition-opacity opacity-0 ltr:-left-6 rtl:-right-6 not-prose group-hover:opacity-100 select-none\"\u003e\n        \u003ca class=\"group-hover:text-primary-300 dark:group-hover:text-neutral-700 !no-underline\" href=\"#installing-client-gpus-on-ubuntu-desktop\" aria-label=\"锚点\"\u003e#\u003c/a\u003e\n    \u003c/span\u003e        \n    \n\u003c/h4\u003e\n\u003col\u003e\n\u003cli\u003e\n\u003cp\u003e刷新本地软件包索引,并安装用于管理软件仓库的软件包\u003c/p\u003e","title":"本地部署AI大模型","type":"docs"},{"content":"","externalUrl":"https://code-chimp.com","permalink":"/blog/users/4bc0917e04c4859cedb32a48bff27846/","section":"用户列表","summary":"","title":"code-chimp.com","type":"users"},{"content":" 配置环境 # 使用turtlesim和rqt # Turtlesim是一款用于学习ROS 2的轻量级模拟器。 它演示了ROS 2在最基本的级别上的功能，让您了解稍后将如何使用真实的机器人或机器人模拟。\nrqt是ROS2的GUI工具。 rqt中的所有操作都可以在命令行上完成，但它提供了一种更简单、更用户友好的方式来操作ROS2元素。\n本教程涉及ROS2的核心概念，如节点、主题和服务的分离。 所有这些概念将在以后的教程中详细阐述；现在，您只需设置这些工具并了解它们。\n安装turtlesim 一如既往，首先在新终端中查找设置文件，如前一教程中所述。 为ROS 2发行版安装turtlesim软件包： sudo apt update sudo apt install ros-galactic-turtlesim 检查安装的软件包： ros2 pkg executables turtlesim 上述命令应返回一个turtlesim可执行文件列表： turtlesim draw_square turtlesim mimic turtlesim turtle_teleop_key turtlesim turtlesim_node\n启动turtlesim 请在终端中输入以下命令： ros2 run turtlesim turtlesim_node 模拟器窗口应该出现，中间有一只随机乌龟。 在命令下的终端中，您将看到来自节点的消息： [INFO] [turtlesim]: Starting turtlesim with node name /turtlesim [INFO] [turtlesim]: Spawning turtle [turtle1] at x=[5.544445], y=[5.544445], theta=[0.000000] 在这里，您可以看到默认的海龟名称是turtle1，以及生成它的默认坐标。\n使用turtlesim 打开一个新的终端，再次启动ROS 2。 现在，您将运行一个新节点来控制第一个节点中的乌龟： ros2 run turtlesim turtle_teleop_key 此时，您应该打开三个窗口：一个运行turlsim_node的终端、一个运行gure_teleop_key的终端和turlsim窗口。 排列这些窗口，以便您可以看到turlsim窗口，但也可以让运行turtle_teleop_key的终端处于活动状态，以便您能够控制turlesim中的turtle。 使用键盘上的箭头键控制乌龟。它将在屏幕上移动，使用它所附的“笔”绘制到目前为止所遵循的路径。 您可以使用list命令查看节点及其关联的服务、主题和操作： ros2 node list ros2 topic list ros2 service list ros2 action list 在接下来的教程中，您将了解有关这些概念的更多信息。 由于本教程的目标只是对turlsim进行概述，因此我们将使用rqt（ROS2的图形用户界面）来更深入地了解服务。 使用turtlesim和rqt是学习ROS2核心概念的好方法。\n安装rqt 打开新终端以安装rqt及其插件： sudo apt update sudo apt install ~nros-galactic-rqt* 要运行rqt： rqt\n使用rqt 首次运行rqt后，窗口将为空。 别担心；只需从顶部的菜单栏中选择Plugins\u0026gt;Services\u0026gt;Service Caller。 使用服务下拉列表左侧的刷新按钮，确保您的gurisim节点的所有服务都可用。 单击服务下拉列表以查看turtlesim的服务，然后选择**/spawn**服务。\n尝试生成服务 让我们使用rqt调用/spawn服务。 您可以从它的名称猜测/spawn将在turtlesim窗口中创建另一只乌龟。 通过双击Expression列中的空单引号，为新乌龟指定一个唯一的名称，如turtle2。 可以看到，这个表达式对应于名称值，并且是string类型。 输入生成海龟的新坐标，如x=1.0和y=1.0。 要生成turtle2，您必须通过单击rqt窗口右上角的call按钮来调用该服务。 您将看到一只新海龟（同样是随机设计的）在您输入的x和y坐标处生成。 如果刷新rqt中的服务列表，您还将看到现在除了/turtle1/…之外，还有与新的turtle/turtle2/…相关的服务…。 尝试set_pen服务 现在，让我们使用/set_pen服务为turtle1提供一支独特的笔： r、g和b的值介于0和255之间，将设置画笔乌龟1绘制的颜色，宽度设置线条的粗细。 要让turtle1用明显的红线绘制，请将r值更改为255，将width值更改为5。 不要忘记在更新值后调用服务。 如果返回运行turtle_teleop_key的终端并按箭头键，您将看到turtle1的笔已更改。 您可能已经注意到，没有办法移动turtle2。 您可以通过将turtle1的cmd_vel主题重新映射到turtle2来实现这一点。\n重新映射 在新终端中，source ROS 2，并运行： ros2 run turtlesim turtle_teleop_key --ros-args --remap turtle1/cmd_vel:=turtle2/cmd_vel 关闭turtlesim 要停止模拟，可以在turtlesim_node终端中输入Ctrl+C，在teleop终端中输入q。\n理解节点 # ROS 2图 在接下来的几个教程中，您将了解一系列核心ROS 2概念，这些概念构成了所谓的“ROS（2）图”。 ROS图是一个ROS 2元素网络，同时处理数据。 它包含所有可执行文件以及它们之间的连接，如果要将它们全部映射并可视化。\nROS 2中的节点 ROS中的每个节点应负责单个模块用途（例如一个节点用于控制车轮电机，一个节点用来控制激光测距仪等）。每个节点都可以通过主题、服务、操作或参数向其他节点发送和接收数据。 一个完整的机器人系统由许多协同工作的节点组成。 在ROS 2中，单个可执行文件（C++程序、Python程序等）可以包含一个或多个节点。\nros2运行 ros2 run命令从包中启动可执行文件。 ros2 run \u0026lt;package_name\u0026gt; \u0026lt;executable_name\u0026gt; 要运行turtlesim，请打开一个新终端，然后输入以下命令： ros2 run turtlesim turtlesim_node 这里，包名为turtlesim，可执行文件名为turtlesim_node。\nros2节点列表 显示所有运行节点的名称。 当您想要与一个节点交互时，或者当您有一个系统运行许多节点并需要跟踪它们时，这尤其有用。 在另一个终端仍在运行的情况下，打开一个新终端，然后输入以下命令： ros2 node list 打开另一个新终端，并使用以下命令启动teleop节点： ros2 run turtlesim turtle_teleop_key 在这里，我们再次搜索turtlesim包，这次是搜索名为turtle_teleop_key的可执行文件。 返回运行ros2节点列表的终端，然后再次运行它。 现在您将看到两个活动节点的名称：\n重新映射 重新映射允许您将默认节点属性（如节点名称、主题名称、服务名称等）重新分配给自定义值。 在上一个教程中，您使用了对turtle_teleop_key的重新映射来更改被控制的默认turtle。 现在，让我们重新分配/turtlesim节点的名称。 在新终端中，运行以下命令： ros2 run turtlesim turtlesim_node --ros-args --remap __node:=my_turtle 由于您再次调用ros2 run，另一个turtlesim窗口将打开。 但是，现在如果您返回到运行ros2节点列表的终端，然后再次运行，您将看到三个节点名： ros2节点信息 现在您已经知道了节点的名称，可以通过以下方式访问有关它们的更多信息： ros2 node info \u0026lt;node_name\u0026gt; 要检查最新节点my_turtle，请运行以下命令： ros2 node info /my_turtle ros2节点信息返回与该节点交互的订阅者、发布者、服务和操作（ROS图形连接）的列表。 输出应如下所示： 现在尝试在/teleop_turtle节点上运行相同的命令，看看它的连接与my_turtele有什么不同。 在即将到来的教程中，您将了解更多有关ROS图形连接概念的信息，包括消息类型。\n节点是基本的ROS 2元件，用于机器人系统中的单一、模块化用途。 在本教程中，通过运行可执行文件turlsim_node和ture_teleop_key，您使用了从turlsim包创建的节点。 您学习了如何使用ros2节点列表查找活动节点名称，以及如何使用ros2节点信息在单个节点上进行自检。 这些工具对于理解复杂、真实的机器人系统中的数据流至关重要。\n理解主题 # ROS 2将复杂系统分解为多个模块化节点。 主题是ROS图的重要元素，充当节点交换消息的总线。 一个节点可以向任意数量的主题发布数据，同时订阅任意数量的标题。 主题是在节点之间移动数据，从而在系统的不同部分之间移动数据的主要方式之一。\n设置 到目前为止，您应该可以轻松启动turtlesim了。 打开新终端并运行： ros2 run turtlesim turtlesim_node 打开另一个终端并运行： ros2 run turtlesim turtle_teleop_key\nrqt_graph 我们将使用rqt_graph可视化不断变化的节点和主题，以及它们之间的连接。 turtlesim教程告诉您如何安装rqt及其所有插件，包括rqt_graph。 要运行rqt_graph，请打开新终端并输入命令： rqt_graph 您还可以打开rqt并选择Plugins\u0026gt;Introspection\u0026gt;Node graph方法，打开rqt_graph。 您应该会看到上面的节点和主题，以及围绕图形外围的两个动作（我们暂时忽略这些动作）。 如果将鼠标悬停在中心的主题上，您将看到如上图所示的颜色高亮显示。 该图描述了**/turtlesim节点和/teleop_turtle节点如何通过主题相互通信。 /teleop_turtle节点将数据（您输入以移动龟的击键）发布到/turtle1/cmd_vel**主题，/turtlesim节点订阅该主题以接收数据。 rqt_graph的突出显示功能在检查以多种不同方式连接的多个节点和主题的更复杂系统时非常有用。 rqt_graph是一个图形化的自省工具。 现在我们来看一些用于内省主题的命令行工具。\nros2主题列表 在新终端中运行ros2 topic list命令将返回系统中当前活动的所有主题的列表 ros2 topic list -t将返回相同的主题列表，这次主题类型附加在括号中 这些属性，特别是类型，是节点在主题上移动时，如何知道自己在谈论相同的信息。 如果您想知道所有这些主题在rqt_graph中的位置，可以取消选中隐藏下的所有框： 但现在，请选中这些选项以避免混淆。\nros2主题回声 要查看主题上发布的数据，请使用： ros2 topic echo \u0026lt;topic_name\u0026gt; 既然我们知道**/teleop_turtle通过/turtle1/cmd_vel主题将数据发布到/turtlesim**，那么让我们使用echo来反思这个主题： ros2 topic echo /turtle1/cmd_vel 起初，该命令不会返回任何数据。 这是因为它正在等待**/teleop_turtle发布一些内容。 返回运行turtle_teleop_key的终端，使用箭头移动乌龟。 观察您的回波同时运行的终端，您将看到针对您所做的每个移动发布的位置数据： 现在返回到rqt_graph并取消选中Debug框。 /_ros2cli_5894是我们刚才运行的echo**创建的节点（数字可能不同）。 现在您可以看到发布者正在通过cmd_vel主题发布数据，并且订阅了两个订户。\nros2主题信息 话题不必只是点对点的交流；它可以是一对多、多对一或多对多。 另一种方法是运行： ros2 topic info /turtle1/cmd_vel 这将返回： ros2界面显示 节点使用消息通过主题发送数据。 发布者和订阅者必须发送和接收相同类型的消息才能进行通信。 在运行ros2 topic list-t之后，我们前面看到的主题类型让我们知道每个主题上使用的消息类型。 回想一下，cmd_vel主题的类型是： geometry_msgs/msg/Twist 这意味着在geometry_msgs包中有一个名为Twist的消息。 现在，我们可以对该类型运行ros2 interface show \u0026lt;msg type\u0026gt;来了解其详细信息，特别是消息所需的数据结构。 ros2 interface show geometry_msgs/msg/Twist 对于上面的消息类型，它将生成： 这告诉您，/turtlesim节点需要一条消息，其中包含两个矢量，线性矢量和角度矢量，每个矢量包含三个元素。 如果您还记得我们使用echo命令看到**/teleop_turtle传递给/turtlesim**的数据，它的结构是相同的.\nros2主题发布 既然您有了消息结构，就可以使用以下命令从命令行直接将数据发布到主题： ros2 topic pub \u0026lt;topic_name\u0026gt; \u0026lt;msg_type\u0026gt; '\u0026lt;args\u0026gt;' 参数是您将传递给主题的实际数据，位于您在上一节中刚刚发现的结构中。 需要注意的是，这个参数需要以YAML语法输入。 像这样输入完整命令： ros2 topic pub --once /turtle1/cmd_vel geometry_msgs/msg/Twist \u0026quot;{linear: {x: 2.0, y: 0.0, z: 0.0}, angular: {x: 0.0, y: 0.0, z: 1.8}}\u0026quot; \u0026ndash;once是一个可选参数，表示“发布一条消息然后退出”。 您将在终端中收到以下消息： publisher: beginning loop publishing #1: geometry_msgs.msg.Twist(linear=geometry_msgs.msg.Vector3(x=2.0, y=0.0, z=0.0), angular=geometry_msgs.msg.Vector3(x=0.0, y=0.0, z=1.8)) 你会看到你的乌龟这样移动： 海龟（通常是它要模仿的真实机器人）需要稳定的指令流才能连续操作。 所以，要让乌龟继续移动，你可以跑： ros2 topic pub --rate 1 /turtle1/cmd_vel geometry_msgs/msg/Twist \u0026quot;{linear: {x: 2.0, y: 0.0, z: 0.0}, angular: {x: 0.0, y: 0.0, z: 1.8}}\u0026quot; 这里的区别是删除了\u0026ndash;once选项，增加了**\u0026ndash;rate1选项，它告诉ros 2 topic pub以1Hz的稳定流发布命令。 您可以刷新rqt_graph以图形化方式查看发生了什么。 您将看到ros 2 topic pub…节点（/_ros2cli_8868**）正在**/turtle1/cmd_vel主题上发布，现在ros2 topic echo ...节点（/_ros2cl_5894**）和**/turtlesim节点都在接收它。 最后，可以在姿势主题上运行echo并重新检查rqt_graph**: ros2 topic echo /turtle1/pose 可以看到，/turlsim节点也发布到了pose主题，新的echo节点订阅了该主题。\nros2主题速率 对于这个进程的最后一次自省，您可以使用以下命令查看数据发布的速率： ros2 topic hz /turtle1/pose 它将返回**/turtlesim节点向姿势主题发布数据的速率数据。 average rate: 59.354 min: 0.005s max: 0.027s std dev: 0.00284s window: 58 回想一下，您使用ros2 topic pub--rate 1将turtle1/cmd_vel的速率设置为稳定的1 Hz。 如果您使用turtle1/cm d_evel而不是turtle1/pose**运行上述命令，您将看到一个反映该速率的平均值。\n节点通过主题发布信息，允许任意数量的其他节点订阅和访问该信息。 在本教程中，您使用rqt_graph和命令行工具检查了主题上几个节点之间的连接。 现在，您应该对数据在ROS 2系统中的移动有了很好的了解。\n理解服务 # 背景资料 # 服务是ROS图中节点的另一种通信方法。 服务基于呼叫和响应模型，而不是主题的发布者-订阅者模型。 虽然主题允许节点订阅数据流并获得持续更新，但服务仅在客户机专门调用时才提供数据。 活动 # 设置 启动两个turtlesim节点，/turtlesim和**/teleop_turtle**。 打开新终端并运行： ros2 run turtlesim turtlesim_node 打开另一个终端并运行： ros2 run turtlesim turtle_teleop_key\nros2服务列表 在新终端中运行ros2 service list命令将返回系统中当前活动的所有服务的列表： 您将看到这两个节点都有相同的六个服务，名称中有参数。 ROS 2中的几乎每个节点都有这些基础设施服务，这些服务是参数构建的基础。 在下一个教程中将有更多关于参数的内容。 在本教程中，讨论中将省略参数服务。 现在，让我们重点关注特定于turtlesim的服务，/clear、/kill、/reset、/spawn、/turtle1/set_pen、/turtle1/teleport_absolute和**/turtle1/teleport_relative**。\nros2服务类型 服务具有描述服务的请求和响应数据的结构的类型。 服务类型的定义与主题类型类似，只是服务类型有两个部分：一个用于请求的消息，另一个用于响应。 要查找服务类型，请使用以下命令： ros2 service type \u0026lt;service_name\u0026gt; 让我们看看turtlesim的**/clear**服务。 在新终端中，输入命令： ros2 service type /clear std_srvs/srv/Empty Empty类型表示服务调用在发出请求时不发送数据，在接收响应时不接收数据。\nros2服务列表-t 要同时查看所有活动服务的类型，可以将\u0026ndash;show types选项（缩写为-t）附加到list命令： ros2 service list -t 这将返回： ros2服务查找 如果要查找特定类型的所有服务，可以使用以下命令： ros2 service find \u0026lt;type_name\u0026gt; 例如，您可以找到所有Empty类型的服务，如下所示： ros2 service find std_srvs/srv/Empty 这将返回： /clear /reset\nros2界面显示 您可以从命令行调用服务，但首先需要知道输入参数的结构。 ros2 interface show \u0026lt;type_name\u0026gt; 要对**/clear服务的Empty类型运行此命令，请执行以下操作： ros2 interface show std_srvs/srv/Empty 这将返回： --- ---将请求结构（上面）与响应结构（下面）分开。 但是，正如您前面所了解的，Empty类型不发送或接收任何数据。 所以，自然，它的结构是空白的。 让我们回顾一个具有发送和接收数据类型的服务，如/spawn**。 从ros2服务列表的结果来看，我们知道**/spawn的类型是turtlesim/srv/spawn**。 要查看**/spawn调用和请求中的参数，请运行命令： ros2 interface show turtlesim/srv/Spawn 这将返回： float32 x float32 y float32 theta string name # Optional. A unique name will be created and returned if this is empty --- string name ---行上方的信息告诉我们调用/Spawn所需的参数。 x、 y和θ**决定了产卵海龟的位置，名称显然是可选的。 在这种情况下，行下面的信息不是您需要知道的，但它可以帮助您了解从呼叫中获得的响应的数据类型。\nros2服务呼叫 现在您已经知道了服务类型是什么，如何查找服务类型，以及如何查找该类型参数的结构，您可以使用以下命令调用服务： ros2 service call \u0026lt;service_name\u0026gt; \u0026lt;service_type\u0026gt; \u0026lt;arguments\u0026gt; 部分是可选的。 例如，您知道Empty类型化服务没有任何参数： ros2 service call /clear std_srvs/srv/Empty 此命令将清除海龟窗口中绘制的任何线条。 现在，让我们通过调用/spawn并输入参数来生成一个新的龟。 来自命令行的服务调用中的输入****需要使用YAML语法。 输入命令： ros2 service call /spawn turtlesim/srv/Spawn \u0026quot;{x: 2, y: 2, theta: 0.2, name: ''}\u0026quot; 您将得到发生了什么的方法样式视图，然后是服务响应： requester: making request: turtlesim.srv.Spawn_Request(x=2.0, y=2.0, theta=0.2, name='') response: turtlesim.srv.Spawn_Response(name='turtle2') 您的海龟窗口将立即更新新生成的海龟： 总结 # 节点可以使用ROS 2中的服务进行通信。 与主题（节点发布可供一个或多个订阅者使用的信息的单向通信模式）不同，服务是一种请求/响应模式，其中客户端向提供服务的节点发出请求，服务处理请求并生成响应。 您通常不想使用服务进行连续通话；主题甚至行动会更适合。 在本教程中，您使用命令行工具来识别、详细说明和调用服务。\n理解参数 # 背景信息 # 参数是节点的配置值。 可以将参数视为节点设置。 节点可以将参数存储为整数、浮点、布尔、字符串和列表。 在ROS 2中，每个节点都维护自己的参数。 有关参数的更多背景信息，请参阅概念文档。\n活动 # 设置 启动两个turtlesim节点，/turtlesim和**/teleop_turtle**。 打开新终端并运行： ros2 run turtlesim turtlesim_node 打开另一个终端并运行： ros2 run turtlesim turtle_teleop_key\nros2参数列表 要查看属于节点的参数，请打开新终端并输入命令： ros2 param list 您将看到节点命名空间**/teleop_turtle和/turtlesim**，后面是每个节点的参数： 每个节点都有参数use_sim_time； 这并不是**/turtlesim独有的。 根据它们的名称，看起来/turtlesim的参数使用RGB颜色值决定了turtlesim**窗口的背景色。\nros2参数获取 要显示参数的类型和当前值，请使用以下命令： ros2 param get \u0026lt;node_name\u0026gt; \u0026lt;parameter_name\u0026gt; 让我们找出turtlesim参数background_g的当前值： ros2 param get /turtlesim background_g 它将返回值： Integer value is: 86 现在您知道background_g包含一个整数值。 如果在background_r和background_b上运行相同的命令，将分别获得值69和255。\nros2参数设置 要在运行时更改参数的值，请使用以下命令： ros2 param set \u0026lt;node_name\u0026gt; \u0026lt;parameter_name\u0026gt; \u0026lt;value\u0026gt; 让我们更改**/turtlesim的背景颜色： ros2 param set /turtlesim background_r 150 您的终端应返回消息： Set parameter successful 而你的turtlesim**窗口的背景应该会改变颜色： 使用set命令设置参数只会在当前会话中更改，而不会永久更改。 但是，您可以保存设置并在下次启动节点时重新加载它们。\nros2参数转储 您可以使用以下命令将节点的所有当前参数值“转储”到一个文件中，以便以后保存： ros2参数转储\u0026lt;node_name\u0026gt; 要保存**/turtlesim**参数的当前配置，请输入以下命令： ros2 param dump /turtlesim 您的终端将返回消息： Saving to: ./turtlesim.yaml 您将在工作区运行的目录中找到一个新文件。如果打开此文件，您将看到以下内容： 如果您想在将来用相同的参数重新加载节点，转储参数很有用。\nros2参数加载 可以使用以下命令将参数从文件加载到当前运行的节点： ros2 param load \u0026lt;node_name\u0026gt; \u0026lt;parameter_file\u0026gt; 加载**/turtlesim**。 使用ros2 param dump到**/turtlesim**节点的参数生成的yaml文件，输入命令： ros2 param load /turtlesim ./turtlesim.yaml 您的终端将返回消息： 节点启动时加载参数文件 要使用保存的参数值启动同一节点，请使用： ros2 run \u0026lt;package_name\u0026gt; \u0026lt;executable_name\u0026gt; --ros-args --params-file \u0026lt;file_name\u0026gt; 这与启动turtlesim时总是使用的命令相同，添加了标记**\u0026ndash;ros-args和\u0026ndash;params文件，然后是要加载的文件。 停止运行的turtlesim**节点，以便尝试使用保存的参数重新加载它，方法是： ros2 run turtlesim turtlesim_node --ros-args --params-file ./turtlesim.yaml turtlesim窗口应该像往常一样出现，但背景是您之前设置的紫色。\n总结 # 节点具有用于定义其默认配置值的参数。 可以从命令行获取和设置参数值。 还可以将参数设置保存到文件中，以便在以后的会话中重新加载它们。\n理解动作 # 背景 # 动作是ROS 2中的通信类型之一，用于长时间运行的任务。 它们由三部分组成：目标、反馈和结果。 动作基于主题和服务。 它们的功能与服务类似，只是操作可以取消。 它们还提供稳定的反馈，而不是返回单个响应的服务。 动作使用客户端-服务器模型，类似于发布者-订阅者模型（在主题教程中描述）。 “动作客户端”节点将目标发送到“动作服务器”节点，该节点确认目标并返回反馈流和结果。 任务 # 设置 启动两个turtlesim节点，/turtlesim和**/teleop_turtle**。 打开新终端并运行： ros2 run turtlesim turtlesim_node 打开另一个终端并运行： ros2 run turtlesim turtle_teleop_key\n使用动作 启动**/teleop_turtle节点时，您将在终端中看到以下消息： Use arrow keys to move the turtle. Use G|B|V|C|D|E|R|T keys to rotate to absolute orientations. 'F' to cancel a rotation. 让我们关注第二行，它对应于一个动作。（第一条指令对应于主题教程前面讨论的“cmd_vel”主题。） 请注意，字母键G|B|V|C|D|E|R|T在美国QWERTY键盘上的F键周围形成了一个“框”（如果您没有使用QWERTY键盘，请参阅此链接）。 每个关键点在F周围的位置对应于turtlesim中的方向。 例如，E会将乌龟的方向旋转到左上角。 请注意运行/turtlesim节点的终端。 每次按下其中一个键，都会将目标发送到作为/turtlesim节点一部分的动作服务器。 目标是旋转海龟以面向特定方向。 乌龟完成旋转后，应显示一条信息，传达目标结果： [INFO] [turtlesim]: Rotation goal completed successfully F键将在执行过程中取消目标。 尝试按C键，然后按F键，乌龟才能完成旋转。 在运行/turtlesim节点的终端中，您将看到以下消息： [INFO] [turtlesim]: Rotation goal canceled 不仅客户端（您在teleop中的输入）可以阻止目标，服务器端（/turtlesim节点）也可以。 当服务器端选择停止处理目标时，称为“中止”目标。 尝试按D键，然后按G**键，第一次旋转才能完成。 在运行/turtlesim节点的终端中，您将看到以下消息： [WARN] [turtlesim]: Rotation goal received before a previous goal finished. Aborting previous goal 此动作服务器选择中止第一个目标，因为它有一个新目标。 它可以选择其他的东西，比如拒绝新目标或在第一个目标完成后执行第二个目标。 不要以为每个动作服务器都会在获得新目标时选择放弃当前目标。\nros2节点信息 要查看**/turtlesim节点的动作，请打开一个新终端并运行命令： ros2 node info /turtlesim 它将返回/turtlesim的订阅者、发布者、服务、操作服务器和动作客户端的列表： 请注意，/turtlesim的/turtle1/rotate_absolute动作位于action Servers下。 这意味着/turtlesim的响应并为/turtle1/rotate_absolute操作提供反馈。 /teleop_turtle节点在Action Clients下的名称为/turtle1/rotate_absolute**，这意味着它为该操作名称发送目标。 ros2 node info /teleop_turtle 这将返回： ros2动作列表 要识别ROS图中的所有动作，请运行以下命令： ros2 action list 这将返回： /turtle1/rotate_absolute 这是目前ROS图中的唯一动作。 它控制海龟的旋转，正如你前面看到的。 通过使用ros2 node info\u0026lt;node_name\u0026gt;命令，您还知道该动作有一个动作客户端（/teleop_turtle的一部分）和一个动作服务器（/turtelsim的一部份）。\nros2动作列表类型 动作有类型，类似于主题和服务。 要查找**/turtle1/rotate_absolute的类型，请运行命令： ros2 action list -t 这将返回： /turtle1/rotate_absolute [turtlesim/action/RotateAbsolute] 在每个动作名称右侧的括号中（在本例中仅为turtlesim/action/RotateAbsolute**）是动作类型turtlesim/action/RotateAbsolute。 当您想从命令行或代码执行动作时，您将需要它。 ros2动作信息 您可以使用以下命令进一步检查**/turtle1/rotate_absolute动作： ros2 action info /turtle1/rotate_absolute 它将返回: Action: /turtle1/rotate_absolute Action clients: 1 /teleop_turtle Action servers: 1 /turtlesim 这告诉了我们前面从在每个节点上运行ros2节点信息中学到了什么： /teleop_turtle节点有一个动作客户端，而/turtlesim节点有用于/turtle1/rotate_absolute**动作的动作服务器。\nros2界面显示 在发送或执行动作目标之前，您还需要一条信息，那就是动作类型的结构。 回想一下，您在运行命令ros2 action list -t时确定了**/turtle1/rotate_absolute的类型。 在终端中输入具有动作类型的以下命令： ros2 interface show turtlesim/action/RotateAbsolute 这将返回： # The desired heading in radians float32 theta --- # The angular displacement in radians to the starting position float32 delta --- # The remaining rotation in radians float32 remaining 此消息的第一部分位于\u0026mdash;**之上，是目标请求的结构（数据类型和名称）。 下一部分是结果的结构。 最后一部分是反馈的结构。\nros2发送动作目标 现在，让我们使用以下语法从命令行发送一个动作目标： ros2 action send_goal \u0026lt;action_name\u0026gt; \u0026lt;action_type\u0026gt; \u0026lt;values\u0026gt; 需要采用YAML格式。 密切关注turtlesim窗口，并在终端中输入以下命令： ros2 action send_goal /turtle1/rotate_absolute turtlesim/action/RotateAbsolute \u0026quot;{theta: 1.57}\u0026quot; 您应该会看到海龟在旋转，并在终端中显示以下消息： 所有目标都有一个唯一的ID，显示在返回消息中。 您还可以看到结果，一个名为delta的字段，它是到起始位置的位移。 要查看此目标的反馈，请将\u0026ndash;feedback添加到ros2 action send_goal命令： ros2 action send_goal /turtle1/rotate_absolute turtlesim/action/RotateAbsolute \u0026quot;{theta: -1.57}\u0026quot; --feedback 您的终端将返回消息： 您将继续收到反馈，剩余弧度，直到目标完成。\n总结 # 动作就像服务一样，允许您执行长时间运行的任务，提供定期反馈，并且可以取消。 机器人系统可能会使用动作进行导航。 动作目标可以告诉机器人移动到某个位置。 当机器人导航到该位置时，它可以沿途发送更新（即反馈），然后在到达目的地后发送最终结果消息。 Turtlesim有一个动作服务器，动作客户端可以向其发送旋转乌龟的目标。 在本教程中，您反思了该动作**/turtle1/rotate_absolute**，以便更好地了解动作是什么以及它们是如何工作的。\n使用rqt_console查看日志 # 背景信息 # rqt_console是一个GUI工具，用于检查ROS 2中的日志消息。 通常，日志消息会显示在终端中。 使用rqt_console，您可以随着时间的推移收集这些消息，以更有序的方式仔细查看它们，过滤它们，保存它们，甚至在不同的时间重新加载保存的文件以进行自检。 节点使用日志以多种方式输出有关事件和状态的消息。 为了用户的利益，他们的内容通常是信息性的。\n任务 # 设置 使用以下命令在新终端中启动rqt_console： ros2 run rqt_console rqt_console rqt_console窗口将打开： 控制台的第一部分显示来自系统的日志消息。 在中间，您可以选择通过排除严重性级别来过滤消息。 您还可以使用右侧的加号按钮添加更多排除筛选器。 底部部分用于突出显示包含您输入的字符串的消息。 您也可以向此部分添加更多筛选器。 现在，使用以下命令在新终端中启动turlsim： ros2 run turtlesim turtlesim_node\nrqt_console上的消息 为了生成rqt_console要显示的日志消息，让乌龟撞到墙上。 在新终端中，输入以下ros2 topic pub命令（在主题教程中详细讨论）： ros2 topic pub -r 1 /turtle1/cmd_vel geometry_msgs/msg/Twist \u0026quot;{linear: {x: 2.0, y: 0.0, z: 0.0}, angular: {x: 0.0,y: 0.0,z: 0.0}}\u0026quot; 由于上述命令以稳定的速度发布主题，乌龟不断地撞到墙上。 在rqt_console中，您将看到同一条消息，其中反复显示警告严重级别，如下所示： 在运行ros2 topic pub命令的终端中按Ctrl+C，以防止乌龟撞到墙上。\n记录器级别 ROS 2的记录器级别按严重程度排序： Fatal Error Warn Info Debug 对于每个级别所表示的内容没有确切的标准，但可以放心地假设： 致命消息表明系统将终止以保护自身免受损害。 错误消息表示不一定会损坏系统的重大问题，但会阻止系统正常运行。 警告消息表示意外的活动或不理想的结果，这可能表示更深层的问题，但不会彻底损害功能。 信息消息指示事件和状态更新，用于直观验证系统是否按预期运行。 调试消息详细说明了系统执行的整个逐步过程。 默认级别为“信息”。您将只看到默认严重级别和更严重级别的消息。 通常，只有Debug消息被隐藏，因为它们是唯一比Info低的级别。 例如，如果将默认级别设置为Warn，则只能看到严重级别为Warn、Error和Fatal的消息。\n设置默认记录器级别 首次使用重新映射运行**/turtlesim节点时，可以设置默认记录器级别。 在终端中输入以下命令： ros2 run turtlesim turtlesim_node --ros-args --log-level WARN 现在，您不会看到上次启动turtlesim时控制台中出现的初始信息级别警告。 这是因为信息消息的优先级低于新的默认严重性Warn**。 总结 # 如果需要仔细检查来自系统的日志消息， rqt_console会非常有用。 您可能会出于各种原因检查日志消息，通常是为了找出哪里出错了，以及导致出错的一系列事件。\n启动节点 # 背景信息 # 在大多数入门教程中，您一直在为运行的每个新节点打开新终端。 当您创建具有越来越多同时运行的节点的更复杂系统时，打开终端并重新输入配置详细信息会变得很乏味。 启动文件允许您同时启动和配置包含ROS 2节点的多个可执行文件。 使用ros2 launch命令运行单个启动文件将立即启动整个系统—所有节点及其配置。\n任务 # 运行启动文件 # 打开新终端并运行： ros2 launch turtlesim multisim.launch.py 此命令将运行以下启动文件：\n# turtlesim/launch/multisim.launch.py from launch import LaunchDescription import launch_ros.actions def generate_launch_description(): return LaunchDescription([ launch_ros.actions.Node( namespace= \u0026#34;turtlesim1\u0026#34;, package=\u0026#39;turtlesim\u0026#39;, executable=\u0026#39;turtlesim_node\u0026#39;, output=\u0026#39;screen\u0026#39;), launch_ros.actions.Node( namespace= \u0026#34;turtlesim2\u0026#34;, package=\u0026#39;turtlesim\u0026#39;, executable=\u0026#39;turtlesim_node\u0026#39;, output=\u0026#39;screen\u0026#39;), ]) 这将运行两个Turtlesim节点： 现在，不要担心这个启动文件的内容。您可以在ROS 2发布教程中找到有关ROS 2启动的更多信息。\n（可选）控制Turtlesim节点 # 现在这些节点正在运行，您可以像控制任何其他ROS 2节点一样控制它们。 例如，您可以打开另外两个终端并运行以下命令，让乌龟朝相反的方向行驶： 在第二个终端： ros2 topic pub /turtlesim1/turtle1/cmd_vel geometry_msgs/msg/Twist \u0026quot;{linear: {x: 2.0, y: 0.0, z: 0.0}, angular: {x: 0.0, y: 0.0, z: 1.8}}\u0026quot; 在第三个终端： ros2 topic pub /turtlesim2/turtle1/cmd_vel geometry_msgs/msg/Twist \u0026quot;{linear: {x: 2.0, y: 0.0, z: 0.0}, angular: {x: 0.0, y: 0.0, z: -1.8}}\u0026quot; 运行这些命令后，您应该会看到如下内容： 总结 # 到目前为止，您所做的工作的意义在于，您已经用一个命令运行了两个Turtlesim节点。 一旦您学会了编写自己的启动文件，就可以使用ros2启动命令以类似的方式运行多个节点并设置其配置。 有关ROS 2启动文件的更多教程，请参阅主启动文件教程页面。\n记录和播放数据 # 出身背景 # ros2 bag是一个命令行工具，用于记录系统中发布的主题数据。 它会累积传递给任意数量主题的数据，并将其保存在数据库中。 然后，您可以重放数据以重现测试和实验的结果。 录制主题也是分享您的作品并允许他人重新创作的好方法。\n任务 # 设置 您将在turtlesim系统中记录键盘输入，以便稍后保存和回放，因此首先启动**/turtlesim和/teleop_turtle**节点。 打开新终端并运行： ros2 run turtlesim turtlesim_node 打开另一个终端并运行： ros2 run turtlesim turtle_teleop_key 我们还可以创建一个新目录来存储保存的录音，这也是一个好做法： mkdir bag_files cd bag_files\n选择主题 ros2 bag只能记录在主题上发布的数据。 要查看系统主题列表，请打开新终端并运行命令： ros2 topic list 这将返回： /parameter_events /rosout /turtle1/cmd_vel /turtle1/color_sensor /turtle1/pose 在主题教程中，您了解到**/turl_teleop节点发布/curl1/cmd_vel主题上的命令，以使乌龟在turlsim中移动。 要查看/curl1/cmd_vel正在发布的数据，请运行命令： ros2 topic echo /turtle1/cmd_vel 最初什么也不会出现，因为远程操作没有发布任何数据。 返回运行teleop**的终端，选择它使其处于活动状态。 使用箭头键移动海龟，您将看到终端上发布的数据运行ros2 topic echo。 linear: x: 2.0 y: 0.0 z: 0.0 angular: x: 0.0 y: 0.0 z: 0.0 ---\nros2 bag record 要记录发布到主题的数据，请使用命令语法： ros2 bag record \u0026lt;topic_name\u0026gt; 在您选择的主题上运行此命令之前，请打开一个新终端并移动到您之前创建的bag_files目录中，因为rosbag文件将保存在您运行它的目录中。 运行命令： ros2 bag record /turtle1/cmd_vel 您将在终端中看到以下消息（日期和时间将不同）： 现在，ros2 bag正在记录**/curtle1/cmd_vel**主题上发布的数据。 返回远程终端，再次移动海龟。 动作无关紧要，但试着做出一个可识别的模式，以便稍后回放数据时查看。 按Ctrl+C停止录制。 数据将以rosbag2_year_month_day-hour_minute_second的格式累积到一个包文件中\n录制多个主题 您还可以录制多个主题，以及将文件ros2 bag保存的名称更改为。 运行以下命令： ros2 bag record -o subset /turtle1/cmd_vel /turtle1/pose -o选项允许您为bag文件选择唯一的名称。 以下字符串（在本例中为subset）是文件名。 要一次录制多个主题，只需列出用空格分隔的每个主题。 您将看到以下消息，确认正在录制这两个主题。 您可以移动乌龟，完成后按Ctrl+C。 ros2 bag info 您可以通过运行以下命令查看有关录制的详细信息： ros2 bag info \u0026lt;bag_file_name\u0026gt; 在subset bag file上运行此命令将返回文件信息列表： 要查看单个消息，您必须打开数据库（在本例中为sqlite3）来检查它，这超出了ROS2的范围。\nros2 bag play 在重放bag file之前，在运行远程操作的终端中输入Ctrl+C。 然后确保您的turtlesim窗口可见，以便您可以看到正在运行的包文件。 输入命令： ros2 bag play subset 终端将返回消息： [INFO] [1666060385.070463236] [rosbag2_storage]: Opened database 'subset/subset_0.db3' for READ_ONLY. 您的海龟将遵循您在录制时输入的相同路径（虽然不是100%准确；海龟对系统计时的微小变化很敏感）。 因为subset文件记录了**/turtle1/pose主题，所以只要您运行了turtlesim**，ros2 bag play命令就不会退出，即使您没有移动。 这是因为只要**/turtlesim节点处于活动状态，它就会定期发布/turtle1/pose主题上的数据。 您可能已经注意到，在上面的ros2 bag info示例结果中，/turtle1/cmd_vel主题的计数信息只有9；这就是我们在录制时按箭头键的次数。 请注意，/turtle1/pose**的“计数”值超过3000；在我们录音的时候，关于这个话题的数据发表了3000次。 ros2 topic hz /turtle1/pose\n总结 # 您可以使用ros2 bag命令记录在ROS 2系统中传递的主题数据。 无论你是与他人分享你的工作还是对自己的实验进行反思，这都是一个很好的了解工具。 要了解位置数据的发布频率，可以运行以下命令：\n","externalUrl":null,"permalink":"/blog/docs/getting-started/","section":"文档","summary":"\u003ch2 class=\"relative group\"\u003e配置环境 \n    \u003cdiv id=\"配置环境\" class=\"anchor\"\u003e\u003c/div\u003e\n    \n    \u003cspan\n        class=\"absolute top-0 w-6 transition-opacity opacity-0 ltr:-left-6 rtl:-right-6 not-prose group-hover:opacity-100 select-none\"\u003e\n        \u003ca class=\"group-hover:text-primary-300 dark:group-hover:text-neutral-700 !no-underline\" href=\"#%e9%85%8d%e7%bd%ae%e7%8e%af%e5%a2%83\" aria-label=\"锚点\"\u003e#\u003c/a\u003e\n    \u003c/span\u003e        \n    \n\u003c/h2\u003e\n\n\u003ch2 class=\"relative group\"\u003e使用turtlesim和rqt \n    \u003cdiv id=\"使用turtlesim和rqt\" class=\"anchor\"\u003e\u003c/div\u003e\n    \n    \u003cspan\n        class=\"absolute top-0 w-6 transition-opacity opacity-0 ltr:-left-6 rtl:-right-6 not-prose group-hover:opacity-100 select-none\"\u003e\n        \u003ca class=\"group-hover:text-primary-300 dark:group-hover:text-neutral-700 !no-underline\" href=\"#%e4%bd%bf%e7%94%a8turtlesim%e5%92%8crqt\" aria-label=\"锚点\"\u003e#\u003c/a\u003e\n    \u003c/span\u003e        \n    \n\u003c/h2\u003e\n\u003cp\u003eTurtlesim是一款用于学习ROS 2的轻量级模拟器。\n它演示了ROS 2在最基本的级别上的功能，让您了解稍后将如何使用真实的机器人或机器人模拟。\u003c/p\u003e","title":"ros2(galactic)初学者教程(上)","type":"docs"},{"content":"","externalUrl":"https://mucahitkurtlar.github.io","permalink":"/blog/users/9d028495840ad385e6cb3ccf051dca22/","section":"用户列表","summary":"","title":"mucahitkurtlar.github.io","type":"users"},{"content":" 使用colcon构建包 # 背景 # colcon是ROS构建工具catkin_make、catkin_make_isolated、catkin_tools和ament_tools的迭代。 有关colcon设计的更多信息，请参阅本文档。 源代码可以在colcon GitHub组织中找到。\n先决条件 # 安装colcon # sudo apt install python3-colcon-common-extensions 基础 # ROS工作区是具有特定结构的目录。 通常有一个src子目录。 子目录中是ROS包的源代码所在的位置。 通常，目录以其他方式开始为空。 colcon执行源代码外的构建。 默认情况下，它将创建以下目录作为src目录的对等方：\nbuild目录将是存储中间文件的位置。 对于每个包，将创建一个子文件夹，例如正在其中调用CMake。 install目录是每个包的安装位置。 默认情况下，每个包都将安装到单独的子目录中。 log目录包含关于每个colcon调用的各种日志记录信息。 创建工作区 # 首先，创建一个目录（ros2_ws）以包含我们的工作区： mkdir -p ~/ros2_ws/src cd ~/ros2_ws 此时，工作区包含一个空目录src\n添加一些源 # 让我们将示例存储库克隆到工作区的src目录中： git clone https://github.com/ros2/examples src/examples -b galactic\n源参考底图 # 重要的是，我们已经为现有的ROS 2安装采购了环境，该安装将为我们的工作区提供示例包所需的构建依赖项。 这是通过寻找二进制安装或源安装（即另一个colcon工作区）提供的安装脚本来实现的（请参阅安装）。 我们称这种环境为底层。 我们的工作区ros2_ws将覆盖现有的ros2安装。 通常，当您计划迭代少量的包时，建议使用覆盖，而不是将所有包放入同一个工作区。 在工作区的根目录中，运行colcon build。 由于诸如ament_cmake之类的构建类型不支持devel空间的概念，并且需要安装包，因此colcon支持选项--symlink-install。 这允许通过更改源空间中的文件（例如Python文件或其他未编译的资源）来更改已安装的文件，以加快迭代速度。 colcon build --symlink-install\n运行测试 # 要对我们刚刚构建的包运行测试，请运行以下命令： colcon test\n寻找环境来源 # 当colcon成功完成构建后，输出将位于安装目录中。 在使用任何已安装的可执行文件或库之前，需要将它们添加到路径和库路径中。 colcon将在安装目录中生成bash/bat文件，以帮助设置环境。 这些文件将把所有必需的元素添加到路径和库路径中，并提供由包导出的任何bash或shell命令。 . install/setup.bash\n尝试演示 # 有了源环境，我们可以运行colcon构建的可执行文件。 让我们从示例中运行一个订户节点： ros2 run examples_rclcpp_minimal_subscriber subscriber_member_function 在另一个终端中，让我们运行发布者节点（不要忘记获取安装脚本的源代码）： ros2 run examples_rclcpp_minimal_publisher publisher_member_function 您应该会看到来自发布者和订阅者的消息，其中数字递增。\n创建您自己的程序包 # colcon使用该软件包。 REP 149中定义的xml规范（也支持格式2）。 colcon支持多种构建类型。 建议的构建类型为ament_cake和ament_python。 还支持纯cmake包。 ament_python构建的一个示例是ament_index_pythen包，其中的设置。 setup.py是建筑的主要入口点。 demo_nodes_cpp等包使用ament_cmake构建类型，并使用cmake作为构建工具。 为了方便起见，您可以使用工具ros2 pkg create基于模板创建新的包。\n设置colcon_cd # 命令colcon_cd允许您快速将shell的当前工作目录更改为包的目录。 例如，colcon_cd some_ros_package会很快将您带到目录~/ros2_install/src/some_ros_package。 echo \u0026quot;source /usr/share/colcon_cd/function/colcon_cd.sh\u0026quot; \u0026gt;\u0026gt; ~/.bashrc echo \u0026quot;export _colcon_cd_root=/opt/ros/galactic/\u0026quot; \u0026gt;\u0026gt; ~/.bashrc 根据您安装colcon_cd的方式和工作区的位置，上面的说明可能会有所不同，请参阅文档了解更多详细信息。 要在Linux和macOS中撤消此操作，请找到系统的shell启动脚本并删除附加的source和export命令。\n设置colcon选项卡完成 # 如果安装了colcon-argcomplete 包，则命令colcon支持bash和类似bash的shell的命令完成。 echo \u0026quot;source /usr/share/colcon_argcomplete/hook/colcon-argcomplete.bash\u0026quot; \u0026gt;\u0026gt; ~/.bashrc 根据您安装colcon的方式和工作区的位置，上面的说明可能会有所不同，请参阅文档了解更多详细信息。 要在Linux和macOS中撤消此操作，请找到系统的shell启动脚本并删除附加的source命令。\n提示 # 如果您不想构建特定的包，请在目录中放置一个名为COLCON_IGNORE的空文件，它将不会被索引。 如果要避免在CMake包中配置和构建测试，可以传递：--CMake args-DBUILD_TESTING=0。 如果要从包中运行单个特定测试： colcon test --packages-select YOUR_PKG_NAME --ctest-args -R YOUR_TEST_IN_PKG 创建工作区 # 背景 # 工作区是包含ROS 2包的目录。 在使用ROS 2之前，有必要在您计划使用的终端中寻找ROS 2安装工作空间。 这使得您可以在该终端中使用ROS 2的软件包。 您还可以选择寻找一个“覆盖层”，这是一个辅助工作区，您可以在其中添加新的软件包，而不会干扰您正在扩展的现有ROS 2工作区或“底层”。 参考底图必须包含覆盖图中所有文件包的依赖项。 覆盖图中的文件包将覆盖参考底图中的软件包。 也可以有多个参考底图和覆盖层，每个连续覆盖层都使用其父参考底图的包。\n先决条件 # sudo apt update sudo apt install git-all sudo apt install -y python3-rosdep sudo rosdep init rosdep update 任务 # Source ROS 2环境 您的主要ROS 2安装将是本教程的基础。（请记住，衬底不一定是ROS 2的主要安装。） 根据您安装ROS 2的方式（源代码或二进制代码），以及您所在的平台，您的确切源代码命令将有所不同： source /opt/ros/galactic/setup.bash 如果这些命令对您不起作用，请参阅您遵循的安装指南。\n创建新目录 最佳实践是为每个新工作区创建一个新目录。 名称无关紧要，但它可以指示工作区的用途。 让我们为“开发工作区”选择目录名ros2_ws： mkdir -p ~/ros2_ws/src cd ~/ros2_ws/src 另一个最佳实践是将工作区中的任何包放入src目录。 上面的代码在ros2_ws中创建一个src目录，然后导航到该目录。\nClone a sample repo 在克隆之前，请确保您仍在ros2_ws/src目录中。 在初学者开发人员教程的其余部分中，您将创建自己的软件包，但目前您将练习使用现有软件包将工作区组合在一起。 您将使用的现有包来自ros_tutorials存储库（repo）。 如果您阅读了“初学者：CLI工具”教程，您将熟悉本报告中的一个软件包turtlesim。 您可以在GitHub上看到repo。 请注意目录列表上方左侧的“Branch”下拉列表。 克隆此repo时，添加**-b参数，后跟与ROS2发行版对应的分支。 在ros2_ws/src目录中，为您使用的发行版运行以下命令： git clone https://github.com/ros/ros_tutorials.git -b galactic-devel 现在ros_tutorials**已克隆到您的工作区中。 ros_tutorials存储库包含turtlesim包，我们将在本教程的其余部分使用它。 此存储库中的其他包未生成，因为它们包含COLCON_IGNORE文件。 现在您已经用一个示例包填充了您的工作区，但它还不是一个功能齐全的工作区。 您需要首先解决依赖关系并构建工作区。\n解决依赖项 在构建工作区之前，需要解决包依赖项。 您可能已经拥有所有依赖项，但最佳实践是每次克隆时都要检查依赖项。 您不希望构建在长时间等待后因为缺少依赖项而失败。 从工作区的根目录（ros2_ws）运行以下命令： # cd if you're still in the ``src`` directory with the ``ros_tutorials`` clone cd .. rosdep install -i --from-path src --rosdistro galactic -y 如果您从源代码或“fat”归档文件在Linux上安装了ROS2，则需要使用安装说明中的rosdep命令。 如果您已经拥有所有依赖项，控制台将返回： #All required rosdeps installed successfully 包在package.xml文件中声明其依赖项。 （您将在下一个教程中了解更多关于包的信息）。 此命令将遍历这些声明并安装缺少的声明。 您可以在另一个教程（即将推出）中了解更多关于rosdep的信息。\n使用colcon构建工作区 现在，您可以从工作区的根目录（ros2_ws）使用以下命令构建包： colcon build 控制台将返回以下消息： colcon build 其他有用参数：\n--packages-up-to 构建所需的包及其所有依赖项，但不是整个工作区（节省时间） --symlink-install 避免了每次调整python脚本时都需要重新构建 --event-handlers console_direct+ 显示构建时的控制台输出（可以在日志目录中找到） 构建完成后，在工作区根目录（~/ros2_ws）中输入ls，您将看到colcon创建了新目录： build install log src 安装目录是工作区的设置文件所在的位置，您可以使用它来获取覆盖图。 Source the overlay 在寻找覆盖层之前，打开一个新的终端（与构建工作区的终端分开）非常重要。在您构建的同一终端中获取覆盖层，或者同样在获取覆盖层的地方构建覆盖层，可能会产生复杂的问题。 在新终端中，将您的主要ROS 2环境作为“底层”，这样您就可以在其上构建覆盖层： source /opt/ros/galactic/setup.bash 进入工作区的根目录： cd ~/ros2_ws 在根目录中，source your overlay： . install/local_setup.bash 获取覆盖层的local_setup只会将覆盖层中可用的包添加到您的环境中。 安装程序会获取覆盖图以及创建覆盖图的参考底图，从而允许您使用这两个工作空间。 因此，像您刚才所做的那样，先获取您的主ROS 2安装的设置，然后再获取ros2_ws覆盖的local_setup，这与仅获取ros2_ws的设置相同，因为这包括创建它的参考底图的环境。 现在，您可以从覆盖图中运行turtlesim软件包： ros2 run turtlesim turtlesim_node 但是你怎么知道这是覆盖的turtlesim在运行，而不是你的主安装的turtlesim？ 让我们修改覆盖图中的turtlesim，以便您可以看到效果： 可以单独在参考底图中修改和重建覆盖中的包。 覆盖优先于参考底图。\n修改overlay 您可以通过编辑乌龟窗口上的标题栏来修改overlay中的乌龟。 为此，请找到turtle_frame。 ~/ros2_ws/src/rostutorials/turtlesim/src中的cpp文件。 与您首选的文本编辑器打开turtle_frame.cpp。 在第52行，您将看到函数setWindowTitle（“TurtleSim”）；。 将值“TurtleSim”更改为“MyTurtleSim”，然后保存文件。 返回之前运行colcon build的第一个终端，然后再次运行它。 返回第二个终端（overlay的来源地），再次运行turtlesim： ros2 run turtlesim turtlesim_node 现在，您将看到TurtleSim窗口上的标题栏显示“MyTurtleSim”。 尽管您的主要ROS 2环境是在此终端中较早获得的，但ros2_ws环境的覆盖优先于参考底图的内容。 要查看您的衬底是否完好无损，请打开一个全新的终端，并仅查找ROS 2安装。 再次运行turtlesim： ros2 run turtlesim turtlesim_node 可以看到，覆盖中的修改实际上并未影响参考底图中的任何内容。 总结 # 在本教程中，您将主要的ROS2发行版安装作为底层，并通过在新的工作区中克隆和构建软件包来创建覆盖层。 覆盖将添加到路径的前面，并优先于参考底图，正如您在修改后的turtlesim中看到的那样。 建议在处理少量包时使用覆盖，这样您就不必将所有内容都放在同一个工作区中，也不必在每次迭代时重建一个巨大的工作区。\n创建程序包 # 背景信息 # 什么是ROS 2程序包？ 程序包可以被视为您的ROS 2代码的容器。 如果您希望能够安装代码或与他人共享代码，那么您需要将其组织在一个包中。 有了程序包，您可以发布您的ROS2作品，并允许其他人轻松构建和使用它。 ROS2中的包创建使用ament作为其构建系统，colcon作为其构建工具。 您可以使用官方支持的CMake或Python创建包，尽管存在其他构建类型。 ROS 2程序包由什么组成？ ROS 2 Python和CMake包都有自己的最低要求内容： package.xml包含有关包的元信息的文件 CMakeLists.txt描述如何在包中构建代码的文件 工作区中的包 一个工作区可以包含任意多个文件包，每个文件包位于各自的文件夹中。 您还可以在一个工作区中拥有不同构建类型的包（CMake、Python等）。 不能有嵌套包。 最佳实践是在工作区中有一个src文件夹，并在其中创建包。 这样可以保持工作区的顶层“干净”。 任务 # 创建包 首先，获取ROS 2安装的源代码。 让我们将在上一教程中创建的工作区ros2_ws用于您的新软件包。 在运行包创建命令之前，请确保您位于src文件夹中。 cd ~/ros2_ws/src 在ROS 2中创建新包的命令语法为： ros2 pkg create --build-type ament_cmake \u0026lt;package_name\u0026gt; 对于本教程，您将使用可选参数--node-name，它在包中创建一个简单的Hello World类型的可执行文件。 在终端中输入以下命令： ros2 pkg create --build-type ament_cmake --node-name my_node my_package 现在，您将在工作区的src目录中有一个名为my_package的新文件夹。 运行命令后，终端将返回消息： 您可以看到为新包自动生成的文件。\n构建包 将包放在工作区中特别有价值，因为您可以通过在工作区根目录中运行colcon build一次构建多个包。 否则，您必须单独构建每个包。 返回工作区的根目录： cd ~/ros2_ws 现在，您可以构建包： colcon build 回想一下上一篇教程，您在ros2_ws中也有ros_tutorials包。 您可能已经注意到，运行colcon build也构建了turtlesim包。 当您的工作区中只有几个包时，这很好，但当有许多包时，colcon build可能需要很长时间。 要下次只构建my_package包，可以运行： colcon build --packages-select my_package\n获取安装文件 要使用您的新软件包和可执行文件，请首先打开一个新终端并获取您的主要ROS 2安装源代码。 然后，从ros2_ws目录中运行以下命令以获取工作区的源代码： . install/local_setup.bash 现在您的工作区已经添加到路径中，您将能够使用新包的可执行文件。\n使用包装 要在包创建期间运行使用--node-name参数创建的可执行文件，请输入以下命令： ros2 run my_package my_node 这将向您的终端返回一条消息： hello world my_package package\n检查包装内容 在ros2_ws/src/my_package中，您将看到ros2 pkg create自动创建的文件和文件夹： CMakeLists.txt include package.xml src my_node.cpp位于src目录中。 这是所有定制**C++**节点将来都要用到的地方。\n自定义package.xml 您可能在创建包后的返回消息中注意到，字段描述和许可证包含TODO注释。 这是因为软件包描述和许可证声明不是自动设置的，但如果您想要发布软件包，则必须设置。 可能还需要填写maintainer字段。 从ros2_ws/src/my_package打开package.xml。 使用首选文本编辑器： 如果尚未自动为您填写姓名和电子邮件，请在maintainer行中输入您的姓名和电子邮件。 然后，编辑描述行以汇总文件包： \u0026lt;description\u0026gt;Beginner client libraries tutorials practice package\u0026lt;/description\u0026gt; 然后更新许可证行。 您可以在此处阅读有关开放源码许可证的更多信息。 由于此软件包仅用于实践，因此可以安全地使用任何许可证。 我们使用Apache License 2.0： \u0026lt;license\u0026gt;Apache License 2.0\u0026lt;/license\u0026gt; 编辑完成后，不要忘记保存。 在许可证标签下面，您将看到一些以_depend结尾的标签名称。 这就是你的package.xml将列出它对其他包的依赖关系，供colcon搜索。 my_package很简单，没有任何依赖项，但您将在即将到来的教程中看到这个空间正在被利用。\n总结 # 您已经创建了一个包来组织您的代码并使其易于他人使用。 您的包自动填充了必要的文件，然后您使用colcon构建它，以便可以在本地环境中使用它的可执行文件。\n编写简单的发布者和订阅者（C++） # 背景 # 节点是通过ROS图通信的可执行进程。 在本教程中，节点将通过主题以字符串消息的形式相互传递信息。 这里使用的示例是一个简单的“说话者”和“听者”系统；一个节点发布数据，另一个节点订阅主题，以便接收该数据。 这些示例中使用的代码可以在此处找到。\n任务 # 创建包 打开一个新终端并获取ROS 2安装的源代码，以便ros2命令可以工作。 导航到上一教程中创建的ros2_ws目录。 回想一下，包应该在src目录中创建，而不是在工作区的根目录中创建。 因此，导航到ros2_ws/src，然后运行包创建命令： ros2 pkg create --build-type ament_cmake cpp_pubsub 您的终端将返回一条消息，验证您的包cpp_pubsub及其所有必要的文件和文件夹的创建。 导航到ros2_ws/src/cpp_pubsub/src。 回想一下，这是任何CMake包中包含可执行文件的源文件所属的目录。\n编写发布者节点 输入以下命令下载示例通话器代码： wget -O publisher_member_function.cpp https://raw.githubusercontent.com/ros2/examples/galactic/rclcpp/topics/minimal_publisher/member_function.cpp 现在将有一个名为publisher_member_function.cpp的新文件。 使用首选文本编辑器打开文件。 检验代码 代码顶部包括您将要使用的标准C++头文件。 标准C++标头之后是rclcpp/rclcpp.hpp包括允许您使用ROS 2系统中最常见的部件。 最后一个是std_msgs/msg/string.hpp，其中包括用于发布数据的内置消息类型。 这些行表示节点的依赖关系。 回想一下，依赖项必须添加到包中。 package.xml和CMakeLists.txt，这将在下一节中完成。 #include \u0026lt;chrono\u0026gt; #include \u0026lt;functional\u0026gt; #include \u0026lt;memory\u0026gt; #include \u0026lt;string\u0026gt; #include \u0026quot;rclcpp/rclcpp.hpp\u0026quot; #include \u0026quot;std_msgs/msg/string.hpp\u0026quot; using namespace std::chrono_literals; 下一行通过继承rclcpp:：node创建节点类MinimalPublisher。 代码中的每个this都是指节点。 class MinimalPublisher : public rclcpp::Node 公共构造函数将节点命名为minimal_publisher，并将count_初始化为0。 在构造函数中，发布者使用String消息类型、主题名称主题和所需的队列大小进行初始化，以在备份时限制消息。 接下来，初始化timer_，这将导致timer_callback函数每秒执行两次。 public: MinimalPublisher() : Node(\u0026quot;minimal_publisher\u0026quot;), count_(0) { publisher_ = this-\u0026gt;create_publisher\u0026lt;std_msgs::msg::String\u0026gt;(\u0026quot;topic\u0026quot;, 10); timer_ = this-\u0026gt;create_wall_timer( 500ms, std::bind(\u0026amp;MinimalPublisher::timer_callback, this)); } timer_callback函数是设置消息数据和实际发布消息的地方。 RCLCPP_INFO宏确保将每个发布的消息打印到控制台。 private: void timer_callback() { auto message = std_msgs::msg::String(); message.data = \u0026quot;Hello, world! \u0026quot; + std::to_string(count_++); RCLCPP_INFO(this-\u0026gt;get_logger(), \u0026quot;Publishing: '%s'\u0026quot;, message.data.c_str()); publisher_-\u0026gt;publish(message); } 最后是计时器、发布者和计数器字段的声明。 rclcpp::TimerBase::SharedPtr timer_; rclcpp::Publisher\u0026lt;std_msgs::msg::String\u0026gt;::SharedPtr publisher_; size_t count_; MinimalPublisher类后面是main，节点实际上在这里执行。 rclcpp::init初始化ROS2，rclcpp::spin开始处理来自节点的数据，包括来自计时器的回调。 int main(int argc, char * argv[]) { rclcpp::init(argc, argv); rclcpp::spin(std::make_shared\u0026lt;MinimalPublisher\u0026gt;()); rclcpp::shutdown(); return 0; }\n添加依赖项 导航一级回到ros2_ws/src/cpp_pubsub目录，CMakeLists.txt和package.xml文件已为您创建。 文本编辑器打开package.xml。 如前一教程中所述，请确保填写\u0026lt;description\u0026gt;、\u0026lt;maintainer\u0026gt;和\u0026lt;license\u0026gt;标记： \u0026lt;description\u0026gt;Examples of minimal publisher/subscriber using rclcpp\u0026lt;/description\u0026gt; \u0026lt;maintainer email=\u0026quot;you@email.com\u0026quot;\u0026gt;Your Name\u0026lt;/maintainer\u0026gt; \u0026lt;license\u0026gt;Apache License 2.0\u0026lt;/license\u0026gt; 在 \u0026lt;buildtool_depend\u0026gt;ament_cmake\u0026lt;/buildtool_depend\u0026gt;后添加新行，并粘贴与节点的include语句相对应的以下依赖项： \u0026lt;depend\u0026gt;rclcpp\u0026lt;/depend\u0026gt; \u0026lt;depend\u0026gt;std_msgs\u0026lt;/depend\u0026gt; 这声明包在执行代码时需要rclcpp和std_msgs。 确保保存文件。\nCMakeLists.txt 现在打开CMakeLists.txt文件。 在现有依赖项find_package（ament_cmake REQUIRED）下，添加以下行： find_package(rclcpp REQUIRED) find_package(std_msgs REQUIRED) 然后，添加可执行文件并将其命名为talker，以便可以使用ros2 run运行节点： add_executable(talker src/publisher_member_function.cpp) ament_target_dependencies(talker rclcpp std_msgs) 最后，添加install(TARGETS…)部分，以便ros2 run可以找到您的可执行文件： install(TARGETS talker DESTINATION lib/${PROJECT_NAME}) 您可以清理CMakeLists.txt中删除一些不必要的部分和注释，因此它看起来像这样： 您现在可以构建包，获取本地设置文件并运行它，但是让我们先创建订户节点，这样您就可以看到整个系统正在运行。\n编写订阅者节点 返回到ros2_ws/src/cpp_pubsub/src以创建下一个节点。 在终端中输入以下代码： wget -O subscriber_member_function.cpp https://raw.githubusercontent.com/ros2/examples/galactic/rclcpp/topics/minimal_subscriber/member_function.cpp 使用文本编辑器打开subscriber_member_function.cpp。 检验代码 订阅者节点的代码与发布者的代码几乎相同。 现在，节点名为minimal_subscriber，构造函数使用节点的create_subscription类来执行回调。 没有计时器，因为只要数据发布到topic主题，订阅者就会简单地响应。 public: MinimalSubscriber() : Node(\u0026quot;minimal_subscriber\u0026quot;) { subscription_ = this-\u0026gt;create_subscription\u0026lt;std_msgs::msg::String\u0026gt;( \u0026quot;topic\u0026quot;, 10, std::bind(\u0026amp;MinimalSubscriber::topic_callback, this, _1)); } 回想一下主题教程，发布者和订阅者使用的主题名称和消息类型必须匹配才能进行通信。 topic_callback函数接收通过主题发布的字符串消息数据，并使用RCLCPP_INFO宏将其写入控制台。 此类中唯一的字段声明是订阅。 private: void topic_callback(const std_msgs::msg::String \u0026amp; msg) const { RCLCPP_INFO(this-\u0026gt;get_logger(), \u0026quot;I heard: '%s'\u0026quot;, msg.data.c_str()); } rclcpp::Subscription\u0026lt;std_msgs::msg::String\u0026gt;::SharedPtr subscription_; main函数完全相同，只是现在它旋转MinimalSubscriber节点。 对于发布者节点来说，旋转意味着启动计时器，但对于订阅者来说，这仅仅意味着随时准备接收消息。 由于此节点与发布者节点具有相同的依赖关系，因此没有新内容可添加到package.xml。\nCMakeLists.txt 重新打开CMakeLists.txt，并在发布者的条目下面添加订阅者节点的可执行文件和目标。 add_executable(listener src/subscriber_member_function.cpp) ament_target_dependencies(listener rclcpp std_msgs) `` install(TARGETS talker listener DESTINATION lib/${PROJECT_NAME}) 确保保存文件，然后您的发布/订阅系统就可以使用了。\n构建并运行 您可能已经在ROS 2系统中安装了rclcpp和std_msgs包。 在构建之前，最好在工作区的根目录（ros2_ws）中运行rosdep以检查缺少的依赖项： rosdep install -i --from-path src --rosdistro galactic -y 仍然在工作区的根目录ros2_ws中，构建新包： colcon build --packages-select cpp_pubsub 打开一个新终端，导航到ros2_ws，然后查找安装文件： . install/setup.bash 现在运行通话器节点： ros2 run cpp_pubsub talker 终端应该每隔0.5秒发布一次信息消息，如下所示： 打开另一个终端，再次从ros2_ws中获取设置文件，然后启动侦听器节点： ros2 run cpp_pubsub listener 侦听器将开始将消息打印到控制台，从发布者当时的消息计数开始，如下所示： 在每个终端中输入Ctrl+C以停止节点旋转。\n总结 # 您创建了两个节点来发布和订阅主题上的数据。 在编译和运行它们之前，您将它们的依赖项和可执行文件添加到包配置文件中。\n编写简单的服务和客户端（C++） # 背景 # 当节点使用服务进行通信时，发送数据请求的节点称为客户端节点，响应请求的节点为服务节点。 请求和响应的结构由**.srv**文件决定。 这里使用的示例是一个简单的整数加法系统；一个节点请求两个整数的和，另一个节点响应结果。\n任务 # 创建包 打开一个新的终端并获取ros2安装的源代码，以便ros2命令可以工作。 导航到上一教程中创建的ros2_ws目录。 回想一下，包应该在src目录中创建，而不是在工作区的根目录中创建。导航到ros2_ws/src并创建新包： ros2 pkg create --build-type ament_cmake cpp_srvcli --dependencies rclcpp example_interfaces 您的终端将返回一条消息，验证您的包cpp_srvcli及其所有必要的文件和文件夹的创建。 --dependencies参数将自动向package.xml和CMakeLists.txt添加必要的依赖行。 example_interfaces是包含**.srv**文件的包，您需要该文件来构造请求和响应： int64 a int64 b --- int64 sum 前两行是请求的参数，破折号下面是响应。\n更新package.xml 因为您在包创建期间使用了--dependencies选项，所以不必手动向package.xml或CMakeLists.txt添加依赖项。 不过，与往常一样，确保将描述、维护者电子邮件和姓名以及许可证信息添加到package.xml中。 编写服务节点 在ros2_ws/src/cpp_srvcli/src目录中，创建一个名为add_two_ints_server.cpp的新文件并粘贴以下代码： 检验代码 前两个#include语句是包依赖项。 add函数将请求中的两个整数相加，并向响应提供总和，同时使用日志通知控制台其状态。 主功能逐行完成以下任务：\n初始化**ROS 2 C++**客户端库 创建名为add_two_ints_server的节点 为该节点创建名为add_two_ints的服务，并使用\u0026amp;add方法在网络上自动公布该服务 准备好后打印日志消息 旋转节点，使服务可用 添加可执行文件 add_executable宏生成一个可执行文件，可以使用ros2 run运行。 将以下代码块添加到CMakeLists.txt创建一个名为server的可执行文件： add_executable(server src/add_two_ints_server.cpp) ament_target_dependencies(server rclcpp example_interfaces) 所以ros2 run可以找到可执行文件，在文件末尾添加以下行，就在ament_package()之前： install(TARGETS server DESTINATION lib/${PROJECT_NAME}) 您现在可以构建您的包，获取本地设置文件，然后运行它，但是让我们先创建客户端节点，这样您就可以看到整个系统在工作。\n编写客户端节点 在ros2_ws/src/cpp_srvcli/src目录中，创建一个名为add_two_ints_client.cpp的新文件并粘贴以下代码： 检查代码 与服务节点类似，以下代码行创建节点，然后为该节点创建客户端： 接下来，创建请求。它的结构由前面提到的**.srv**文件定义。 while循环给客户端1秒的时间来搜索网络中的服务节点。 如果找不到，它将继续等待。 如果客户端被取消（例如，在终端中输入Ctrl+C），它将返回一条错误日志消息，说明它被中断。 然后客户端发送请求，节点旋转直到收到响应，或者失败。 添加可执行文件 返回CMakeLists.txt为新节点添加可执行文件和目标。 从自动生成的文件中删除一些不必要的样板文件后，您的CMakeLists.txt应该如下所示： 构建并运行 在构建之前，最好在工作区的根目录（ros2_ws）中运行rosdep以检查缺少的依赖项： rosdep install -i --from-path src --rosdistro galactic -y 导航回工作区的根目录ros2_ws，并构建新包： colcon build --packages-select cpp_srvcli 打开一个新终端，导航到ros2_ws，并获取设置文件： . install/setup.bash 现在运行服务节点： ros2 run cpp_srvcli server 终端应返回以下消息，然后等待： [INFO] [rclcpp]: Ready to add two ints. 打开另一个终端，再次从ros2_ws中获取设置文件。 启动客户端节点，后跟空格分隔的任意两个整数： ros2 run cpp_srvcli client 2 3 例如，如果选择2和3，客户端将收到如下响应： [INFO] [rclcpp]: Sum: 5 返回运行服务节点的终端。 您将看到它在收到请求和收到的数据时发布了日志消息，并返回了响应： [INFO] [rclcpp]: Incoming request a: 2 b: 3 [INFO] [rclcpp]: sending back response: [5] 在服务器终端中输入Ctrl+C以停止节点旋转。\n总结 # 您创建了两个节点，用于通过服务请求和响应数据。 您将它们的依赖项和可执行文件添加到包配置文件中，以便可以构建和运行它们，并查看正在运行的服务/客户端系统。\n创建自定义msg和srv文件 # 背景 # 在前面的教程中，您使用了消息和服务接口来了解主题、服务以及简单的发布者/订阅者（C++/Python）和服务/客户端（C++/Python）节点。 在这些情况下，您使用的接口是预定义的。 虽然使用预定义的接口定义是一种良好的实践，但有时您可能还需要定义自己的消息和服务。 本教程将向您介绍创建自定义接口定义的最简单方法。\n任务 # 创建新包 对于本教程，您将在自己的包中创建自定义**.msg和.srv文件，然后在单独的包中使用它们。 这两个包应该在同一个工作区中。 由于我们将使用先前教程中创建的pub/sub和service/client包，请确保您与这些包（ros2_ws/src）位于同一工作区中，然后运行以下命令创建新包： ros2 pkg create --build-type ament_cmake tutorial_interfaces tutorial_interfaces是新包的名称。 请注意，它是一个CMake包；目前无法在纯Python包中生成.msg或.srv文件。 您可以在CMake包中创建自定义接口，然后在Python节点中使用它，这将在最后一节中介绍。 最好将.msg和.srv文件保存在包中各自的目录中。 在ros2_ws/src/tutorial_interfaces**中创建目录： mkdir msg mkdir srv\n创建自定义定义\nmsg定义 在刚刚创建的tutorial_interfaces/msg目录中，创建一个名为Num.msg的新文件，其中有一行代码声明其数据结构： int64 num 这是一条自定义消息，它传输一个名为num的64位整数。 同样在您刚刚创建的tutorial_interfaces/msg目录中，创建一个名为Sphere.msg的新文件。邮件内容如下： geometry_msgs/Point center float64 radius 此自定义消息使用另一个消息包（在本例中为geometry_msgs/Point）中的消息。\nsrv定义 回到刚才创建的tutorial_interfaces/srv目录，创建一个名为AddThreeInts.srv的新文件。 具有以下请求和响应结构： int64 a int64 b int64 c --- int64 sum 这是您的定制服务，它请求三个名为a、b和c的整数，并用一个名为sum的整数进行响应。\nCMakeLists.txt 要将您定义的接口转换为特定于语言的代码（如C++和Python），以便在这些语言中使用，请在CMakeLists.txt中添加以下行： find_package(geometry_msgs REQUIRED) find_package(rosidl_default_generators REQUIRED) rosidl_generate_interfaces(${PROJECT_NAME} \u0026quot;msg/Num.msg\u0026quot; \u0026quot;msg/Sphere.msg\u0026quot; \u0026quot;srv/AddThreeInts.srv\u0026quot; DEPENDENCIES geometry_msgs # Add packages that above messages depend on, in this case geometry_msgs for Sphere.msg )\npackage.xml 因为接口依赖于rosidl_default_generator来生成特定于语言的代码，所以需要声明对它的依赖关系。 ＜exec_depend＞标记用于指定运行时或执行阶段依赖项，rosidl_interface_packages是包所属的依赖项组的名称，使用＜member_of_group＞标记声明。 将以下行添加到package.xml\n构建tutorial_interfaces包 既然自定义接口包的所有部分都已就位，就可以构建包了。 在工作区的根目录（~/ros2_ws）中，运行以下命令： colcon build --packages-select tutorial_interfaces 现在，其他ROS 2包可以发现这些接口。\n确认msg和srv创建 在新终端中，从工作区（ros2_ws）中运行以下命令以获取源代码： . install/setup.bash 现在，您可以使用ros2 interface show命令确认您的界面创建工作正常： ros2 interface show tutorial_interfaces/msg/Num 应返回： int64 num 然后 ros2 interface show tutorial_interfaces/msg/Sphere 应返回： geometry_msgs/Point center float64 x float64 y float64 z float64 radius然后ros2 interface show tutorial_interfaces/srv/AddThreeInts应返回：int64 a int64 b int64 c \u0026mdash; int64 sum`\n测试新接口 对于此步骤，您可以使用在先前教程中创建的包。 对节点、CMakeLists和package文件进行一些简单的修改将允许您使用新的接口。\n使用pub/sub测试Num.msg 对上一个教程（C++或Python）中创建的发布者/订阅者包稍作修改后，您可以看到Num.msg正在运行。 由于您要将标准字符串msg更改为数字字符串，因此输出将略有不同。 发布者： 订阅者: CMakeLists.txt： 添加以下行（仅限C++）： package.xml： 添加以下行： \u0026lt;depend\u0026gt;tutorial_interfaces\u0026lt;/depend\u0026gt; 进行上述编辑并保存所有更改后，构建包： colcon build --packages-select cpp_pubsub 然后打开两个新终端，在每个终端中源ros2_ws，并运行： ros2 run cpp_pubsub talker ros2 run cpp_pubsub listener 由于Num.msg只转发一个整数，所以发布者应该只发布整数值，而不是之前发布的字符串：\n用服务/客户端测试AddThreeInts.srv 对上一个教程（C++或Python）中创建的服务/客户机包稍作修改，就可以看到AddThreeInt.srv正在运行。 由于要将原来的两整数请求srv更改为三整数请求srv，因此输出将略有不同。 服务： 客户端: CMakeLists.txt： 添加以下行（仅限C++）： package.xml： 添加以下行： \u0026lt;depend\u0026gt;tutorial_interfaces\u0026lt;/depend\u0026gt; 进行上述编辑并保存所有更改后，构建包： colcon build --packages-select cpp_srvcli 然后打开两个新终端，在每个终端中源ros2_ws，并运行： ros2 run cpp_srvcli server ros2 run cpp_srvcli client 2 3 1\n总结 # 在本教程中，您学习了如何在自己的包中创建自定义接口，以及如何在其他包中使用这些接口。 这是一种简单的界面创建和利用方法。 您可以在此处了解更多关于接口的信息。\n实现自定义接口 # 背景 # 在上一个教程中，您学习了如何创建自定义msg和srv接口。 虽然最佳实践是在专用接口包中声明接口，但有时在一个包中声明、创建和使用接口会很方便。 回想一下，接口目前只能在CMake包中定义。 但是，在CMake包中可以有Python库和节点（使用ament_CMake_Python），因此可以在一个包中一起定义接口和Python节点。 为了简单起见，我们将在这里使用CMake包和C++节点。 本教程将重点介绍msg接口类型，但这里的步骤适用于所有接口类型。\n任务 # 创建包 在工作区src目录中，创建一个包more_interfaces，并在其中创建一个msg文件文件夹： ros2 pkg create --build-type ament_cmake more_interfaces mkdir more_interfaces/msg\n创建消息文件 在more_interfaces/msg中，创建一个新文件AddressBook.msg 粘贴以下代码以创建用于携带个人信息的消息： 此消息由5个字段组成： first_name：字符串类型 last_name：字符串类型 gender：bool类型，可以是MALE或FEMALE age：类型uint8 address：字符串类型 请注意，可以为消息定义中的字段设置默认值。 有关自定义接口的更多方式，请参阅关于ROS 2接口。 接下来，我们需要确保msg文件被转换为C++、Python和其他语言的源代码。\n构建消息文件 package.xml，并添加以下行： \u0026lt;buildtool_depend\u0026gt;rosidl_default_generators\u0026lt;/buildtool_depend\u0026gt; \u0026lt;exec_depend\u0026gt;rosidl_default_runtime\u0026lt;/exec_depend\u0026gt; \u0026lt;member_of_group\u0026gt;rosidl_interface_packages\u0026lt;/member_of_group\u0026gt; 请注意，在构建时，我们需要rosidl_default_generator，而在运行时，我们只需要rosild_default_runtime。 打开CMakeLists.txt并添加以下行： 查找从msg/srv文件生成消息代码的包： find_package(rosidl_default_generators REQUIRED) 声明要生成的消息列表： set(msg_files \u0026quot;msg/AddressBook.msg\u0026quot;) 通过手动添加**.msg文件，我们确保CMake在添加其他.msg**后知道何时需要重新配置项目。 生成消息： rosidl_generate_interfaces(${PROJECT_NAME} ${msg_files}) 还要确保导出消息运行时依赖项： ament_export_dependencies(rosidl_default_runtime) 现在，您可以根据您的消息定义生成源文件了。 现在我们将跳过编译步骤，因为我们将在下面的步骤4中一起完成。 2.（额外）设置多个接口 您可以使用set整齐地列出所有接口 并立即生成所有列表，如下所示\n使用来自同一包的接口 现在我们可以开始编写使用此消息的代码了。 在more_interfaces/src中，创建一个名为publish_address_book.cpp的文件并粘贴以下代码： 代码说明 包括我们新创建的AddressBook.msg的标题。 创建节点和AddressBook发布者。 创建回调以定期发布消息。 创建一个稍后将发布的AddressBook消息实例。 填充AddressBook字段。 最后定期发送消息。 创建一个1秒计时器，每秒调用publish_msg函数。 构建发布者 我们需要在CMakeLists.txt中为此节点创建一个新目标： 针对接口的链接 为了使用同一包中生成的消息，我们需要使用以下CMake代码： 这将从AddressBook.msg中找到相关生成的C++代码。 并允许你的目标链接到它。 您可能已经注意到，当使用的接口来自单独构建的包时，此步骤是不必要的。 此CMake代码仅当您希望在与使用它们的包相同的包中使用接口时才需要。 尝试一下 返回工作区的根目录以生成包： cd ~/ros2_ws colcon build --packages-up-to more_interfaces 然后获取工作区并运行发布服务器： . install/local_setup.bash ros2 run more_interfaces publish_address_book 您应该看到发布者转发您定义的消息，包括您在publish_address_book.cpp中设置的值。 要确认消息正在address_book主题上发布，请打开另一个终端，找到工作区，然后调用主题echo： . install/setup.bash ros2 topic echo /address_book 在本教程中，我们不会创建订阅者，但您可以尝试自己编写一个订阅者以供练习（使用编写简单的发布者和订阅者（C++）来帮助）。 5.（额外）使用现有接口定义\n总结 # 在本教程中，您尝试了不同的字段类型来定义接口，然后在使用它的同一个包中构建了一个接口。 您还学习了如何使用另一个接口作为字段类型以及package.xml、CMakeLists.txt和**#include**语句。\n在类（C++）中使用参数 # 背景 # 在创建自己的节点时，有时需要添加可以从启动文件中设置的参数。 本教程将向您展示如何在**C++**类中创建这些参数，以及如何在启动文件中设置这些参数。\n任务 # 创建包 打开一个新的终端并获取ros2安装的源代码，以便ros2命令可以工作。 按照以下说明创建一个名为ros2_ws的新工作区。 回想一下，包应该在src目录中创建，而不是在工作区的根目录中创建。 导航到ros2_ws/src并创建新包： ros2 pkg create --build-type ament_cmake cpp_parameters --dependencies rclcpp 您的终端将返回一条消息，验证包cpp_parameters及其所有必要的文件和文件夹的创建。 --dependencies参数将自动向package.xml和CMakeLists.txt添加必要的依赖行。。 更新package.xml 因为您在包创建期间使用了--dependencies选项，所以不必手动向package.xml和CMakeLists.txt添加依赖项。 不过，与往常一样，确保将描述、维护者电子邮件和姓名以及许可证信息添加到package.xml中。 编写C++节点 在ros2_ws/src/cpp_parameters/src目录中，创建一个名为cpp_paramenters_node.cpp的新文件并粘贴以下代码： 检验代码 顶部的#include语句是包依赖项。 下一段代码将创建类和构造函数。 此构造函数的第一行创建了一个名为my_parameter的参数，默认值为world。 参数类型是根据默认值推断的，因此在本例中，它将被设置为字符串类型。 接下来，以1000ms的周期初始化timer_，这将导致timer_callback函数每秒执行一次。 timer_callback函数的第一行从节点获取参数my_parameter，并将其存储在my_param中。 接下来，RCLCPP_INFO函数确保记录消息。 然后，set_parameters函数将参数my_parameter设置回默认字符串值world。 如果用户在外部更改了参数，这将确保始终将其重置为原始值。 最后是timer_的声明 遵循我们的MinimalParam是我们的主要目标。 在这里，ROS2被初始化，MinimalParam类的实例被构造，rclcpp::spin开始处理来自节点的数据。 添加可执行文件 现在打开CMakeLists.txt文件。 在依赖项find_package（rclcpp REQUIRED）下面添加以下代码行。 add_executable(minimal_param_node src/cpp_parameters_node.cpp) ament_target_dependencies(minimal_param_node rclcpp) install(TARGETS minimal_param_node DESTINATION lib/${PROJECT_NAME}) 构建并运行 在构建之前，最好在工作区的根目录（ros2_ws）中运行rosdep以检查缺少的依赖项： rosdep install -i --from-path src --rosdistro galactic -y 导航回工作区的根目录ros2_ws，并构建新包： colcon build --packages-select cpp_parameters 打开一个新终端，导航到ros2_ws，并获取设置文件： . install/setup.bash 现在运行节点： ros2 run cpp_parameters minimal_param_node 终端应每秒返回以下消息： [INFO] [minimal_param_node]: Hello world! 现在您可以看到参数的默认值，但您希望能够自己设置它。有两种方法可以实现这一点。 通过控制台进行更改 本部分将使用您从教程中获得的有关参数的知识，并将其应用于刚刚创建的节点。 确保节点正在运行： ros2 run cpp_parameters minimal_param_node 打开另一个终端，再次从ros2_ws中获取设置文件，然后输入以下行： ros2 param list 在这里，您将看到自定义参数my_parameter。 要更改它，只需在控制台中运行以下命令行： ros2 param set /minimal_param_node my_parameter earth 您知道，如果成功获得输出Set parameter successful，它会运行良好。 如果您查看另一个终端，您应该会看到输出更改为[INFO] [minimal_param_node]: Hello earth! 通过启动文件进行更改 您也可以在启动文件中设置参数，但首先需要添加启动目录。 在ros2_ws/src/cpp_parameters/目录中，创建一个名为launch的新目录。 在那里，创建一个名为cpp_parameters_launch.py的新文件 在这里，您可以看到我们在启动节点minimal_param_node时将my_parameter设置为earth。 通过添加下面的两行，我们确保在控制台中打印输出。 现在打开CMakeLists.txt文件。 在前面添加的行下面，添加以下代码行。 install( DIRECTORY launch DESTINATION share/${PROJECT_NAME}) 打开控制台并导航到工作区的根目录ros2_ws，然后构建新包： colcon build --packages-select cpp_parameters 然后在新终端中查找设置文件： . install/setup.bash 现在使用我们刚刚创建的启动文件运行节点： ros2 launch cpp_parameters cpp_parameters_launch.py 终端应每秒返回以下消息： [INFO] [custom_minimal_param_node]: Hello earth! 总结 # 您使用自定义参数创建了一个节点，该参数可以从启动文件或命令行设置。 您将依赖项、可执行文件和启动文件添加到包配置文件中，以便可以构建和运行它们，并查看实际的参数。\n使用ros2doctor识别问题 # 背景 # 当您的ROS 2设置未按预期运行时，您可以使用ros2doctor工具检查其设置。 ros2doctor检查ROS2的所有方面，包括平台、版本、网络、环境、运行系统等，并警告您可能的错误和问题原因。\n任务 # 检查您的设置 让我们与ros2doctor一起检查您的一般ROS2设置。 首先，从新终端中获得ROS 2，然后输入命令： ros2 doctor 这将对所有安装模块进行检查，并返回警告和错误。 如果您的ROS 2设置处于完美状态，您将看到类似以下消息： All \u0026lt;n\u0026gt; checks passed 然而，返回一些警告并不罕见。 UserWarning并不意味着您的设置不可用； 这更可能只是一种指示，表明某些东西的配置方式并不理想。 如果您确实收到了一个警告，它看起来像这样： \u0026lt;path\u0026gt;: \u0026lt;line\u0026gt;: UserWarning: \u0026lt;message\u0026gt; 例如，如果您使用的是不稳定的ROS 2分布，ros2doctor会发现此警告： UserWarning: Distribution \u0026lt;distro\u0026gt; is not fully supported or tested. To get more consistent features, download a stable version at https://index.ros.org/doc/ros2/Installation/ 如果ros2doctor仅在您的系统中发现警告，您仍然会收到All＜n＞checks passed（所有＜n＞检查已通过）消息。 大多数检查被归类为警告，而不是错误。 这主要取决于你，用户，来确定ros2doctor返回的反馈的重要性。 如果它确实在您的设置中发现一个罕见的错误，如UserWarning:error:所示，则认为检查失败。 您将在问题反馈列表中看到类似于此的消息： 1/3 checks failed Failed modules: network 错误表示系统缺少对ROS 2至关重要的重要设置或功能。 应解决错误，以确保系统正常运行。\n检查系统 您还可以检查正在运行的ROS 2系统，以确定问题的可能原因。 要查看ros2doctor在运行中的系统上的工作，让我们运行Turtlesim，它让节点彼此积极通信。 通过打开一个新终端、寻找ROS 2并输入以下命令来启动系统： ros2 run turtlesim turtlesim_node 打开另一个终端and获得ROS 2以运行远程操作控制： ros2 run turtlesim turtle_teleop_key 现在在自己的终端中再次运行ros2doctor。 您将看到上次在设置中运行ros2doctor时出现的警告和错误（如果有的话）。 以下是与系统本身相关的几个新警告： UserWarning: Publisher without subscriber detected on /turtle1/color_sensor. UserWarning: Publisher without subscriber detected on /turtle1/pose. 似乎**/turlsim节点将数据发布到两个未订阅的主题，ros2doctor认为这可能会导致问题。 如果运行命令以响应/color_sensor和/pose主题，则这些警告将消失，因为发布者将拥有订阅者。 您可以在turtlesim仍在运行时打开两个新终端，在每个终端中获得ROS 2**，并在自己的终端中运行以下命令： ros2 topic echo /turtle1/color_sensor ros2 topic echo /turtle1/pose 然后在终端中再次运行ros2doctor。 没有订户警告的发布者将消失。（确保在运行echo的终端中输入Ctrl+C）。 现在，尝试退出turtlesim窗口或退出远程操作并再次运行ros2doctor。 由于系统中的一个节点不可用，您将看到更多警告，指示不同主题的发布者没有订阅者或订阅者没有发布者。 在一个有许多节点的复杂系统中，ros2doctor对于识别通信问题的可能原因是非常有用的。\n获取完整报告 虽然ros2doctor会让您知道有关您的网络、系统等的警告，但使用--report参数运行它将为您提供更多详细信息，帮助您分析问题。 如果您收到有关网络设置的警告，并想确切地找出导致该警告的配置部分，您可能需要使用--report。 当您需要开工单以获得ROS 2的帮助时，这也是非常有用的。 您可以将报告的相关部分复制并粘贴到工单中，这样帮助您的人员可以更好地了解您的环境并提供更好的援助。 要获取完整报告，请在终端中输入以下命令： ros2 doctor --report 这将返回分为五组的信息列表： 您可以将此处的信息与运行ros2 doctor得到的警告进行交叉检查。 例如，如果ros2doctor返回警告（前面提到），您的发行版“未得到完全支持或测试”，您可以查看报告的ROS 2信息部分： 在这里，您可以看到发行版的状态是预发行版，这解释了为什么它不受完全支持。\n总结 # ros2doctor将报告您ROS 2设置和运行系统中的问题。 通过使用--report参数，您可以更深入地了解这些警告背后的信息。 请记住，ros2doctor不是调试工具；它对代码中的错误或系统的实现方面的错误没有帮助。\n创建和使用插件（C++） # 背景 # 本教程来源于pluginlib以及编写和使用简单插件教程。 pluginlib是一个C++库，用于从ROS包中加载和卸载插件。 插件是从运行库（即共享对象、动态链接库）加载的动态可加载类。 有了pluginlib，用户不必显式地将其应用程序与包含类的库链接起来——相反，pluginib可以在任何时候打开包含导出类的库，而应用程序事先不知道库或包含类定义的头文件。 插件可用于扩展/修改应用程序行为，而无需应用程序源代码。\n任务 # 在本教程中，您将创建两个新包，一个定义基类，另一个提供插件。 基类将定义一个通用多边形类，然后我们的插件将定义特定形状。\n创建基类包 使用以下终端命令在ros2_ws/src文件夹中创建一个新的空包。 ros2 pkg create --build-type ament_cmake polygon_base --dependencies pluginlib --node-name area_node 打开您最喜欢的编辑器，编辑ros2_ws/src/polygon_base/include/polygen_base/regular_polygon.hpp，并在其中粘贴以下内容： 上面的代码应该很容易解释……我们正在创建一个名为RegularPolygon的抽象类。 需要注意的一点是initialize方法的存在。 对于pluginlib，类需要一个没有参数的构造函数，因此，如果需要任何参数，我们使用initialize方法来初始化对象。 我们需要让这个头对其他类可用，所以打开ros2_ws/src/polygon_base/CMakeLists.txt进行编辑。 在ament_target_dependencies命令之后添加以下行。 install(DIRECTORY include/ DESTINATION include) 并将此命令添加到ament_package命令之前 ament_export_include_directories(include) 稍后我们将返回这个包来编写测试节点。\n创建插件包 现在我们将编写抽象类的两个非虚拟实现。 使用以下终端命令在ros2_ws/src文件夹中创建第二个空包。\n插件的源代码 打开ros2_ws/src/polygon_plugins/src/poolygo_plugins.cpp进行编辑，并在其中粘贴以下内容： Square和Triangle类的实现应该相当简单：保存边长，并使用它来计算面积。 唯一特定于pluginlib的部分是最后三行，它调用了一些神奇的宏，将类注册为实际插件。 让我们来看看PLUGINLIB_EXPORT_CLASS宏的参数： 插件类的完全限定类型，在本例中为polygon_plugins:：Square。 基类的完全限定类型，在本例中为polygon_base:：RegularPolygon。 插件声明XML 上面的步骤使我们可以在加载插件所在的库后创建插件实例，但插件加载程序仍然需要一种方法来找到该库并知道在该库中引用什么。 为此，我们还将创建一个XML文件，该文件与包清单中的一个特殊导出行一起，为ROS工具链提供关于插件的所有必要信息。 创建ros2_ws/src/polygon_plugins/plugins.xml，代码如下： 需要注意的几点： library标签给出了一个包含我们想要导出的插件的库的相对路径。 在ROS 2中，这只是库的名称。 在ROS 1中，它包含前缀lib，有时也包含lib/lib（即lib/libpolyn_plugins），但这里更简单。 class标签声明了一个插件，我们想从库中导出它。 让我们来看看它的参数： type：插件的完全限定类型。对我们来说，这就是polygon_plugins:：Square。 base_class：插件的完全限定基类类型。对于我们来说，这就是polygon_base:：RegularPolygon。 description:插件及其功能的描述。 name：过去有一个name属性，但不再需要。 CMake插件声明 最后一步是通过CMakeLists.txt导出插件。 这是ROS 1的一个变化，其中导出是通过package.xml完成的。 将以下块添加到ros2_ws/src/polygon_plugins/CMakeLists.txt读取find_package(pluginlib REQUIRED)行后在ament_package命令之前，添加 此CMake命令的参数为 基类的包，即polygon_base 插件声明xml的相对路径，即plugins.xml 使用插件 现在是时候使用插件了。 这可以在任何包中完成，但这里我们将在基本包中完成。 编辑ros2_ws/src/polygon_base/src/area_node.cpp包含以下内容： ClassLoader是要理解的关键类，在class_loader.hpp标头中定义。 它是用基类模板化的，即polygon_base:：RegularPolygon\n第一个参数是基类包名的字符串，即polygon_base。 第二个参数是具有插件的完全限定基类类型的字符串，即polygon_base:：RegularPolygon。 有许多方法可以实例化类的实例。 在这个例子中，我们使用共享指针。 我们只需要使用插件类的完全限定类型（在本例中为polygon_plugins:：Square）调用createSharedInstance。 重要提示：定义此节点的polygon_base包不依赖于polygo_plugins类。 插件将动态加载，无需声明任何依赖项。 此外，我们正在使用硬编码插件名称实例化类，但您也可以使用参数等动态地这样做。\n构建并运行 导航回工作区的根目录ros2_ws，并构建新包： colcon build --packages-select polygon_base polygon_plugins 确保从ros2_ws获取设置文件： . install/setup.bash 现在运行节点： ros2 run polygon_base area_node 它应该打印 Triangle area: 43.30 Square area: 100.00 总结 # 祝贺您刚刚编写并使用了第一个插件。\n","externalUrl":null,"permalink":"/blog/docs/configuration/","section":"文档","summary":"\u003ch2 class=\"relative group\"\u003e使用colcon构建包 \n    \u003cdiv id=\"使用colcon构建包\" class=\"anchor\"\u003e\u003c/div\u003e\n    \n    \u003cspan\n        class=\"absolute top-0 w-6 transition-opacity opacity-0 ltr:-left-6 rtl:-right-6 not-prose group-hover:opacity-100 select-none\"\u003e\n        \u003ca class=\"group-hover:text-primary-300 dark:group-hover:text-neutral-700 !no-underline\" href=\"#%e4%bd%bf%e7%94%a8colcon%e6%9e%84%e5%bb%ba%e5%8c%85\" aria-label=\"锚点\"\u003e#\u003c/a\u003e\n    \u003c/span\u003e        \n    \n\u003c/h2\u003e\n\n\u003ch3 class=\"relative group\"\u003e背景 \n    \u003cdiv id=\"背景\" class=\"anchor\"\u003e\u003c/div\u003e\n    \n    \u003cspan\n        class=\"absolute top-0 w-6 transition-opacity opacity-0 ltr:-left-6 rtl:-right-6 not-prose group-hover:opacity-100 select-none\"\u003e\n        \u003ca class=\"group-hover:text-primary-300 dark:group-hover:text-neutral-700 !no-underline\" href=\"#%e8%83%8c%e6%99%af\" aria-label=\"锚点\"\u003e#\u003c/a\u003e\n    \u003c/span\u003e        \n    \n\u003c/h3\u003e\n\u003cp\u003e\u003cstrong\u003ecolcon\u003c/strong\u003e是ROS构建工具\u003cstrong\u003ecatkin_make\u003c/strong\u003e、\u003cstrong\u003ecatkin_make_isolated\u003c/strong\u003e、\u003cstrong\u003ecatkin_tools\u003c/strong\u003e和\u003cstrong\u003eament_tools\u003c/strong\u003e的迭代。\n有关colcon设计的更多信息，请参阅本文档。\n源代码可以在\u003cstrong\u003ecolcon GitHub\u003c/strong\u003e组织中找到。\u003c/p\u003e","title":"ROS2(Galactic)初学者教程(下)","type":"docs"},{"content":" 从零开始构建机器人可视的模型 # 在本教程中，我们将构建一个机器人可视的模型，该模型看起来很像R2D2。 在后面的教程中，你将学习如何清晰地表达模型，添加一些物理属性，并使用xacro生成更整洁的代码，但目前，我们将重点关注视觉几何结构的正确性。\n继续之前，请确保已安装joint_state_publisher包。 如果你安装了urdf_tutorial二进制文件，事实应该已经如此。 如果没有，请更新你的安装以包含该包（使用rosdep进行检查）。 本教程中提到的所有机器人模型（以及源文件）都可以在urdf_tutorial包中找到。 sudo apt install ros-galactic-urdf-tutorial\n一个形状 # 首先，我们将探究一个简单的形状。 这里有一个你能做的最简单的urdf。 来源\n\u0026lt;?xml version=\u0026#34;1.0\u0026#34;?\u0026gt; \u0026lt;robot name=\u0026#34;myfirst\u0026#34;\u0026gt; \u0026lt;link name=\u0026#34;base_link\u0026#34;\u0026gt; \u0026lt;visual\u0026gt; \u0026lt;geometry\u0026gt; \u0026lt;cylinder length=\u0026#34;0.6\u0026#34; radius=\u0026#34;0.2\u0026#34;/\u0026gt; \u0026lt;/geometry\u0026gt; \u0026lt;/visual\u0026gt; \u0026lt;/link\u0026gt; \u0026lt;/robot\u0026gt; 要将XML翻译成英语，这是一个名为myfirst的机器人， 它只包含一个链接（也称为部件），其视觉组件只是一个0.6米长、0.2米半径的圆柱体。 对于一个简单的“hello world”类型示例来说，这可能看起来像是很多封闭标签，但相信我，它会变得更复杂。 要检查模型，请启动display.launch.py文件： ros2 launch urdf_tutorial display.launch.py model:=urdf/01-myfirst.urdf 这可以做三件事：\n加载指定的模型并将其保存为参数 运行节点以发布sensor_msgs/msg/JointState和转换（稍后将详细介绍） 使用配置文件启动Rviz 请注意，上面的启动命令假定你是从urdf_tutorial包目录执行的（即：urdf目录是当前工作目录的直接子目录）。 如果事实并非如此，则01-myfirst.urdf的相对路径将无效，当启动程序尝试将urdf作为参数加载时，您将收到一个错误。 稍加修改的参数允许无论当前工作目录如何，都可以执行此操作： ros2 launch urdf_tutorial display.launch.py model:=ros2 pkg prefix \u0026ndash;share urdf_tutorial/urdf/01-myfirst.urdf 如果不是从urdf_tutorial包位置运行这些教程中给出的所有示例启动命令，则必须更改这些命令。 启动display.launch.py后，最后您应该看到RViz向您显示以下内容： 需要注意的事项：\n固定帧是栅格中心所在的变换帧。 这里，它是由我们的一个链接base_link定义的帧。 默认情况下，可视的元素（圆柱体）的原点位于其几何体的中心。 因此，圆柱体的一半位于栅格之下。 多个形状 # 现在让我们看看如何添加多个形状/链接。 如果我们只是向urdf中添加更多的链接元素，解析器将不知道将它们放在哪里。 所以，我们必须添加关节。 关节元件可以指柔性关节和非柔性关节。 我们将从非柔性或固定的关节开始。 来源\n\u0026lt;?xml version=\u0026#34;1.0\u0026#34;?\u0026gt; \u0026lt;robot name=\u0026#34;multipleshapes\u0026#34;\u0026gt; \u0026lt;link name=\u0026#34;base_link\u0026#34;\u0026gt; \u0026lt;visual\u0026gt; \u0026lt;geometry\u0026gt; \u0026lt;cylinder length=\u0026#34;0.6\u0026#34; radius=\u0026#34;0.2\u0026#34;/\u0026gt; \u0026lt;/geometry\u0026gt; \u0026lt;/visual\u0026gt; \u0026lt;/link\u0026gt; \u0026lt;link name=\u0026#34;right_leg\u0026#34;\u0026gt; \u0026lt;visual\u0026gt; \u0026lt;geometry\u0026gt; \u0026lt;box size=\u0026#34;0.6 0.1 0.2\u0026#34;/\u0026gt; \u0026lt;/geometry\u0026gt; \u0026lt;/visual\u0026gt; \u0026lt;/link\u0026gt; \u0026lt;joint name=\u0026#34;base_to_right_leg\u0026#34; type=\u0026#34;fixed\u0026#34;\u0026gt; \u0026lt;parent link=\u0026#34;base_link\u0026#34;/\u0026gt; \u0026lt;child link=\u0026#34;right_leg\u0026#34;/\u0026gt; \u0026lt;/joint\u0026gt; \u0026lt;/robot\u0026gt; 请注意我们如何定义0.6m x 0.1m x 0.2m长方体 关节是根据父级和子级定义的。 URDF最终是一个具有一个根链接的树结构。 这意味着腿的位置取决于base_link的位置。 ros2 launch urdf_tutorial display.launch.py model:=urdf/02-multipleshapes.urdf 这两个形状彼此重叠，因为它们共享相同的原点。 如果我们希望它们不重叠，我们必须定义更多的原点。\n原点 # R2D2的腿在侧面连接到躯干的上半部。 所以这就是我们指定关节的原点的地方。 而且，它不会附着在腿的中部，而是附着在上部，所以我们也必须偏移腿的原点。 我们还旋转腿，使其直立。 来源\n\u0026lt;?xml version=\u0026#34;1.0\u0026#34;?\u0026gt; \u0026lt;robot name=\u0026#34;origins\u0026#34;\u0026gt; \u0026lt;link name=\u0026#34;base_link\u0026#34;\u0026gt; \u0026lt;visual\u0026gt; \u0026lt;geometry\u0026gt; \u0026lt;cylinder length=\u0026#34;0.6\u0026#34; radius=\u0026#34;0.2\u0026#34;/\u0026gt; \u0026lt;/geometry\u0026gt; \u0026lt;/visual\u0026gt; \u0026lt;/link\u0026gt; \u0026lt;link name=\u0026#34;right_leg\u0026#34;\u0026gt; \u0026lt;visual\u0026gt; \u0026lt;geometry\u0026gt; \u0026lt;box size=\u0026#34;0.6 0.1 0.2\u0026#34;/\u0026gt; \u0026lt;/geometry\u0026gt; \u0026lt;origin rpy=\u0026#34;0 1.57075 0\u0026#34; xyz=\u0026#34;0 0 -0.3\u0026#34;/\u0026gt; \u0026lt;/visual\u0026gt; \u0026lt;/link\u0026gt; \u0026lt;joint name=\u0026#34;base_to_right_leg\u0026#34; type=\u0026#34;fixed\u0026#34;\u0026gt; \u0026lt;parent link=\u0026#34;base_link\u0026#34;/\u0026gt; \u0026lt;child link=\u0026#34;right_leg\u0026#34;/\u0026gt; \u0026lt;origin xyz=\u0026#34;0 -0.22 0.25\u0026#34;/\u0026gt; \u0026lt;/joint\u0026gt; \u0026lt;/robot\u0026gt; 让我们从检查关节的原点开始。 它是根据父级参照系定义的。 所以我们在y方向上是-0.22米（在我们的左边，但相对于轴是向右的），在z方向上是0.25米（向上）。 这意味着无论子链接的可视的原点标记如何，子链接的原点都将向上向右。 由于我们没有指定rpy（横滚-俯仰-偏航）属性，因此子帧将默认为与父帧具有相同的方向。 现在，看看腿的视觉原点，它有xyz和rpy偏移。 这定义了视觉元素的中心相对于其原点的位置。 因为我们希望腿附着在顶部，所以我们将z偏移设置为-0.3米，从而向下偏移原点。 因为我们希望腿的长部分与z轴平行，所以我们绕Y轴旋转视觉部分PI/2。 ros2 launch urdf_tutorial display.launch.py model:=urdf/03-origins.urdf 启动文件运行的包将基于URDF为模型中的每个链接创建TF帧。 Rviz使用这些信息来确定每个形状的显示位置。 如果给定URDF链路不存在TF帧，则它将以白色放置在原点。 ","externalUrl":null,"permalink":"/blog/docs/partials/","section":"文档","summary":"\u003ch2 class=\"relative group\"\u003e从零开始构建机器人可视的模型 \n    \u003cdiv id=\"从零开始构建机器人可视的模型\" class=\"anchor\"\u003e\u003c/div\u003e\n    \n    \u003cspan\n        class=\"absolute top-0 w-6 transition-opacity opacity-0 ltr:-left-6 rtl:-right-6 not-prose group-hover:opacity-100 select-none\"\u003e\n        \u003ca class=\"group-hover:text-primary-300 dark:group-hover:text-neutral-700 !no-underline\" href=\"#%e4%bb%8e%e9%9b%b6%e5%bc%80%e5%a7%8b%e6%9e%84%e5%bb%ba%e6%9c%ba%e5%99%a8%e4%ba%ba%e5%8f%af%e8%a7%86%e7%9a%84%e6%a8%a1%e5%9e%8b\" aria-label=\"锚点\"\u003e#\u003c/a\u003e\n    \u003c/span\u003e        \n    \n\u003c/h2\u003e\n\u003cp\u003e在本教程中，我们将构建一个机器人可视的模型，该模型看起来很像\u003cstrong\u003eR2D2\u003c/strong\u003e。\n在后面的教程中，你将学习如何清晰地表达模型，添加一些物理属性，并使用xacro生成更整洁的代码，但目前，我们将重点关注视觉几何结构的正确性。\u003c/p\u003e","title":"ROS2(Jazzy Jalisco) URDF教程","type":"docs"},{"content":"","externalUrl":"https://brendanwallace.github.io","permalink":"/blog/users/64ef36564d497eed256b9f4c56b1184e/","section":"用户列表","summary":"","title":"brendanwallace.github.io","type":"users"},{"content":" 使用rosdep管理依赖关系 # rosdep是什么 # rosdep是ROS管理依赖项的实用程序，可以与ROS包和外部库一起工作。 rosdep是一个命令行实用程序，用于识别和安装构建或安装包的依赖项。 在以下情况下可以调用或被调用：\n构建工作空间并需要适当的依赖关系来构建其中的包 安装软件包（例如sudo-apt-Install ros galactic demo nodes cpp）以检查其执行所需的依赖性 还有更多！ 它能够处理单个包或包目录（例如工作区）。\n关于一点package.xml文件 # 包的package.xml文件包含一组依赖项。 此文件中的依赖项通常称为“rosdep-keys”。 在这些标签\u0026lt;depend\u0026gt;、\u0026lt;test_depend\u0026gt;``\u0026lt;exec_depend\u0026gt;、\u0026lt;build_depend\u0026gt;和\u0026lt;build_export_depend\u0026gt;中表示。 它们指定在什么情况下需要每个依赖项。\n对于仅用于测试代码的依赖项（例如gtest），请使用test_depend。 对于仅用于构建代码的依赖项，请使用build_depend。 对于代码导出的头所需的依赖项，请使用build_export_depend。 对于仅在运行代码时使用的依赖项，请使用exec_depend。 出于混合目的，请使用depend，它涵盖了构建、导出和执行时的依赖关系。 这些依赖项在包中的package.xml文件手动填充，并且应该是它所需的任何非内置库和包的详尽列表。\n如何使用rosdep工具 # 现在我们对rosdep，package.xml和rosdistro有了一些了解，我们已经准备好使用该工具本身了！ 首先，如果这是第一次使用rosdep，则必须通过以下方式进行初始化： sudo rosdep init rosdep update 这将初始化rosdep，更新将更新本地缓存的rosdistro索引。 偶尔更新rosdep以获取最新索引是一个好主意。 最后，我们可以运行rosdep install来安装依赖项。 通常，这是在一个工作区上运行的，在一次调用中有许多包来安装所有依赖项。 如果在包含源代码的目录src的工作区的根目录中，那么对它的调用将如下所示。 rosdep install --from-paths src -y --ignore-src 分解如下：\n--from-paths src指定要检查package.xml文件解析keys的路径。 -y表示对包管理器的所有提示都默认为“是”，以便在没有提示的情况下安装 --ignore-src意味着忽略安装依赖项，即使存在rosdep键，如果包本身也在工作区中。 还有其他参数和选项可用。 使用rosdep -h查看它们。\n创建动作 # 背景 # 您以前在了解动作教程中理解了动作。 与其他通信类型及其各自的接口（topics/msg和services/srv）一样，您也可以在包中自定义定义动作。 本教程将向您展示如何定义和构建一个可以与下一教程中编写的动作服务器和动作客户端一起使用的动作。\n前置条件 # 您应该安装了ROS 2和colcon。 设置工作区并创建名为action_tutorials_interfaces的包： （请记住先获取ROS 2安装的源代码。） cd ros2_ws/src ros2 pkg create action_tutorials_interfaces\n任务 # 定义一个动作 动作的实例通常称为目标。 假设我们想定义一个新的动作“Fibonacci”来计算斐波那契序列。 目标请求是我们要计算的斐波那契序列的顺序，结果是最终序列，反馈是迄今为止计算的部分序列。 在我们的ROS 2包action_tutorials_interfaces中创建一个动作目录： cd action_tutorials_interfaces mkdir action 在action目录中，创建一个名为Fibonacci.action的文件，其中包含以下内容： int32 order --- int32[] sequence --- int32[] partial_sequence 动作在以下格式的**.action**文件中定义： 动作定义由三个消息定义组成，由---分隔。\n请求消息从动作客户端发送到启动新目标的动作服务器。 当目标完成时，结果消息从动作服务器发送到动作客户端。 反馈消息定期从动作服务器发送到动作客户端，其中包含有关目标的更新。 构建一个动作 在我们可以在代码中使用新的斐波那契动作类型之前，我们必须将定义传递给rosidl代码生成管道。 这可以通过向位于action_tutorials_interfaces中的CMakeList.txt在ament_package()行之前添加以下行来完成： find_package(rosidl_default_generators REQUIRED) rosidl_generate_interfaces(${PROJECT_NAME} \u0026quot;action/Fibonacci.action\u0026quot;) 我们还应该在package.xml中添加所需的依赖项： \u0026lt;buildtool_depend\u0026gt;rosidl_default_generators\u0026lt;/buildtool_depend\u0026gt; \u0026lt;depend\u0026gt;action_msgs\u0026lt;/depend\u0026gt; \u0026lt;member_of_group\u0026gt;rosidl_interface_packages\u0026lt;/member_of_group\u0026gt; 注意，我们需要依赖action_msgs，因为动作定义包括额外的元数据（例如目标ID）。 我们现在应该能够构建包含斐波那契动作定义的包： cd ~/ros2_ws colcon build --packages-select action_tutorials_interfaces 我们完了！ 按照惯例，操作类型将以其包名称和单词action作为前缀。 因此，当我们想引用我们的新动作时，它将具有全名action_tutorials_interfaces/action/Fibonacci。 我们可以使用命令行工具检查我们的操作是否成功构建： . install/setup.bash ros2 interface show action_tutorials_interfaces/action/Fibonacci 您应该会看到Fibonacci动作定义打印到屏幕上。\n总结 # 在本教程中，您学习了动作定义的结构。 您还学习了如何使用CMakeLists.txt和package.xml正确构建新的操作界面，以及如何验证成功构建。\n编写动作服务器和客户端（C++） # 背景 # 动作是ROS中异步通信的一种形式。 动作客户端向动作服务器发送目标请求。 动作服务器向动作客户端发送目标反馈和结果。\n任务 # 创建action_tutorials_cpp包 正如我们在创建包教程中看到的，我们需要创建一个新的包来保存和支持我们的**C++**代码。\n创建action_tutorials_cpp包 进入您在上一教程中创建的动作工作区，并为**C++**动作服务器创建一个新的包： cd ~/ros2_ws/src ros2 pkg create --dependencies action_tutorials_interfaces rclcpp rclcpp_action rclcpp_components -- action_tutorials_cpp 添加可见性控制 为了使该包能够在Windows上编译和工作，我们需要添加一些“可见性控制”。 有关详细信息，请参阅Windows提示和技巧文档中的Windows符号可见性。 打开action_tutorials_cpp/include/action_tutorias_cpp/visibility_control.h、 并输入以下代码： 编写动作服务器 让我们专注于编写一个动作服务器，它使用我们在创建动作教程中创建的动作来计算斐波那契序列。\n编写动作服务器代码 打开action_tutorials_cpp/src/fibonacci_action_server.cpp，并放入以下代码： 前几行包含了我们需要编译的所有标头。 接下来，我们创建一个类，它是rclcpp::Node的派生类 FibonacciActionServer类的构造函数将节点名初始化为fibonacce_action_server： 构造函数还实例化了一个新的动作服务器： 动作服务器需要6件事： 1.模板化的动作类型名称：Fibonacci。 2.要将操作添加到的ROS 2节点：this。 3.动作名称：“fibonacci”。 4.处理目标的回调函数：handle_goal 5.用于处理取消的回调函数：handle_cancel。 6.用于处理目标接受的回调函数：handle_accept。 文件中的下一个是各种回调的实现。 请注意，所有回调都需要快速返回，否则我们就有可能饿死执行者。 我们从处理新目标的回调开始： 此实现只接受所有目标。 接下来是处理取消的回调： 这个实现只告诉客户端它接受了取消。 最后一个回调接受一个新目标并开始处理它： 由于执行是一个长时间运行的操作，因此我们生成一个线程来完成实际工作，并从handle_accepted快速返回。 所有进一步的处理和更新都在新线程的execute方法中完成： 这个工作线程每秒处理一个斐波那契序列的序列号，发布每个步骤的反馈更新。完成处理后，它将goal_handle标记为成功，然后退出。 我们现在有了一个功能齐全的动作服务器。让我们构建并运行它。 编译动作服务器 在上一节中，我们将动作服务器代码放置到位。 为了让它编译和运行，我们需要做一些额外的事情。 首先，我们需要设置CMakeLists.txt，以便编译动作服务器。 打开action_tutorials_cpp/CMakeLists.txt，并在find_package调用之后添加以下内容： 现在我们可以编译这个包了。 转到ros2_ws的顶层，然后运行： colcon build --packages-select action_tutorials_cpp 这应该编译整个工作区，包括action_tutorials_cpp包中的fibonacci_action_server。 运行动作服务器 现在我们已经构建了动作服务器，我们可以运行它了。 获取我们刚刚构建的工作区（ros2_ws），并尝试运行操作服务器： ros2 run action_tutorials_cpp fibonacci_action_server 编写动作客户端\n编写动作客户端代码 打开action_tutorials_cpp/src/fibonacci_action_client.cpp，并放入以下代码： 前几行包含了我们需要编译的所有标头。 接下来，我们创建一个类，它是rclcpp::Node的派生类 FibonacciActionClient类的构造函数将节点名初始化为fibonacce_action_client 构造函数还实例化了一个新的动作客户端 动作客户端需要三件事： 1.模板化的动作类型名称：Fibonacci。 2.将操作客户端添加到的ROS 2节点：this。 3.动作名称：“fibonacci”。 我们还实例化了一个ROS计时器，它将启动对send_goal的唯一调用 当计时器到期时，它将调用send_goal 此函数执行以下操作： 1.取消计时器（因此只调用一次）。 2.等待动作服务器启动。 3.实例化一个新的Fibonacci::Goal。 4.设置响应、反馈和结果回调。 5.将目标发送到服务器。 当服务器接收并接受目标时，它将向客户端发送响应。 该响应由goal_response_callback处理 假设目标被服务器接受，它将开始处理。 对客户的任何反馈都将由feedback_callback处理： 当服务器完成处理后，它将向客户端返回结果。 结果由result_callback处理 我们现在有一个功能齐全的行动客户端。让我们构建并运行它。 编译动作客户端 在上一节中，我们将操作客户端代码放置到位。 为了让它编译和运行，我们需要做一些额外的事情。 首先，我们需要设置CMakeLists.txt，以便编译动作客户端。 打开action_tutorials_cpp/CMakeLists.txt，并在find_package调用之后添加以下内容： 现在我们可以编译这个包了。 转到ros2_ws的顶层，然后运行： colcon build --packages-select action_tutorials_cpp 这应该编译整个工作区，包括action_tutorials_cpp包中的fibonacci_action_client。 运行动作客户端 现在我们已经构建了动作客户端，我们可以运行它了。 首先确保动作服务器在单独的终端中运行。 现在获取我们刚刚构建的工作区（ros2_ws），并尝试运行操作客户端： ros2 run action_tutorials_cpp fibonacci_action_client 您应该看到目标被接受、反馈被打印以及最终结果的日志消息。 总结 # 在本教程中，您将一行一行地将C++动作服务器和动作客户端放在一起，并将它们配置为交换目标、反馈和结果。\n在单个进程中组合多个节点 # 背景 # 请参阅概念文章。\n运行演示 # 演示使用rclcpp_components、ros2component和composition包中的可执行文件，可以使用以下命令运行。\n发现可用组件 # 要查看哪些组件在工作区中注册并可用，请在shell中执行以下操作： ros2 component types 终端将返回所有可用组件的列表： 使用具有发布者和订阅者的ROS服务的运行时组合 # 在第一个shell中，启动组件容器： ros2 run rclcpp_components component_container 打开第二个shell并通过ros2命令行工具验证容器是否正在运行： ros2 component list 您应该看到组件的名称： /ComponentManager 在第二个shell中加载talker组件（请参阅talker源代码）： ros2 component load /ComponentManager composition composition::Talker 该命令将返回加载组件的唯一ID以及节点名称： Loaded component 1 into '/ComponentManager' container node as '/talker' 现在，第一个shell应该显示组件已加载的消息以及发布消息的重复消息。 在第二个shell中运行另一个命令以加载listener组件（请参阅listener源代码）： ros2 component load /ComponentManager composition composition::Listener 终端将返回： Loaded component 2 into '/ComponentManager' container node as '/listener' 现在可以使用ros2命令行实用程序检查容器的状态： ros2 component list 您将看到以下结果： /ComponentManager 1 /talker 2 /listener 现在，第一个shell应该为每个接收到的消息显示重复的输出。\n使用带有服务器和客户端的ROS服务的运行时组合 # 服务器和客户端的示例非常相似。 在第一个shell中： ros2 run rclcpp_components component_container 在第二个shell中（请参阅服务器和客户端源代码）： ros2 component load /ComponentManager composition composition::Server ros2 component load /ComponentManager composition composition::Client 在这种情况下，客户端向服务器发送请求，服务器处理请求并用响应进行答复，客户端打印收到的响应。\n使用ROS服务编译时组合 # 这个演示展示了可以重用相同的共享库来编译运行多个组件的单个可执行文件。 该可执行文件包含上述所有四个组件：说话者和侦听器以及服务器和客户端。 在shell调用中（请参阅源代码）： 这应该显示来自两对的重复消息，发送者和侦听者以及服务器和客户端。\n手动合成的组件不会反映在ros2 component list命令行工具输出中。\n使用dlopen的运行时组合 # 此演示通过创建通用容器进程并显式传递库以加载而不使用ROS接口，提供了运行时组合的替代方案。 该过程将打开每个库，并在库源代码中创建每个rclcpp::Node类的一个实例。 现在，shell应该为每个发送和接收的消息显示重复的输出。\ndlopen-composed组件将不会反映在ros2 component list命令行工具输出中。\n使用启动动作合成 # 虽然命令行工具对于调试和诊断组件配置很有用，但同时启动一组组件通常更方便。 为了自动化此操作，我们可以使用ros2 launch中的功能。 ros2 launch composition composition_demo.launch.py\n高级主题 # 现在我们已经了解了组件的基本操作，我们可以讨论一些更高级的主题。\n正在卸载组件 # 在第一个shell中，启动组件容器： ros2 run rclcpp_components component_container 通过ros2命令行工具验证容器是否正在运行： ros2 component list 您应该看到组件的名称： /ComponentManager 在第二个shell中，像前面一样加载talker和listener： ros2 component load /ComponentManager composition composition::Talker ros2 component load /ComponentManager composition composition::Listener 使用唯一ID从组件容器中卸载节点。 ros2 component unload /ComponentManager 1 2 终端应返回： Unloaded component 1 from '/ComponentManager' container Unloaded component 2 from '/ComponentManager' container 在第一个shell中，验证来自talker和listener的重复消息是否已停止。\n重新映射容器名称和命名空间 # 组件管理器名称和命名空间可以通过标准命令行参数重新映射： ros2 run rclcpp_components component_container --ros-args -r __node:=MyContainer -r __ns:=/ns 在第二个shell中，可以使用更新的容器名称加载组件： ros2 component load /ns/MyContainer composition composition::Listener\n容器的命名空间重新映射不会影响加载的组件。\n重新映射组件名称和名称空间 # 组件名称和命名空间可以通过load命令的参数进行调整。 在第一个shell中，启动组件容器： ros2 run rclcpp_components component_container 有关如何重新映射名称和命名空间的一些示例。 重新映射节点名称： ros2 component load /ComponentManager composition composition::Talker --node-name talker2 重新映射命名空间： ros2 component load /ComponentManager composition composition::Talker --node-namespace /ns 重新映射两者： ros2 component load /ComponentManager composition composition::Talker --node-name talker3 --node-namespace /ns2 现在使用ros2命令行实用程序： ros2 component list 在控制台中，您应该看到相应的条目： /ComponentManager 1 /talker2 2 /ns/talker 3 /ns2/talker3\n容器的命名空间重新映射不会影响加载的组件。\n将参数值传递到组件中 # ros2组件加载命令行支持在节点构造时将任意参数传递给节点。 此功能可按如下方式使用： ros2 component load /ComponentManager image_tools image_tools::Cam2Image -p burger_mode:=true\n将其他参数传递到组件中 # ros2组件加载命令行支持将特定选项传递给组件管理器，以便在构建节点时使用。 到目前为止，唯一支持的命令行选项是使用进程内通信实例化节点。 此功能可按如下方式使用： ros2 component load /ComponentManager composition composition::Talker -e use_intra_process_comms:=true\n作为共享库的可组合节点 # 如果要将可组合节点从包中导出为共享库，并在另一个执行链接时间组合的包中使用该节点，请将代码添加到CMake文件中，该文件将导入下游包中的实际目标。 然后安装生成的文件并导出生成的文件。 这里可以看到一个实际的例子：ROS Discourse - Ament best practice for sharing libraries\n监控参数更改（C++） # 背景 # 通常，一个节点需要对其自身参数或另一个节点参数的更改做出响应。 ParameterEventHandler类使监听参数更改变得容易，以便您的代码能够响应它们。 本教程将向您展示如何使用ParameterEventHandler类的**C++**版本来监视节点自身参数的更改以及其他节点参数的更改。\n任务 # 在本教程中，您将创建一个新的包来包含一些示例代码，编写一些**C++**代码来使用ParameterEventHandler类，并测试生成的代码。\n创建包 首先，打开一个新的终端并获取ros2安装的源代码，以便ros2命令可以工作。 按照以下说明创建名为ros2_ws的新工作区。 请记住，包应该在src目录中创建，而不是在工作区的根目录中创建。因此，导航到ros2_ws/src，然后在那里创建一个新包： ros2 pkg create --build-type ament_cmake cpp_parameter_event_handler --dependencies rclcpp 您的终端将返回一条消息，验证您的包cpp_parameter_event_handler及其所有必需的文件和文件夹的创建。 --dependencies参数将自动向package.xml和CMakeLists.txt中添加必要的依赖行。\n更新package.xml 因为您在创建包时使用了--dependencies选项，所以不必手动向package.xml和CMakeLists.txt中添加依赖项。 不过，一如既往，请确保在package.xml中添加描述、维护者电子邮件和名称以及许可证信息。 \u0026lt;description\u0026gt;C++ parameter events client tutorial\u0026lt;/description\u0026gt; \u0026lt;maintainer email=\u0026quot;you@email.com\u0026quot;\u0026gt;Your Name\u0026lt;/maintainer\u0026gt; \u0026lt;license\u0026gt;Apache License 2.0\u0026lt;/license\u0026gt; 编写C++节点 在ros2_ws/src/cpp_parameter_event_handler/src目录中，创建一个名为parameter_vent_handler.cpp的新文件并粘贴以下代码： 检查代码 第一条语句包含#include＜memory＞，以便代码可以使用std::make_shared模板。 下一个#include“rclcpp/rclcpp.hpp允许代码引用rclcpp接口提供的各种功能，包括ParameterEventHandler类。 在类声明之后，代码定义了一个类SampleNodeWithParameters。 类的构造函数声明一个整数参数an_int_param，默认值为0。 接下来，代码创建一个ParameterEventHandler，用于监视参数的更改。 最后，代码创建了一个lambda函数，并将其设置为每当an_int_param更新时调用的回调。 保存add_parameter_callback返回的句柄非常重要；否则，回调将无法正确注册。 SampleNodeWithParameters后面是一个典型的主函数，它初始化ROS，旋转示例节点以便它可以发送和接收消息，然后在用户在控制台输入^C后关闭。\n添加可执行文件 要构建此代码，请首先打开CMakeLists.txt文件，并在依赖项find_package（rclcpp REQUIRED）下添加以下代码行 add_executable(parameter_event_handler src/parameter_event_handler.cpp) ament_target_dependencies(parameter_event_handler rclcpp) install(TARGETS parameter_event_handler DESTINATION lib/${PROJECT_NAME}) 构建并运行 在构建之前，最好在工作区的根目录（ros2_ws）中运行rosdep以检查是否缺少依赖项： rosdep install -i --from-path src --rosdistro $ROS_DISTRO -y 导航回工作区的根目录ros2_ws，并构建新的包： colcon build --packages-select cpp_parameter_event_handler 打开一个新终端，导航到ros2_ws，并获取设置文件： . install/setup.bash 现在运行节点： ros2 run cpp_parameter_event_handler parameter_event_handler 该节点现在处于活动状态，并且只有一个参数，每当更新该参数时都会打印一条消息。 要测试这一点，请打开另一个终端并像以前一样获取ROS设置文件（.install/setup.bash），然后执行以下命令： ros2 param set node_with_parameters an_int_param 43 运行该节点的终端将显示类似以下内容的消息： [INFO] [1667026487.796992022] [node_with_parameters]: cb: Received an update to parameter \u0026quot;an_int_param\u0026quot; of type integer: \u0026quot;43\u0026quot; 我们之前在节点中设置的回调已被调用，并显示了新的更新值。 现在可以在终端中使用^C终止正在运行的parameter_event_handler示例。\n监视对另一节点参数的更改 您还可以使用ParameterEventHandler监视对其他节点参数的参数更改。 让我们更新SampleNodeWithParameters类，以监视另一个节点中参数的更改。 我们将使用parameter_blackboard演示应用程序来托管一个双参数，我们将监视它的更新。 首先更新构造函数，在现有代码之后添加以下代码： 然后为附加回调句柄添加另一个成员变量cb_handle2： 在终端中，导航回工作区的根目录ros2_ws，并像以前一样构建更新的包： colcon build --packages-select cpp_parameter_event_handler 然后获取设置文件： . install/setup.bash 现在，要测试远程参数的监控，首先运行新建的parameter_event_handler代码： ros2 run cpp_parameter_event_handler parameter_event_handler 接下来，从另一个终端（ROS已初始化）运行parameter_blackboard演示应用程序，如下所示： ros2 run demo_nodes_cpp parameter_blackboard 最后，从第三个终端（ROS已初始化），让我们在parameter_blackboard节点上设置一个参数： ros2 param set parameter_blackboard a_double_param 3.45 执行此命令后，您应该会在parameter_event_handler窗口中看到输出，指示在参数更新时调用了回调函数： [INFO] [1606952588.237531933] [node_with_parameters]: cb2: Received an update to parameter \u0026quot;a_double_param\u0026quot; of type: double: \u0026quot;3.45\u0026quot; 总结 # 您创建了一个带有参数的节点，并使用ParameterEventHandler类设置回调以监视对该参数的更改。 您还使用相同的类来监视对远程节点的更改。 ParameterEventHandler是监视参数更改的方便方法，这样您就可以响应更新的值。\n将启动文件集成到ROS 2包中 # 背景 # 在上一个教程中，我们看到了如何编写独立的启动文件。 本教程将展示如何将启动文件添加到现有包中，以及通常使用的约定。\n任务 # 创建包 创建包所在的工作区： mkdir -p launch_ws/src cd launch_ws/src ros2 pkg create py_launch_example --build-type ament_python\n创建用于保存启动文件的结构 按照惯例，包的所有启动文件都存储在包内部的启动目录中。 确保在上面创建的包的顶层创建一个启动目录。 对于Python包，包含包的目录应如下所示： 为了让colcon找到启动文件，我们需要使用setup的data_files参数将启动文件通知Python的安装工具。 在我们的setup.py文件中： 编写启动文件 在启动目录中，创建一个名为my_script_launch.py的新启动文件 建议使用**_launch.py作为Python**启动文件的文件后缀，但不是必需的。 启动文件应定义generate_launch_description（）函数，该函数返回启动。 由ros2 launch使用的launch.LaunchDescription()。 构建和运行启动文件 转到工作区的顶层并构建它： colcon build 在构建成功并获得工作空间源之后，您应该能够按如下方式运行启动文件： ros2 launch py_launch_example my_script_launch.py\n","externalUrl":null,"permalink":"/blog/docs/homepage-layout/","section":"文档","summary":"\u003ch2 class=\"relative group\"\u003e使用rosdep管理依赖关系 \n    \u003cdiv id=\"使用rosdep管理依赖关系\" class=\"anchor\"\u003e\u003c/div\u003e\n    \n    \u003cspan\n        class=\"absolute top-0 w-6 transition-opacity opacity-0 ltr:-left-6 rtl:-right-6 not-prose group-hover:opacity-100 select-none\"\u003e\n        \u003ca class=\"group-hover:text-primary-300 dark:group-hover:text-neutral-700 !no-underline\" href=\"#%e4%bd%bf%e7%94%a8rosdep%e7%ae%a1%e7%90%86%e4%be%9d%e8%b5%96%e5%85%b3%e7%b3%bb\" aria-label=\"锚点\"\u003e#\u003c/a\u003e\n    \u003c/span\u003e        \n    \n\u003c/h2\u003e\n\n\u003ch3 class=\"relative group\"\u003erosdep是什么 \n    \u003cdiv id=\"rosdep是什么\" class=\"anchor\"\u003e\u003c/div\u003e\n    \n    \u003cspan\n        class=\"absolute top-0 w-6 transition-opacity opacity-0 ltr:-left-6 rtl:-right-6 not-prose group-hover:opacity-100 select-none\"\u003e\n        \u003ca class=\"group-hover:text-primary-300 dark:group-hover:text-neutral-700 !no-underline\" href=\"#rosdep%e6%98%af%e4%bb%80%e4%b9%88\" aria-label=\"锚点\"\u003e#\u003c/a\u003e\n    \u003c/span\u003e        \n    \n\u003c/h3\u003e\n\u003cp\u003e\u003cstrong\u003erosdep\u003c/strong\u003e是\u003cstrong\u003eROS\u003c/strong\u003e管理依赖项的实用程序，可以与\u003cstrong\u003eROS\u003c/strong\u003e包和外部库一起工作。\n\u003cstrong\u003erosdep\u003c/strong\u003e是一个命令行实用程序，用于识别和安装构建或安装包的依赖项。\n在以下情况下可以调用或被调用：\u003c/p\u003e","title":"ROS2(Galactic)中等程度者教程","type":"docs"},{"content":"发射\n创建启动文件 # 背景 # ROS 2中的启动系统负责帮助用户描述其系统的配置，然后按所述执行。系统的配置包括要运行什么程序、在哪里运行它们、传递它们的参数，以及ROS特定的约定，这些约定通过为每个组件提供不同的配置，使得在整个系统中重用组件变得容易。它还负责监测启动的进程的状态，并报告和/或对这些进程的状态变化作出反应。 用Python、XML或YAML编写的启动文件可以启动和停止不同的节点，也可以触发和处理各种事件。有关不同格式的描述，请参见使用Python、XML和YAML for ROS 2启动文件。提供此框架的包是launch_ros，它使用下面的非ros特定的启动框架。 设计文件详细说明了ROS 2发射系统的设计目标（目前并非所有功能都可用）。\n任务 # 设置 创建新目录以存储启动文件：\n编写启动文件 让我们使用turtlesim包及其可执行文件组合一个ROS2启动文件。 如上所述，这可以是Python、XML或YAML。 将完整的代码复制并粘贴到launch/turlsim_mimic_launch.py文件中：\n检查启动文件 上面启动文件的所有都在启动一个由三个节点组成的系统，所有这些节点都来自于turtlesim包。 该系统的目标是启动两个海龟窗口，让一只海龟模仿另一只的动作。 当启动两个turtlesim节点时，它们之间唯一的区别是命名空间。 唯一的命名空间允许系统启动两个节点，而不会出现节点名或主题名冲突。 这个系统中的两个乌龟都接收同一主题的命令，并在同一主题上发布它们的姿势。 通过唯一的命名空间，可以区分针对不同乌龟的消息。 最后一个节点也来自于turtlesim包，但有一个不同的可执行文件：mimic。 此节点以重新映射的形式添加了配置详细信息。 mimic的**/input/pose主题被重新映射到/turtlesim1/turtle1/pose**，它的**/output/cmd_vel主题被映射到/turtlesim2/turtle1/cmd_vel**。 这意味着mimic将订阅/turtlesim1/sim的姿势主题，并将其重新发布给/turtlesim2/sim的速度命令主题以供订阅。 换句话说，turtlesim2将模仿turtlesim1的动作。 这些导入语句引入了一些Python启动模块。 接下来，启动说明本身开始： 启动说明中的前两个操作将启动两个turtlesim窗口： 最后一个动作将启动带有重映射的模拟节点： ros2 launch 要运行上面创建的启动文件，请进入前面创建的目录并运行以下命令： cd launch ros2 launch turtlesim_mimic_launch.py\n可以直接启动启动文件（如上所述），也可以由包提供。 当它由包提供时，语法为：ros2 launch ＜package_name＞ ＜launch_file_name＞ 对于带有启动文件的包，最好在包的package.xml中添加对ros2launch包的exec_depend依赖：\u0026lt;exec_depend\u0026gt;ros2launch\u0026lt;/exec_depend\u0026gt; 这有助于确保在构建包后ros2 launch命令可用。 它还确保识别所有启动文件格式。 将打开两个turtlesim窗口，您将看到以下**[INFO]消息，告诉您启动文件已启动的节点： 要查看运行中的系统，请打开一个新终端并在/turtlesim1/turtle1/cmd_vel**主题上运行ros2 topic pub命令，以使第一只乌龟移动： ros2 topic pub -r 1 /turtlesim1/turtle1/cmd_vel geometry_msgs/msg/Twist \u0026quot;{linear: {x: 2.0, y: 0.0, z: 0.0}, angular: {x: 0.0, y: 0.0, z: -1.8}}\u0026quot; 你会看到两只乌龟沿着同一条路走。 用rqt_graph自省系统 当系统仍在运行时，打开一个新终端并运行rqt_graph以更好地了解启动文件中节点之间的关系。 运行命令： rqt_graph 一个隐藏节点（您运行的ros2 topic pub命令）正在将数据发布到左侧的**/turtlesim1/turtle1/cmd_vel主题，/turtlesim1/sim节点订阅了该主题。 图的其余部分显示了前面所述的内容：mimic订阅了/turtlesim1/sim的姿势主题，并发布到/turtlesim2/sim**的速度命令主题。 总结 # 启动文件简化了运行具有许多节点和特定配置细节的复杂系统。 您可以使用Python、XML或YAML创建启动文件，并使用ros2 launch命令运行它们。\n将启动文件集成到ROS2包中 # 背景 # 在上一个教程中，我们看到了如何编写独立的启动文件。 本教程将展示如何将启动文件添加到现有包中，以及通常使用的约定。\n任务 # 创建包 创建包所在的工作区： mkdir -p launch_ws/src cd launch_ws/src ros2 pkg create py_launch_example --build-type ament_python\n创建用于保存启动文件的结构 按照惯例，包的所有launch文件都存储在包内部的launch目录中。 确保在上面创建的包的顶层创建一个启动目录。 对于Python包，包含包的目录应如下所示： 为了让colcon找到启动文件，我们需要使用setup的data_files参数将启动文件通知Python的安装工具。 在setup.py文件中： 编写启动文件 在启动目录中，创建一个名为my_script_launch.py的新启动文件。 建议使用**_launch.py作为Python**启动文件的文件后缀，但不是必需的。 启动文件应定义generate_launch_description()函数，该函数返回启动。 由ros2 launch动词使用的LaunchDescription()。 构建和运行启动文件 转到工作区的顶层并构建它： colcon build 在colcon构建成功并获得工作空间源之后，您应该能够按如下方式运行启动文件： ros2 launch py_launch_example my_script_launch.py\n文档 # 启动文档提供了有关launch_ros中也使用的概念的更多详细信息。 启动能力的其他文件/示例即将发布。 在这期间,查看源代码。\n使用替换 # 背景 # 启动文件用于启动节点、服务和执行流程。 这组操作可能有参数，这些参数会影响它们的行为。 可以在参数中使用替换，以在描述可重用启动文件时提供更大的灵活性。 替换是仅在执行启动描述期间计算的变量，可用于获取特定信息，如启动配置、环境变量或计算任意Python表达式。 本教程显示了ROS2启动文件中替换的使用示例。\n使用替换 # 创建并设置包 创建一个名为launch_tutorial, build_type为ament_python的新包： ros2 pkg create launch_tutorial --build-type ament_python 在该包中，创建一个名为launch的目录： mkdir launch_tutorial/launch 最后，确保添加对setup.py的更改，以便安装启动文件： 父启动文件 让我们创建一个启动文件，该文件将调用并向另一启动文件传递参数。 为此，请创建一个example_main.launch.py文件。 替换示例启动文件 现在创建一个example_substitutions.launch.py文件。 构建包 转到工作区的根目录，并构建包： colcon build\n启动示例 # 现在可以启动example_main.launch.py文件。 ros2 launch launch_tutorial example_main.launch.py 这将执行以下操作：\n启动一个蓝色背景的turtlesim节点 生第二只海龟 将颜色更改为紫色 如果提供的background_r参数为200且use_provided_red参数为True，则在两秒钟后将颜色更改为粉红色 修改启动参数 # 如果要更改提供的启动参数，可以在example_main.launch中的launch_arguments字典中更新它们。py或启动example_substitions.launch。py和首选参数。要查看可能提供给启动文件的参数，请运行以下命令： ros2 launch launch_tutorial example_substitutions.launch.py --show-args\n文档 # 发布文档提供了有关可用替代品的详细信息。\n总结 # 在本教程中，您了解了如何在启动文件中使用替换。 您了解了它们创建可重用启动文件的可能性和能力。 现在，您可以了解有关在启动文件中使用事件处理程序的更多信息，这些文件用于定义一组复杂的规则，这些规则可用于动态修改启动文件。\n使用事件处理程序 # 背景 # ROS2中的启动是一个执行和管理用户定义的进程的系统。 它负责监测其启动的进程的状态，并报告这些进程的状态变化并作出反应。 这些更改称为事件，可以通过向启动系统注册事件处理程序来处理。 可以为特定事件注册事件处理程序，并可用于监视进程的状态。 此外，它们还可以用于定义一组复杂的规则，这些规则可以用于动态修改启动文件。 本教程显示了ROS2启动文件中事件处理程序的使用示例。\n使用事件处理程序 # 事件处理程序示例启动文件 创建一个名为example_event_handlers.launch.py的新文件。 构建包 # 转到工作区的根目录，并构建包： colcon build\n启动示例 # 现在可以启动example_event_handlers.launch.py文件。 ros2 launch launch_tutorial example_event_handlers.launch.py turtlesim_ns:='turtlesim3' use_provided_red:='True' new_background_r:=200 这将执行以下操作：\n启动一个蓝色背景的turtlesim节点 生第二只海龟 将颜色更改为紫色 如果提供的background_r参数为200且use_provided_red参数为True，则在两秒钟后将颜色更改为粉红色 关闭turtlesim窗口时关闭启动文件 此外，在以下情况下，它会将消息记录到控制台：\nturtlesim节点启动 执行生成操作 执行change_background_r操作 执行change_background_r_conditioned操作 龟节点退出 启动过程被要求关闭。 总结 # 在本教程中，您了解了如何在启动文件中使用事件处理程序。 您了解了它们的语法和用法示例，以定义一组复杂的规则来动态修改启动文件。\n管理大型项目 # 背景 # 本教程介绍了为大型项目编写启动文件的一些技巧。 重点是如何构造启动文件，以便在不同的情况下尽可能地重用它们。 此外，它还介绍了不同ROS2启动工具的使用示例，如参数、YAML文件、重映射、名称空间、默认参数和RViz配置。\n介绍 # 机器人上的大型应用通常涉及多个互连节点，每个节点可以有许多参数。 在海龟模拟器中模拟多只海龟可以作为一个很好的例子。 乌龟模拟由多个乌龟节点、世界配置、TF广播和收听节点组成。 在所有节点之间，存在大量影响这些节点行为和外观的ROS参数。 ROS 2启动文件允许我们启动所有节点并在一个位置设置相应的参数。 教程结束时，您将构建launch_turtlesim.launch。py启动文件。 这个启动文件将启动不同的节点，负责模拟两个turesim模拟，启动TF广播和侦听器，加载参数，并启动RViz配置。 在本教程中，我们将介绍此启动文件以及使用的所有相关功能。\n","externalUrl":null,"permalink":"/blog/docs/thumbnails/","section":"文档","summary":"\u003cp\u003e发射\u003c/p\u003e\n\n\u003ch2 class=\"relative group\"\u003e创建启动文件 \n    \u003cdiv id=\"创建启动文件\" class=\"anchor\"\u003e\u003c/div\u003e\n    \n    \u003cspan\n        class=\"absolute top-0 w-6 transition-opacity opacity-0 ltr:-left-6 rtl:-right-6 not-prose group-hover:opacity-100 select-none\"\u003e\n        \u003ca class=\"group-hover:text-primary-300 dark:group-hover:text-neutral-700 !no-underline\" href=\"#%e5%88%9b%e5%bb%ba%e5%90%af%e5%8a%a8%e6%96%87%e4%bb%b6\" aria-label=\"锚点\"\u003e#\u003c/a\u003e\n    \u003c/span\u003e        \n    \n\u003c/h2\u003e\n\n\u003ch3 class=\"relative group\"\u003e背景 \n    \u003cdiv id=\"背景\" class=\"anchor\"\u003e\u003c/div\u003e\n    \n    \u003cspan\n        class=\"absolute top-0 w-6 transition-opacity opacity-0 ltr:-left-6 rtl:-right-6 not-prose group-hover:opacity-100 select-none\"\u003e\n        \u003ca class=\"group-hover:text-primary-300 dark:group-hover:text-neutral-700 !no-underline\" href=\"#%e8%83%8c%e6%99%af\" aria-label=\"锚点\"\u003e#\u003c/a\u003e\n    \u003c/span\u003e        \n    \n\u003c/h3\u003e\n\u003cp\u003eROS 2中的启动系统负责帮助用户描述其系统的配置，然后按所述执行。系统的配置包括要运行什么程序、在哪里运行它们、传递它们的参数，以及ROS特定的约定，这些约定通过为每个组件提供不同的配置，使得在整个系统中重用组件变得容易。它还负责监测启动的进程的状态，并报告和/或对这些进程的状态变化作出反应。\n用Python、XML或YAML编写的启动文件可以启动和停止不同的节点，也可以触发和处理各种事件。有关不同格式的描述，请参见使用Python、XML和YAML for ROS 2启动文件。提供此框架的包是launch_ros，它使用下面的非ros特定的启动框架。\n设计文件详细说明了ROS 2发射系统的设计目标（目前并非所有功能都可用）。\u003c/p\u003e","title":"ROS2（Jazzy Jalisco）Launch系统","type":"docs"},{"content":"有关专家培训，请参阅我们更广泛的示例。\n入门 # 本教程将安装MoveIt 2并创建一个工作区沙盒，以运行教程和示例机器人。\n安装ROS2和Colcon # 安装ROS2 Galactic。 在学习ROS2安装教程时，很容易错过步骤。 如果在接下来的几步中遇到错误，一个好的开始是返回并确保正确安装了ROS2。 用户通常会忘记的一点是从ROS2安装获得本身。 source /opt/ros/galactic/setup.bash\nColcon创建工作区并下载教程 # 对于教程，您需要有一个colcon工作区设置。 mkdir -p ~/ws_moveit2/src\n下载MoveIt2教程源代码 # 移动到您的colcon工作区，并获取MoveIt2教程源代码： cd ~/ws_moveit2/src git clone -b galactic https://github.com/ros-planning/moveit2_tutorials.git --depth 1 vcs import \u0026lt; moveit2_tutorials/moveit2_tutorials.repos\n","externalUrl":null,"permalink":"/blog/docs/content-examples/","section":"文档","summary":"\u003cp\u003e有关专家培训，请参阅我们更广泛的\u003ca\n  href=\"https://moveit.picknik.ai/humble/doc/examples/examples.html\"\n    target=\"_blank\"\n  \u003e示例\u003c/a\u003e。\u003c/p\u003e\n\n\u003ch2 class=\"relative group\"\u003e入门 \n    \u003cdiv id=\"入门\" class=\"anchor\"\u003e\u003c/div\u003e\n    \n    \u003cspan\n        class=\"absolute top-0 w-6 transition-opacity opacity-0 ltr:-left-6 rtl:-right-6 not-prose group-hover:opacity-100 select-none\"\u003e\n        \u003ca class=\"group-hover:text-primary-300 dark:group-hover:text-neutral-700 !no-underline\" href=\"#%e5%85%a5%e9%97%a8\" aria-label=\"锚点\"\u003e#\u003c/a\u003e\n    \u003c/span\u003e        \n    \n\u003c/h2\u003e\n\u003cp\u003e本教程将安装MoveIt 2并创建一个工作区沙盒，以运行教程和示例机器人。\u003c/p\u003e","title":"MoveIt2 初学者教程","type":"docs"},{"content":"","externalUrl":"https://pmnxis.github.io","permalink":"/blog/users/5bf94b5c1e0c4a40d81816df85e1444f/","section":"用户列表","summary":"","title":"pmnxis.github.io","type":"users"},{"content":"ros2_control是使用（ros2）对机器人进行（实时）控制的框架。 它的包是ros（机器人操作系统）中使用的ros_control包的重写。 ros2_control的目标是简化新硬件的集成并克服一些缺点。\n如果您不熟悉控制理论，请对其有所了解（例如，在维基百科上），以熟悉本手册中使用的术语。\n安装 # sudo apt install ros-galactic-ros2-control sudo apt install ros-galactic-ros2-controllers 体系结构 # Controller Manager # 控制器管理器（CM）连接ros2_control框架的控制器和硬件抽象端。 它还作为用户通过ROS服务的入口点。 CM实现了一个没有执行器的节点，因此可以将其集成到自定义设置中。 不过，对于标准用户，建议使用controller_manager包中ros2_control_node文件中实现的默认节点设置。 本手册假定您使用此默认节点设置。 一方面，CM管理（例如，加载、激活、停用、卸载）控制器和所需的接口。 另一方面，它可以访问硬件组件（通过资源管理器），即它们的接口。 控制器管理器匹配所需和提供的接口，在激活时为控制器提供硬件访问权限，或在存在访问冲突时报告错误。 控制循环的执行由CM的update（）方法管理。 该方法从硬件组件读取数据，更新所有活动控制器的输出，并将结果写入组件。\nResource Manager # 资源管理器（RM）为ros2_control框架抽象物理硬件及其驱动程序（称为硬件组件）。 RM使用pluginlib库加载组件，管理其生命周期以及组件的状态和命令界面。 RM提供的这种抽象使已实现的硬件组件（例如机器人和抓取器）可以重用，而无需对状态和命令接口进行任何实现和灵活的硬件应用，例如用于电机控制和编码器读取的独立硬件/通信库。 在控制循环执行中，RM的read（）和write（）方法处理与硬件组件的通信。\nControllers # ros2_control框架中的控制器具有控制理论中定义的相同功能。 他们将参考值与测量的输出进行比较，并基于此错误计算系统的输入（有关更多详细信息，请访问Wikipedia）。 这些控件是从ControllerInterface（ros2_control中的controller_interface包）派生的对象，并使用pluginlib库导出为插件。 例如，ros2_controllers存储库中的控制器上检查ForwardCommandController实现。 控制器的生命周期基于实现状态机的LifecycleNode类，如节点生命周期设计文档中所述。 执行控制循环时，将调用 update() 方法。该方法可以访问最新的硬件状态，并使控制器能够写入硬件的命令接口。\nUser Interfaces # 用户使用Controller Manager的服务与ros2_control框架交互。 有关服务及其定义的列表，请检查controller_manager_msgs包中的srv文件夹。 虽然可以直接从命令行或通过节点使用服务调用，但存在一个用户友好的命令行界面（CLI），它与ros2 CLI集成。 这支持自动完成，并提供一系列常用命令。 基本命令是ros2控件。 有关CLI功能的描述，请参阅自述文件。 ros2controlcli包的md文件。\nHardware Components # 硬件组件实现与物理硬件的通信，并在ros2_control框架中表示其抽象。 必须使用pluginlib库将组件导出为插件。 资源管理器动态加载这些插件并管理其生命周期。\n组件有三种基本类型：\n系统 复杂（多自由度）机器人硬件，如工业机器人。 执行器组件之间的主要区别是可以使用类似于仿人机器人手所需的复杂传输。 此组件具有读取和写入功能。 当仅为硬件的一个逻辑通信信道（例如，KUKA-RSI）时，使用它。 传感器 机器人硬件用于感知其环境。 传感器部件与关节（如编码器）或连杆（如力-扭矩传感器）相关。 此组件类型只有读取功能。 执行器 简单的（1自由度）机器人硬件，如电机、阀门等。 执行器实现仅与一个关节相关。 此组件类型具有读取和写入功能。 如果不可能，则不强制读取（例如，带Arduino板的直流电机控制）。 如果多自由度机器人的硬件能够实现模块化设计，例如与每个电机独立的can通信，则执行器类型也可以用于多自由度机械手。 硬件组件的详细说明在通过控制器的硬件访问设计文档中给出。\nHardware Description in URDF # ros2_control框架使用robot的URDF文件中的\u0026lt;ros2_ccontrol\u0026gt;-标记来描述其组件，即硬件设置。 所选结构允许将多个xacro宏一起跟踪为一个宏，而无需任何更改。 下面的示例显示了一个带有2-DOF（RRBot）的位置控制机器人、一个外部1-DOF力扭矩传感器和一个外部控制的1-DOF并联抓取器作为其末端执行器。 有关更多示例和详细说明，请查看ros2_control_demos存储库和ROS 2控制组件URDF示例设计文档。\n\u0026lt;ros2_control name=\u0026#34;RRBotSystemPositionOnly\u0026#34; type=\u0026#34;system\u0026#34;\u0026gt; \u0026lt;hardware\u0026gt; \u0026lt;plugin\u0026gt;ros2_control_demo_hardware/RRBotSystemPositionOnlyHardware\u0026lt;/plugin\u0026gt; \u0026lt;param name=\u0026#34;example_param_write_for_sec\u0026#34;\u0026gt;2\u0026lt;/param\u0026gt; \u0026lt;param name=\u0026#34;example_param_read_for_sec\u0026#34;\u0026gt;2\u0026lt;/param\u0026gt; \u0026lt;/hardware\u0026gt; \u0026lt;joint name=\u0026#34;joint1\u0026#34;\u0026gt; \u0026lt;command_interface name=\u0026#34;position\u0026#34;\u0026gt; \u0026lt;param name=\u0026#34;min\u0026#34;\u0026gt;-1\u0026lt;/param\u0026gt; \u0026lt;param name=\u0026#34;max\u0026#34;\u0026gt;1\u0026lt;/param\u0026gt; \u0026lt;/command_interface\u0026gt; \u0026lt;state_interface name=\u0026#34;position\u0026#34;/\u0026gt; \u0026lt;/joint\u0026gt; \u0026lt;joint name=\u0026#34;joint2\u0026#34;\u0026gt; \u0026lt;command_interface name=\u0026#34;position\u0026#34;\u0026gt; \u0026lt;param name=\u0026#34;min\u0026#34;\u0026gt;-1\u0026lt;/param\u0026gt; \u0026lt;param name=\u0026#34;max\u0026#34;\u0026gt;1\u0026lt;/param\u0026gt; \u0026lt;/command_interface\u0026gt; \u0026lt;state_interface name=\u0026#34;position\u0026#34;/\u0026gt; \u0026lt;/joint\u0026gt; \u0026lt;/ros2_control\u0026gt; \u0026lt;ros2_control name=\u0026#34;RRBotForceTorqueSensor1D\u0026#34; type=\u0026#34;sensor\u0026#34;\u0026gt; \u0026lt;hardware\u0026gt; \u0026lt;plugin\u0026gt;ros2_control_demo_hardware/ForceTorqueSensor1DHardware\u0026lt;/plugin\u0026gt; \u0026lt;param name=\u0026#34;example_param_read_for_sec\u0026#34;\u0026gt;0.43\u0026lt;/param\u0026gt; \u0026lt;/hardware\u0026gt; \u0026lt;sensor name=\u0026#34;tcp_fts_sensor\u0026#34;\u0026gt; \u0026lt;state_interface name=\u0026#34;force\u0026#34;/\u0026gt; \u0026lt;param name=\u0026#34;frame_id\u0026#34;\u0026gt;rrbot_tcp\u0026lt;/param\u0026gt; \u0026lt;param name=\u0026#34;min_force\u0026#34;\u0026gt;-100\u0026lt;/param\u0026gt; \u0026lt;param name=\u0026#34;max_force\u0026#34;\u0026gt;100\u0026lt;/param\u0026gt; \u0026lt;/sensor\u0026gt; \u0026lt;/ros2_control\u0026gt; \u0026lt;ros2_control name=\u0026#34;RRBotGripper\u0026#34; type=\u0026#34;actuator\u0026#34;\u0026gt; \u0026lt;hardware\u0026gt; \u0026lt;plugin\u0026gt;ros2_control_demo_hardware/PositionActuatorHardware\u0026lt;/plugin\u0026gt; \u0026lt;param name=\u0026#34;example_param_write_for_sec\u0026#34;\u0026gt;1.23\u0026lt;/param\u0026gt; \u0026lt;param name=\u0026#34;example_param_read_for_sec\u0026#34;\u0026gt;3\u0026lt;/param\u0026gt; \u0026lt;/hardware\u0026gt; \u0026lt;joint name=\u0026#34;gripper_joint \u0026#34;\u0026gt; \u0026lt;command_interface name=\u0026#34;position\u0026#34;\u0026gt; \u0026lt;param name=\u0026#34;min\u0026#34;\u0026gt;0\u0026lt;/param\u0026gt; \u0026lt;param name=\u0026#34;max\u0026#34;\u0026gt;50\u0026lt;/param\u0026gt; \u0026lt;/command_interface\u0026gt; \u0026lt;state_interface name=\u0026#34;position\u0026#34;/\u0026gt; \u0026lt;state_interface name=\u0026#34;velocity\u0026#34;/\u0026gt; \u0026lt;/joint\u0026gt; \u0026lt;/ros2_control\u0026gt; ","externalUrl":null,"permalink":"/blog/docs/shortcodes/","section":"文档","summary":"\u003cp\u003eros2_control是使用（ros2）对机器人进行（实时）控制的框架。\n它的包是ros（机器人操作系统）中使用的ros_control包的重写。\nros2_control的目标是简化新硬件的集成并克服一些缺点。\u003c/p\u003e","title":"ros2_control教程","type":"docs"},{"content":"","externalUrl":"https://ciicadalab.github.io","permalink":"/blog/users/ef51c7b9654a4f2d13525eb80ee46cdf/","section":"用户列表","summary":"","title":"ciicadalab.github.io","type":"users"},{"content":"确保软件包列表和已安装的软件包是最新的。 sudo apt update sudo apt upgrade\n安装和配置php # sudo apt show php sudo apt install php-fpm sudo apt install php-dom sudo apt install php-curl php -v\n安装和配置composer # PHP的依赖关系管理器 php -r \u0026quot;copy('https://getcomposer.org/installer', 'composer-setup.php');\u0026quot; php composer-setup.php 全局调用 sudo mv composer.phar /usr/local/bin/composer 切换为国内镜像 composer config -g repo.packagist composer https://mirrors.aliyun.com/composer/ 更新 composer selfupdate\n安装和配置mysql # sudo apt install mysql-server sudo mysql CREATE USER 'yang'@'localhost' IDENTIFIED BY 'password'; grant all on *.* to yang@'localhost'; SHOW GRANTS FOR 'yang'@'localhost'; revoke all on *.* from yang@'localhost'; select user(); mysql -u yang -p\n安装和配置nodejs # 概述 # 安装nodejs # curl -fsSL https://deb.nodesource.com/setup_lts.x | sudo -E bash - \u0026amp;\u0026amp;\\ sudo apt install -y nodejs sudo apt install nodejs\n安装npm # sudo apt install npm\n安装版本管理模块 # sudo npm install -g n\n升级指定版本 # sudo n lts\n安装和配置Nginx # 概述 # Nginx是一个开源web服务器，通常用作反向代理或HTTP缓存。 Linux免费提供。 在本教程中，我们将安装Nginx并建立一个基本站点。\n安装Nginx # 要安装Nginx，请使用以下命令： sudo apt install nginx 安装后，您已经拥有了所需的一切。 您可以将浏览器指向服务器IP地址。 您应该会看到以下页面： 如果您看到此页面，则表明您已经在web服务器上成功安装了Nginx。\n管理Nginx # 检查Nginx状态 systemctl status nginx 停止Web服务器，输入： sudo systemctl stop nginx 启动Web服务器，键入： sudo systemctl start nginx 再次启动该服务，键入： sudo systemctl restart nginx 热加载，键入： sudo systemctl reload nginx 禁止Nginx，键入： sudo systemctl disable nginx 激活Nginx，键入： sudo systemctl enable nginx 检查Nginx配置文件，键入： sudo nginx -t 创建我们自己的网站 # 默认页面位于**/var/www/html/**位置。 您可以将静态页面放在此处，或者使用虚拟主机并将其放在其他位置。\n虚拟主机是一种在同一服务器上托管多个域名的方法。 Docusaurus是一款现代化的静态网页生成器。 使用命令行工具可以帮助你快速简单地安装Docusaurus并搭建网站框架。\ncd /var/www npx create-docusaurus@latest tutorials classic 我们需要将网站生成为静态内容，并上传到网络服务器，才能被其他人访问。 要构建站点，请使用以下命令： cd tutorials npm run build\n设置虚拟主机 # 要设置虚拟主机，我们需要在**/etc/nginx/sites-enabled/**目录中创建文件。\n对于本教程，我们将在81端口上提供我们的站点，而不是标准的80端口。 如果您愿意，可以更改它。\ncd /etc/nginx/sites-enabled sudo \u0026#34;${EDITOR:-vi}\u0026#34; tutorials server { listen 81; listen [::]:81; server_name docs.minebox.xyz; root /var/www/tutorials/build; index index.html; location / { try_files $uri $uri/ =404; } } root是放置our.html文件的目录。 index用于指定访问站点根目录时可用的文件。 server_name可以是您想要的任何内容，因为您现在还没有将它指向任何真实的域。 通过在sites-enabled目录新建一个链接 sudo ln -s /etc/nginx/sites-available/docs.minebox.xyz.conf /etc/nginx/sites-enabled/\n激活虚拟主机并测试结果 # 要使我们的站点工作，只需重新启动Nginx服务。 sudo service nginx restart 让我们检查一下是否一切正常。 在web浏览器中打开我们新创建的网站。 请记住，我们使用了：81端口。 安装和配置Ghost # usermod -aG sudo lighthouse sudo mkdir -p /var/www/minebox sudo chown lighthouse:lighthouse /var/www/minebox sudo chmod 775 /var/www/minebox cd /var/www/minebox ghost install\n","externalUrl":null,"permalink":"/blog/docs/front-matter/","section":"文档","summary":"\u003cp\u003e确保软件包列表和已安装的软件包是最新的。\n\u003ccode\u003esudo apt update\u003c/code\u003e\n\u003ccode\u003esudo apt upgrade\u003c/code\u003e\u003c/p\u003e\n\n\u003ch2 class=\"relative group\"\u003e安装和配置php \n    \u003cdiv id=\"安装和配置php\" class=\"anchor\"\u003e\u003c/div\u003e\n    \n    \u003cspan\n        class=\"absolute top-0 w-6 transition-opacity opacity-0 ltr:-left-6 rtl:-right-6 not-prose group-hover:opacity-100 select-none\"\u003e\n        \u003ca class=\"group-hover:text-primary-300 dark:group-hover:text-neutral-700 !no-underline\" href=\"#%e5%ae%89%e8%a3%85%e5%92%8c%e9%85%8d%e7%bd%aephp\" aria-label=\"锚点\"\u003e#\u003c/a\u003e\n    \u003c/span\u003e        \n    \n\u003c/h2\u003e\n\u003cp\u003e\u003ccode\u003esudo apt show php\u003c/code\u003e\n\u003ccode\u003esudo apt install php-fpm\u003c/code\u003e\n\u003ccode\u003esudo apt install php-dom\u003c/code\u003e\n\u003ccode\u003esudo apt install php-curl\u003c/code\u003e\n\u003ccode\u003ephp -v\u003c/code\u003e\u003c/p\u003e","title":"部署轻量应用服务器教程","type":"docs"},{"content":"","externalUrl":"https://georgiancodeclub.github.io","permalink":"/blog/users/25036bf87aa99ef82e09089a1ddbb9eb/","section":"用户列表","summary":"","title":"georgiancodeclub.github.io","type":"users"},{"content":" 介绍TF2 # 概述 # tf2是一个转换库，它允许用户跟踪一段时间内的多个坐标系。 tf2在时间上缓冲的树结构中维持坐标帧之间的关系，并允许用户在任何期望的时间点变换任意两个坐标帧间的点、向量等。 tf2的特性 # 机器人系统通常具有许多随时间变化的3D坐标系，如世界坐标系、基础坐标系、抓取器坐标系、头坐标系等。 tf2会随时间跟踪所有这些坐标系，并允许您提出以下问题：\n相对于5秒前的世界坐标系，头坐标系在哪里？ 抓取器中的物体相对于基础坐标系的姿态是什么？ 地图坐标系中基础坐标系的当前姿态是什么？ tf2可以在分布式系统中运行。 这意味着关于机器人坐标系的所有信息都可用于系统中任何计算机上的所有ROS 2组件。 tf2可以让分布式系统中的每个组件构建自己的转换信息数据库，或者拥有一个收集和存储所有转换信息的中心节点。\n安装演示 # 让我们从安装演示包及其依赖项开始。 sudo apt-get install ros-galactic-turtle-tf2-py ros-galactic-tf2-tools ros-galactic-tf-transformations\n运行演示 # 既然我们已经安装了turtle_tf2_py教程包，让我们运行演示。 首先，打开一个新的终端并从ros2安装获取，以便ros2命令可以工作。 然后运行以下命令： ros2 launch turtle_tf2_py turtle_tf2_demo.launch.py 你会看到带有两只乌龟turtlesim启动。 在第二个终端窗口中键入以下命令： ros2 run turtlesim turtle_teleop_key 一旦turtlesim启动，您可以使用键盘箭头键在turtlesim中驱动中央龟，选择第二个终端窗口，这样您的击键将被捕获以驱动龟。 你可以看到一只乌龟不断地移动，跟随你驾驶的乌龟。\n发生了什么？ # 本演示使用tf2库创建三个坐标系：世界坐标系、龟1坐标系和龟2坐标系。 本教程使用tf2广播器发布海龟坐标系，使用tf2监听器计算海龟坐标的差异，并移动一只海龟以跟随另一只。\ntf2工具 # 现在让我们看看tf2是如何被用来创建这个演示的。 我们可以使用tf2_tools来查看tf2在幕后所做的事情。\n使用view_frames view_frames创建tf2通过ROS广播的帧的图。 您将看到： Listening to tf data during 5 seconds... Generating graph in frames.pdf file... 在这里，tf2监听器正在收听通过ROS广播的帧，并绘制帧如何连接的树。 要查看树，请使用您最喜爱的PDF查看器打开作为结果的生成的frames.pdf。 这里我们可以看到tf2广播的三个帧：世界、乌龟1和乌龟2。 这里的世界是乌龟1与乌龟2帧的父帧。 view_frames还报告一些关于何时接收到最旧和最新的帧转换以及tf2帧发布到tf2的速度的诊断信息，以便进行调试。\n使用tf2_echo tf2_echo报告通过ROS广播的任意两个帧之间的转换。 用法： ros2 run tf2_ros tf2_echo [reference_frame] [target_frame] 让我们看看龟2帧相对于龟1帧的变换，它相当于： ros2 run tf2_ros tf2_echo turtle2 turtle1 当tf2_echo侦听器接收通过ROS2广播的帧时，您将看到显示的转换。 At time 1622031731.625364060 - Translation: [2.796, 1.039, 0.000] - Rotation: in Quaternion [0.000, 0.000, 0.202, 0.979] At time 1622031732.614745114 - Translation: [1.608, 0.250, 0.000] - Rotation: in Quaternion [0.000, 0.000, 0.032, 0.999] 当你驾驶你的乌龟四处走动时，你会看到两只乌龟相对移动时的变换变化。\nrviz和tf2 # rviz是一个可视化工具，可用于检查tf2帧。 让我们使用rviz来看看我们的海龟帧。 让我们从rviz开始。使用-d选项的turtle_rviz.rviz配置文件： 在侧栏中，您将看到tf2广播的帧。 当您驾驶乌龟四处走动时，您会看到帧在rviz中移动。\n四元数基本原理 # 背景\n四元数是方向的四元组表示，比旋转矩阵更简洁。 四元数对于分析涉及三维旋转的情况非常有效。 四元数广泛应用于机器人、量子力学、计算机视觉和3D动画。 你可以在维基百科上了解更多关于基本数学概念的信息。 你也可以看一看3blue1brown制作的可探索视频系列《可视化四元数》。 在本教程中，您将学习四元数和转换方法如何在ROS 2中工作。\n","externalUrl":null,"permalink":"/blog/docs/multi-author/","section":"文档","summary":"\u003ch2 class=\"relative group\"\u003e介绍TF2 \n    \u003cdiv id=\"介绍tf2\" class=\"anchor\"\u003e\u003c/div\u003e\n    \n    \u003cspan\n        class=\"absolute top-0 w-6 transition-opacity opacity-0 ltr:-left-6 rtl:-right-6 not-prose group-hover:opacity-100 select-none\"\u003e\n        \u003ca class=\"group-hover:text-primary-300 dark:group-hover:text-neutral-700 !no-underline\" href=\"#%e4%bb%8b%e7%bb%8dtf2\" aria-label=\"锚点\"\u003e#\u003c/a\u003e\n    \u003c/span\u003e        \n    \n\u003c/h2\u003e\n\n\u003ch3 class=\"relative group\"\u003e概述 \n    \u003cdiv id=\"概述\" class=\"anchor\"\u003e\u003c/div\u003e\n    \n    \u003cspan\n        class=\"absolute top-0 w-6 transition-opacity opacity-0 ltr:-left-6 rtl:-right-6 not-prose group-hover:opacity-100 select-none\"\u003e\n        \u003ca class=\"group-hover:text-primary-300 dark:group-hover:text-neutral-700 !no-underline\" href=\"#%e6%a6%82%e8%bf%b0\" aria-label=\"锚点\"\u003e#\u003c/a\u003e\n    \u003c/span\u003e        \n    \n\u003c/h3\u003e\n\u003cp\u003etf2是一个转换库，它允许用户跟踪一段时间内的多个坐标系。\ntf2在时间上缓冲的树结构中维持坐标帧之间的关系，并允许用户在任何期望的时间点变换任意两个坐标帧间的点、向量等。\n\n\n\n\n\n\n\n\u003cfigure\u003e\n    \u003cimg class=\"my-0 rounded-md\" loading=\"lazy\" alt=\"\" src=\"https://img2022.cnblogs.com/blog/1934119/202211/1934119-20221109160918264-990133187.png\"\u003e\n\n  \n\u003c/figure\u003e\n\u003c/p\u003e","title":"ROS2(Galactic) TF2教程","type":"docs"},{"content":"","externalUrl":"https://www.fahru.my.id","permalink":"/blog/users/5440c85ea880d93157088032515962d3/","section":"用户列表","summary":"","title":"fahru.my.id","type":"users"},{"content":"","externalUrl":"https://loisvelasco.is-a.dev","permalink":"/blog/users/6c20c1af90023ed60919801cfba0f08f/","section":"用户列表","summary":"","title":"loisvelasco.is-a.dev","type":"users"},{"content":"","externalUrl":"https://insidemordecai.com","permalink":"/blog/users/7ee8520d5e9eadae8557be82f46ff18d/","section":"用户列表","summary":"","title":"insidemordecai.com","type":"users"},{"content":"","externalUrl":"https://blastomussa.dev","permalink":"/blog/users/4ea7eb30d575afb5183b02f31a661c42/","section":"用户列表","summary":"","title":"blastomussa.dev","type":"users"},{"content":" 开发环境 # OS : Ubuntu 24.04.3 LTS (Noble Numbat，尊贵的袋食蚁兽) CE : Visual Studio Code 1.104.0 PL : C++ 11 \u0026amp;\u0026amp; Python 3.8 META-OS : ROS2（Jazzy Jalisco，爵士哈里斯科） ROS简介 # ROS（Robot Operating System，机器人操作系统）是一个面向于机器人的开源元操作系统。 它提供了操作系统应有的核心服务，为软件开发人员提供了一系列库和工具，用于构建机器人应用程序。\n该系统具备以下核心功能：\n硬件抽象层 设备驱动程序 功能库 可视化工具 消息传递机制 软件包管理 它也提供用于获取、编译、编写、和跨计算机运行代码所需的工具和库函数。 在某些方面ROS相当于一种机器人（应用程序开发）框架（robot frameworks）。\nROS的设计哲学 # ROS运行时\u0026quot;图\u0026quot;是由多个进程组成的对等网络（可跨多台机器分布），这些进程通过ROS通信基础设施实现松耦合连接。 其设计本质是去中心化的，避免了传统中心化架构（如基于服务器）在跨网络连接时的单点故障问题。\n分布式进程框架 ROS以节点（Nodes）为基本单元，支持运行时独立设计与松耦合连接。节点可组合为功能包（Packages）和堆栈（Stacks），便于共享与分发。 通过联合代码仓库系统实现分布式协作开发，从文件系统到社区层级均支持独立决策，最终由ROS基础设施工具整合。 支持协作的次级目标 轻量化：ROS避免侵入主函数（不封装main()），确保代码可移植至其他框架（如已集成OpenRAVE、Orocos等）。 框架无关库：提倡开发不依赖ROS的纯净库，仅通过清晰接口与ROS交互。 多语言支持：已原生支持Python、C++、Lisp，实验性提供Java/Lua库。 测试友好性：内置rostest框架，简化测试环境的搭建与销毁。 可扩展性：适配大型运行时系统与开发流程。 ROS的通信模式 # ROS支持三种核心通信机制，覆盖不同应用场景：\n服务（Services） 同步RPC调用：采用请求-响应模式，适用于需要即时反馈的操作（如机械臂控制指令）。 示例：客户端节点请求路径规划服务，服务器节点返回规划结果。 话题（Topics） 异步数据流：基于发布/订阅模型，适用于持续数据传输（如激光雷达点云）。 优势：生产者和消费者解耦，支持多对多通信。 参数服务器（Parameter Server） 全局数据存储：集中管理动态配置参数（如机器人PID系数），支持节点间共享与修改。 ROS安装 # 当前可用于Ubuntu 24.04 Noble Numbat系统的Debian包是ROS2 Jazzy Jalisco。\n设置源 # 将下载服务器http://us.archive.ubuntu.com更换为国内源。 现在将ROS 2 apt存储库添加到你的系统中。首先，使用apt授权我们的GPG密钥。 gnupg和lsb-release是系统自带的最新版本 打开/etc/hosts写入域名对应的IP地址“185.199.111.133 raw.githubusercontent.com” sudo apt update sudo apt install curl sudo curl -sSL https://raw.githubusercontent.com/ros/rosdistro/master/ros.key -o /usr/share/keyrings/ros-archive-keyring.gpg 然后将存储库添加到源列表中。 echo \u0026quot;deb [arch=$(dpkg --print-architecture) signed-by=/usr/share/keyrings/ros-archive-keyring.gpg] http://packages.ros.org/ros2/ubuntu $(source /etc/os-release \u0026amp;\u0026amp; echo $UBUNTU_CODENAME) main\u0026quot; | sudo tee /etc/apt/sources.list.d/ros2.list \u0026gt; /dev/null\n安装ROS 2软件包 # 设置存储库后，更新apt存储库缓存. sudo apt update\nROS 2软件包建立在经常更新的Ubuntu系统上。 在安装新软件包之前，始终建议您确保您的系统是最新的. sudo apt upgrade\n推荐桌面安装：ROS、RViz、演示、教程。. sudo apt install ros-galactic-desktop 安装完成 # sudo apt-cache search ros-galactic\n环境设置 # ROS2依赖于使用shell环境组合工作空间的概念。 “工作区”是一个ROS术语，表示您使用ROS 2开发系统的位置。 核心ROS 2工作区称为底层。 后续的本地工作区称为覆盖。 使用ROS 2进行开发时，通常会同时激活多个工作区。\n组合工作区可以更容易地针对不同版本的ROS2或不同的包集进行开发。 它还允许在同一台计算机上安装多个ROS 2发行版（或“发行版”，如Dashing和Eloquent）并在它们之间切换。\n可以通过在每次打开新shell时source设置文件来实现，或者将source命令添加到shell启动脚本中一次。 如果不寻找安装文件，将无法访问ROS 2命令，也无法找到或使用ROS 2软件包。 换句话说，将无法使用ROS2。\nSource the setup files 您需要在打开的每个新shell上运行此命令，才能访问ROS 2命令，如下所示： source /opt/ros/galactic/setup.bash Add sourcing to your shell startup script 如果您不希望每次打开新shell时都必须source安装文件（跳过任务1），则可以将该命令添加到shell启动脚本中： echo \u0026quot;source /opt/ros/galactic/setup.bash\u0026quot; \u0026gt;\u0026gt; ~/.bashrc 检查环境变量 获取ROS 2安装文件将设置操作ROS 2所需的几个环境变量。 如果您在查找或使用ROS 2软件包时遇到问题，请确保使用以下命令正确设置了您的环境： printenv | grep -i ROS 尝试一些例子 # 若你已成功安装ros-galactic-desktop，可通过以下步骤运行示例程序C++ talker： source /opt/ros/galactic/setup.bash ros2 run demo_nodes_cpp talker 请在新终端中运行Python listener\nsource /opt/ros/galactic/setup.bash ros2 run demo_nodes_py listener 您将会看到以下运行结果： • talker节点显示\u0026quot;Publishing messages\u0026quot;（正在发布消息）\n• listener节点显示\u0026quot;I heard those messages\u0026quot;（已接收消息）\n这表明ROS 2的C++和Python接口均能正常工作。验证成功！\nrosdep2安装 # rosdep是ROS管理依赖项的实用程序，可以与ROS包和外部库一起工作。 rosdep是一个命令行实用程序，用于识别和安装构建或安装包的依赖项。 sudo apt install python3-rosdep2 关于rosdep update访问超时问题的解决方案： # 通过使用代理加速rosdep对github Raw的访问.\n修改下载rosdep数据函数 sudo vi /usr/lib/python3/dist-packages/rosdep2/sources_list.py 定位函数：/download_rosdep_data 添加代码： url=\u0026#34;https://ghproxy.com/\u0026#34;+url 修改常量DEFAULT_INDEX_URL sudo vi /usr/lib/python3/dist-packages/rosdistro/__init__.py 修改代码： DEFAULT_INDEX_URL=\u0026#39;https://ghproxy.com/https://raw.githubusercontent.com/ros/rosdistro/master/index-v4.yaml\u0026#39; 修改下列文件，为github地址添加代理前缀 #!36行 sudo vi /usr/lib/python3/dist-packages/rosdep2/gbpdistro_support.py #!72行 sudo vi /usr/lib/python3/dist-packages/rosdep2/sources_list.py #!39行 sudo vi /usr/lib/python3/dist-packages/rosdep2/rep3.py #!68行 119行 sudo vi /usr/lib/python3/dist-packages/rosdistro/manifest_provider/github.py 更新rosdep # rosdep update ","externalUrl":null,"permalink":"/blog/docs/series/","section":"文档","summary":"\u003ch2 class=\"relative group\"\u003e开发环境 \n    \u003cdiv id=\"开发环境\" class=\"anchor\"\u003e\u003c/div\u003e\n    \n    \u003cspan\n        class=\"absolute top-0 w-6 transition-opacity opacity-0 ltr:-left-6 rtl:-right-6 not-prose group-hover:opacity-100 select-none\"\u003e\n        \u003ca class=\"group-hover:text-primary-300 dark:group-hover:text-neutral-700 !no-underline\" href=\"#%e5%bc%80%e5%8f%91%e7%8e%af%e5%a2%83\" aria-label=\"锚点\"\u003e#\u003c/a\u003e\n    \u003c/span\u003e        \n    \n\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003eOS : Ubuntu 24.04.3 LTS (Noble Numbat，尊贵的袋食蚁兽)\u003c/li\u003e\n\u003cli\u003eCE : Visual Studio Code 1.104.0\u003c/li\u003e\n\u003cli\u003ePL : C++ 11 \u0026amp;\u0026amp; Python 3.8\u003c/li\u003e\n\u003cli\u003eMETA-OS : ROS2（Jazzy Jalisco，爵士哈里斯科）\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003ch2 class=\"relative group\"\u003eROS简介 \n    \u003cdiv id=\"ros简介\" class=\"anchor\"\u003e\u003c/div\u003e\n    \n    \u003cspan\n        class=\"absolute top-0 w-6 transition-opacity opacity-0 ltr:-left-6 rtl:-right-6 not-prose group-hover:opacity-100 select-none\"\u003e\n        \u003ca class=\"group-hover:text-primary-300 dark:group-hover:text-neutral-700 !no-underline\" href=\"#ros%e7%ae%80%e4%bb%8b\" aria-label=\"锚点\"\u003e#\u003c/a\u003e\n    \u003c/span\u003e        \n    \n\u003c/h2\u003e\n\u003cblockquote\u003e\n\u003cp\u003eROS（Robot Operating System，机器人操作系统）是一个面向于机器人的开源元操作系统。\n它提供了操作系统应有的核心服务，为软件开发人员提供了一系列库和工具，用于构建机器人应用程序。\u003c/p\u003e","title":"基于ROS2开发机器人","type":"docs"},{"content":"","externalUrl":"https://cdell.io","permalink":"/blog/users/db20512c1ee8daab423ea18268cb5910/","section":"用户列表","summary":"","title":"cdell.io","type":"users"},{"content":"","externalUrl":"https://jam.dsg.li","permalink":"/blog/users/ee5d5eca13c3742f7a454a52424f9d73/","section":"用户列表","summary":"","title":"jam.dsg.li","type":"users"},{"content":"SONY FH-E939CD\nWEGA (中国翻译品牌名称为贵翔) ，是日本索尼于1997推出电视机品牌。WEGA的名称是来自天空中闪亮的织女星（Vega）而来。\nSony KV-36XBR200\nSony PlayStation 2\nSony CPD-G520P\nNokia 8250\nNokia 3650\nNokia 7610\nNokia N70\nNokia N93i\nNokia N95 8GB\nApple iPhone 4s\nApple iPhone 5s\nApple iPhone 6s Plus\nSony Xperia XZ Premium\nApple iPhone XS Max\nSamsung Galaxy Note10\n| Version | Year| Line code| Transfer rate| (per lane)[i][ii] Throughput (GB/s)[i][iii] ×1 | ×2 ×4 ×8 ×16 | 1.0 |\t2003 NRZ 8b/10b 2.5 GT/s 0.25 0.5 1 2 4 | 2.0 |\t2007 5.0 GT/s 0.5 1 2 4 8 | 3.0 |\t2010 128b/130b 8.0 GT/s 0.985 1.969 3.938 7.877 15.754 | 4.0 |\t2017 16.0 GT/s 1.969 3.938 7.877 15.754 31.508 | 5.0 |\t2019 32.0 GT/s 3.938 7.877 15.754 31.508 63.015 | 6.0 |\t2022 PAM-4 | FEC |\t1b/1b | 242B/256B | FLIT 64.0 GT/s 7.563 15.125 30.25 60.5 121 | 7.0 |\t2025 128.0 GT/s 15.125 30.25 60.5 121 242 | 8.0 |\t2028 | (planned) |\t256.0 GT/s 30.25 60.5 121 242 484\nFeb,2003 AMD K7 # Athlon XP Barton (130 nm)\nAMD Athlon XP 2500+\nASRock K7NF2-RAID\nRadeon R300\nSep 25th, 2007 AMD K8 # Core 2 Duo\nASUS P5W64 WS Professional\nASUS P5B Deluxe\nATI Radeon R500\nGeForce 8\nCore 2 Quad\nASUS P5Q Deluxe\nATI Radeon R600\nATI Radeon R700\nEvergreen\nIntel X58 ASRock X58 Deluxe\nIntel® X79 Express Chipset\nIntel® Core™ X-series Processors\nASRock X79 Extreme6\nIntel® X99 Chipset\nIntel® Core™ X-series Processors\nASRock X99 WS-E/10G\nQ1'2011 # Intel® Core™ i7-2600K Processor\nASUS Maximus V Formula\nQ2'2012 # Intel® Xeon® Processor E3-1230 v2 Intel® H77 Express Chipset\n","externalUrl":null,"permalink":"/blog/docs/hosting-deployment/","section":"文档","summary":"\u003cp\u003e\u003ca\n  href=\"\"\u003eSONY FH-E939CD\u003c/a\u003e\u003c/p\u003e\n\u003cp\u003eWEGA (中国翻译品牌名称为贵翔) ，是日本索尼于1997推出电视机品牌。WEGA的名称是来自天空中闪亮的织女星（Vega）而来。\u003c/p\u003e","title":"托管和部署","type":"docs"},{"content":"为了能够在网站中获取动态数据，我们支持了对 Firebase 的集成。这将允许你在列表和文章中使用阅读量功能。\n访问 Firebase 并创建一个账户 创建一个新项目 选择分析位置 Blowfish 是通过 params.toml 配置文件中的 firebase 相关参数，来和 firebase 集成的，更多的细节内容可以参考 这个页面。你可以在下面找到集成 firebase 的文件示例，请注意 FirebaseConfig 对象内的参数。 // 从你需要的 SDK 中导入所需的函数 import { initializeApp } from \u0026#34;firebase/app\u0026#34;; import { getAnalytics } from \u0026#34;firebase/analytics\u0026#34;; // TODO: Add SDKs for Firebase products that you want to use // https://firebase.google.com/docs/web/setup#available-libraries // 你 Web 应用的 Firebase 配置 // 对于 Firebase JS SDK v7.20.0 以及更高版本，measurementId 参数是可选的 const firebaseConfig = { apiKey: \u0026#34;AIzaSyB5tqlqDky77Vb4Tc4apiHV4hRZI18KGiY\u0026#34;, authDomain: \u0026#34;blowfish-21fff.firebaseapp.com\u0026#34;, projectId: \u0026#34;blowfish-21fff\u0026#34;, storageBucket: \u0026#34;blowfish-21fff.appspot.com\u0026#34;, messagingSenderId: \u0026#34;60108104191\u0026#34;, appId: \u0026#34;1:60108104191:web:039842ebe1370698b487ca\u0026#34;, measurementId: \u0026#34;G-PEDMYR1V0K\u0026#34; }; // 初始化 Firebase const app = initializeApp(firebaseConfig); const analytics = getAnalytics(app); 设置 Firestore - 选择 Build 并打开 Firestore. 创建一个数据库，并在生产环境中启动。选择服务器位置然后等待其部署完成。启动之后你需要配置规则。只需要复制并粘贴下面的内容，然后点击发布即可。 rules_version = \u0026#39;2\u0026#39;; service cloud.firestore { match /databases/{database}/documents { match /{document=**} { allow read, write: if request.auth != null; } } } 开启匿名授权 - 选择 Build 并打开 Authentication。选择开始，点击 Anonymous 并开启，保存。 享受 - 现在可以激活 Blowfish 中文章阅读量和点赞量的功能。 ","externalUrl":null,"permalink":"/blog/docs/firebase-views/","section":"文档","summary":"\u003cp\u003e为了能够在网站中获取动态数据，我们支持了对 Firebase 的集成。这将允许你在列表和文章中使用阅读量功能。\u003c/p\u003e","title":"Firebase: 阅读量 \u0026 点赞量","type":"docs"},{"content":"","externalUrl":"https://priyakdey.com","permalink":"/blog/users/72d71e304faaa40b3d547d5357edc450/","section":"用户列表","summary":"","title":"priyakdey.com","type":"users"},{"content":"","externalUrl":"https://sdehm.dev","permalink":"/blog/users/1a882ded73613252bb07c2c13f40b9e3/","section":"用户列表","summary":"","title":"sdehm.dev","type":"users"},{"content":"","externalUrl":"https://dizzytech.de","permalink":"/blog/users/039ca94b0aeeb9ab4c95226615bfb840/","section":"用户列表","summary":"","title":"dizzytech.de","type":"users"},{"content":"","externalUrl":"https://alejandro-ao.com/","permalink":"/blog/users/620af4c12a7ee8932fadb45ae52bba7e/","section":"用户列表","summary":"","title":"alejandro-ao.com","type":"users"},{"content":"","externalUrl":"https://adir1.com/","permalink":"/blog/users/64faf41f22317a170125dd7b2cd642e2/","section":"用户列表","summary":"","title":"adir1.com","type":"users"},{"content":"","externalUrl":"https://blog.muffn.io/","permalink":"/blog/users/e07582d573aa187c3c15bb042872ca4a/","section":"用户列表","summary":"","title":"blog.muffn.io","type":"users"},{"content":"","externalUrl":"https://nick.bouwhuis.net","permalink":"/blog/users/fd12be5b9c01f6b6089b8b1cbff1350d/","section":"用户列表","summary":"","title":"nick.bouwhuis.net","type":"users"},{"content":"","externalUrl":"https://vividscc.com/","permalink":"/blog/users/3bfa5ccb77cf79199527df4c0259d0dc/","section":"用户列表","summary":"","title":"vividscc.com","type":"users"},{"content":"","externalUrl":"https://mariuskimmina.com/","permalink":"/blog/users/9327a7a2a271822354f23963b0557368/","section":"用户列表","summary":"","title":"mariuskimmina.com","type":"users"},{"content":"","externalUrl":"https://technicat.com/","permalink":"/blog/users/6ed0dcb17b6e24c166f7da0bdfb0c1f5/","section":"用户列表","summary":"","title":"technicat.com","type":"users"},{"content":"","externalUrl":"https://fugugames.com/","permalink":"/blog/users/e2ca3d6494c32151235beabe7567b23d/","section":"用户列表","summary":"","title":"fugugames.com","type":"users"},{"content":"","externalUrl":"https://hyperbowl3d.com/","permalink":"/blog/users/129162dc71b9d40ee7948e51910d415a/","section":"用户列表","summary":"","title":"hyperbowl3d.com","type":"users"},{"content":"","externalUrl":"https://talkdimsum.com/","permalink":"/blog/users/80d4420e686d5a055bab647fa03d281b/","section":"用户列表","summary":"","title":"talkdimsum.com","type":"users"},{"content":"","externalUrl":"https://alanctanner.com/","permalink":"/blog/users/8168c3eeb157c9c9b1ca287393393f9c/","section":"用户列表","summary":"","title":"alanctanner.com","type":"users"},{"content":"","externalUrl":"https://rdgo.dev/","permalink":"/blog/users/98f15180691d43fbfcbaf685e1b9ab06/","section":"用户列表","summary":"","title":"rdgo.dev","type":"users"},{"content":"","externalUrl":"https://clemsau.com/","permalink":"/blog/users/66a61706d45b77b559869cd1247fe8fc/","section":"用户列表","summary":"","title":"clemsau.com","type":"users"},{"content":"","externalUrl":"https://weaxsey.org/","permalink":"/blog/users/5801e67070cd59e592c82693a1bda773/","section":"用户列表","summary":"","title":"weaxsey.org","type":"users"},{"content":"","externalUrl":"https://nikarashihatsu.github.io/","permalink":"/blog/users/c7116358255c4f5ccb306f7012306e22/","section":"用户列表","summary":"","title":"nikarashihatsu.github.io","type":"users"},{"content":"","externalUrl":"https://www.halcyonstraits.com/","permalink":"/blog/users/d8ebb1396d8c7d2233b33a6b3ca0adc4/","section":"用户列表","summary":"","title":"halcyonstraits.com","type":"users"},{"content":"","externalUrl":"https://www.50-nuances-octets.fr/","permalink":"/blog/users/24577d47b9474b6bc72eba9a6009dba4/","section":"用户列表","summary":"","title":"50-nuances-octets.fr","type":"users"},{"content":"","externalUrl":"https://marupanda.art/marucomics/","permalink":"/blog/users/6e0c28f8b70015dd35f332d927960d06/","section":"用户列表","summary":"","title":"marupanda.art/marucomics","type":"users"},{"content":"","externalUrl":"https://m3upt.com","permalink":"/blog/users/4d4fb24dca11a144122fa0bb831d9d03/","section":"用户列表","summary":"","title":"m3upt.com","type":"users"},{"content":"","externalUrl":"https://pacochan.net","permalink":"/blog/users/c8eb3ba4d0e565e041ead9aabe6fc770/","section":"用户列表","summary":"","title":"pacochan.net","type":"users"},{"content":"","externalUrl":"https://vkmki001.github.io/","permalink":"/blog/users/069e8f01e7ef48830ebea5239e2189b4/","section":"用户列表","summary":"","title":"vkmki001.github.io","type":"users"},{"content":"","externalUrl":"https://bbagwang.com","permalink":"/blog/users/43d57d92cc54037519270a0cb07dbb83/","section":"用户列表","summary":"","title":"bbagwang.com","type":"users"},{"content":"","externalUrl":"https://jamiemoxon.tech","permalink":"/blog/users/d9e559aaa0c3488012725cc4699ff9c4/","section":"用户列表","summary":"","title":"jamiemoxon.tech","type":"users"},{"content":"","externalUrl":"https://theindiecoder.cloud","permalink":"/blog/users/9eed597b03512bc7b7b4b3cf81814a37/","section":"用户列表","summary":"","title":"theindiecoder.cloud","type":"users"},{"content":"","externalUrl":"https://gma.name","permalink":"/blog/users/48ff442c7de299911eab10b72b02cc84/","section":"用户列表","summary":"","title":"gma.name","type":"users"},{"content":"","externalUrl":"https://mayer.life","permalink":"/blog/users/1b3c507d9cd618565898e6d099c0427d/","section":"用户列表","summary":"","title":"mayer.life","type":"users"},{"content":"","externalUrl":"https://scottmckendry.tech","permalink":"/blog/users/d6d2aa4cd9e351e749136df67a27c136/","section":"用户列表","summary":"","title":"scottmckendry.tech","type":"users"},{"content":"","externalUrl":"https://adilhyz.github.io","permalink":"/blog/users/9901f5943260b32ac3002c1002408f19/","section":"用户列表","summary":"","title":"adilhyz.github.io","type":"users"},{"content":"","externalUrl":"https://ohdmire.github.io","permalink":"/blog/users/fec44f5dd2be29e37c305696d018f99f/","section":"用户列表","summary":"","title":"ohdmire.github.io","type":"users"},{"content":"","externalUrl":"https://ricklan.photography","permalink":"/blog/users/954584ca9b811d77ac600cf7c426be45/","section":"用户列表","summary":"","title":"ricklan.photography","type":"users"},{"content":"","externalUrl":"https://deepumohan.com/tech/","permalink":"/blog/users/8032d46bf9c96ae4b59c419032c7ad89/","section":"用户列表","summary":"","title":"deepumohan.com/tech","type":"users"},{"content":"","externalUrl":"https://joush007.github.io","permalink":"/blog/users/b66472425d53d4e270e85ba4f160e7a1/","section":"用户列表","summary":"","title":"joush007.github.io","type":"users"},{"content":"","externalUrl":"https://rejowski.xyz/","permalink":"/blog/users/8fc3ba43309eb4210c5da59847dab5ac/","section":"用户列表","summary":"","title":"rejowski.xyz","type":"users"},{"content":"","externalUrl":"https://blog.stonegarden.dev/","permalink":"/blog/users/3ec093539269bc4ce9498fe9c36a2b7d/","section":"用户列表","summary":"","title":"blog.stonegarden.dev","type":"users"},{"content":"","externalUrl":"https://renaud.warnotte.be","permalink":"/blog/users/4f0c88168fb7a348b4393a56ede2e799/","section":"用户列表","summary":"","title":"renaud.warnotte.be","type":"users"},{"content":"","externalUrl":"https://boringtech.net/","permalink":"/blog/users/82b432ad2bfc873ec725001f0b3ac495/","section":"用户列表","summary":"","title":"BoringTech.net","type":"users"},{"content":"","externalUrl":"https://technicaldc.github.io/","permalink":"/blog/users/6a603c5d465ecb2422ed7a96fd55c99c/","section":"用户列表","summary":"","title":"technicaldc.github.io","type":"users"},{"content":"","externalUrl":"https://alxhslm.github.io/","permalink":"/blog/users/427cec3309be77abe6f19b006b2a3dc0/","section":"用户列表","summary":"","title":"alxhslm.github.io","type":"users"},{"content":"","externalUrl":"https://www.the-maze.net/","permalink":"/blog/users/e518dc969af1ea65a3d0b55630705047/","section":"用户列表","summary":"","title":"the-maze.net","type":"users"},{"content":"","externalUrl":"https://www.dxpetti.com/","permalink":"/blog/users/0327ac1993f378aa2fc5bbb8a840c9cb/","section":"用户列表","summary":"","title":"DXPetti.com","type":"users"},{"content":"","externalUrl":"https://asterisk.lol","permalink":"/blog/users/6e57b74d392f64f3698aee7046cc2606/","section":"用户列表","summary":"","title":"asterisk.lol","type":"users"},{"content":"","externalUrl":"https://ekwska.com","permalink":"/blog/users/1314bf3d7ce70ad90f1fc7666032e147/","section":"用户列表","summary":"","title":"ekwska.com","type":"users"},{"content":"","externalUrl":"https://todreamr.github.io/","permalink":"/blog/users/1f88d7c1e8e83b761f84b38daaa8016d/","section":"用户列表","summary":"","title":"todreamr.github.io","type":"users"},{"content":"","externalUrl":"https://aakashnand.com/","permalink":"/blog/users/a322d57671bf49fe0f2539096f9ed57f/","section":"用户列表","summary":"","title":"aakashnand.com","type":"users"},{"content":"","externalUrl":"https://innerknowing.xyz/en/","permalink":"/blog/users/1a328ae325c5da884a5b15a1b4d4a446/","section":"用户列表","summary":"","title":"innerknowing","type":"users"},{"content":"","externalUrl":"https://karlukle.site","permalink":"/blog/users/7d028665dc1cf54485e6e82a7083ce69/","section":"用户列表","summary":"","title":"karlukle.site","type":"users"},{"content":"","externalUrl":"http://www.adammadej.com/","permalink":"/blog/users/15cf92fba36f0319bd4b176da554fdb9/","section":"用户列表","summary":"","title":"Adam Madej - Gameplay Animator","type":"users"},{"content":"","externalUrl":"http://www.eallion.com/","permalink":"/blog/users/1f94add7b0ba58983ff507632b822401/","section":"用户列表","summary":"","title":"eallion.com","type":"users"},{"content":"","externalUrl":"https://synapticsugar.games","permalink":"/blog/users/c0d9928ff3857960ec230178bdec1b8d/","section":"用户列表","summary":"","title":"Synaptic Sugar","type":"users"},{"content":"","externalUrl":"https://www.michaeldorner.de","permalink":"/blog/users/d965f981aa39336ef7be5efac83c96b2/","section":"用户列表","summary":"","title":"michaeldorner.de","type":"users"},{"content":"","externalUrl":"http://www.ignaciomconde.com/","permalink":"/blog/users/4de384e83ae8af3834cad28f6dfc6966/","section":"用户列表","summary":"","title":"Ignacio Conde","type":"users"},{"content":"","externalUrl":"https://memv.ennbee.uk/","permalink":"/blog/users/9f984d61b6086212e76291d2698d0498/","section":"用户列表","summary":"","title":"MEM v ENNBEE","type":"users"},{"content":"","externalUrl":"https://joshblais.com/","permalink":"/blog/users/807a03786a63504a144bb3b947a2969c/","section":"用户列表","summary":"","title":"Joshua Blais","type":"users"},{"content":"","externalUrl":"https://www.beautyformulation.com/","permalink":"/blog/users/04bb53c19a5a817c1a0630b65260909d/","section":"用户列表","summary":"","title":"Beauty Formulation","type":"users"},{"content":"","externalUrl":"https://blog.wtcx.dev/","permalink":"/blog/users/4b8c5f7ee72baf8411dae867f9206b63/","section":"用户列表","summary":"","title":"Middle of Nowhere","type":"users"},{"content":"","externalUrl":"https://blog.ummit.dev/","permalink":"/blog/users/c506ded8078df151fc8ce943e7ac1c8a/","section":"用户列表","summary":"","title":"UmmIt - Blog","type":"users"},{"content":"","externalUrl":"https://nveshaan.github.io/","permalink":"/blog/users/02c452502ee9a03866c720c14bf86f9e/","section":"用户列表","summary":"","title":"nveshaan","type":"users"},{"content":"","externalUrl":"https://micheledinelli.github.io","permalink":"/blog/users/27cc5a091bef86a9b5dcfa2c035308ed/","section":"用户列表","summary":"","title":"micheledinelli.github.io","type":"users"},{"content":"","externalUrl":"https://kumacat.pages.dev","permalink":"/blog/users/d52c3523ad809eb1d9ddbcbe32e92661/","section":"用户列表","summary":"","title":"kumacat.pages.dev","type":"users"},{"content":"","externalUrl":"https://andrealucchini.com","permalink":"/blog/users/bdd6b2db27fb40b3fa79a37659b2f285/","section":"用户列表","summary":"","title":"andrealucchini.com","type":"users"},{"content":"","externalUrl":"https://luizglomyer.github.io/","permalink":"/blog/users/af89464ac25ab9445658a3541e623778/","section":"用户列表","summary":"","title":"glomyer.dev","type":"users"},{"content":"","externalUrl":"https://utrodus.com","permalink":"/blog/users/c562b0e606584dd96159faf763291fe1/","section":"用户列表","summary":"","title":"utrodus.com","type":"users"},{"content":"","externalUrl":"https://lazarusoverlook.com","permalink":"/blog/users/033c87b7e950b82ea500c552c9523367/","section":"用户列表","summary":"","title":"lazarusoverlook.com","type":"users"},{"content":"","externalUrl":"https://p3rception.github.io/","permalink":"/blog/users/7596a225b244e0859da338621e680481/","section":"用户列表","summary":"","title":"p3rception.github.io","type":"users"},{"content":"","externalUrl":"https://www.emse.education","permalink":"/blog/users/54b73306674ec7e6778b54a0a8b18b36/","section":"用户列表","summary":"","title":"Handbook on Teaching Empirical Software Engineering: Online Materials","type":"users"},{"content":"","externalUrl":"https://blog.lofibean.cc","permalink":"/blog/users/ad989702a19d1fd8add147d6771c6c02/","section":"用户列表","summary":"","title":"blog.lofibean.cc","type":"users"},{"content":"","externalUrl":"https://merox.dev","permalink":"/blog/users/080a851b486ff5be4201f6fbe1f9616d/","section":"用户列表","summary":"","title":"merox.dev","type":"users"},{"content":"","externalUrl":"https://acamize.com/","permalink":"/blog/users/e263f9bb6dcec27003a8f5f947ba5abb/","section":"用户列表","summary":"","title":"Academy Customize","type":"users"},{"content":"","externalUrl":"https://mrtruongvu.com","permalink":"/blog/users/837b47128639b5359ade845eae461c3a/","section":"用户列表","summary":"","title":"mrtruongvu.com","type":"users"},{"content":"","externalUrl":"https://stepaniah.me","permalink":"/blog/users/1b3da762734b4fb503e49822ed506dbb/","section":"用户列表","summary":"","title":"StepaniaH","type":"users"},{"content":"","externalUrl":"https://laterre.dev/","permalink":"/blog/users/447e2f0f6f439b915e0b57f93e49b7d6/","section":"用户列表","summary":"","title":"Laterre Dev","type":"users"},{"content":"","externalUrl":"https://willhack.top/","permalink":"/blog/users/8a994f70010fa98dac2838ddd246224e/","section":"用户列表","summary":"","title":"WillHack - service for reality hackers","type":"users"},{"content":"","externalUrl":"https://lazyproductreviews.com/","permalink":"/blog/users/3fa4eb553f5d984050d2ee4954960034/","section":"用户列表","summary":"","title":"Lazy Product Reviews","type":"users"},{"content":"","externalUrl":"https://zzzhome.cc/","permalink":"/blog/users/46ea5d4b3698fa18fc0b79faa3d89bef/","section":"用户列表","summary":"","title":"zzzhome","type":"users"},{"content":"","externalUrl":"https://bootlegcoal.com","permalink":"/blog/users/915a897f2ea3ba018728d7dce3540b1b/","section":"用户列表","summary":"","title":"Bootleg Coal Rebellion","type":"users"},{"content":"","externalUrl":"https://ctry.tech/","permalink":"/blog/users/0805e986c2f7265e3bbbfc7bc647ed92/","section":"用户列表","summary":"","title":"Chill-Try","type":"users"},{"content":"","externalUrl":"https://hudsonmcnamara.com","permalink":"/blog/users/2d29fadfaf8ddfaee0b69b563bae8d2d/","section":"用户列表","summary":"","title":"Hudson McNamara","type":"users"},{"content":"","externalUrl":"https://www.wegumweg.de","permalink":"/blog/users/eb23ebd26738c98db323eff207dc7c0e/","section":"用户列表","summary":"","title":"Weg um Weg","type":"users"},{"content":"","externalUrl":"https://panoskorovesis.github.io/","permalink":"/blog/users/706590b7d6a58b77f0eadb22b1dc6cd5/","section":"用户列表","summary":"","title":"The Space 🌍","type":"users"},{"content":"","externalUrl":"https://adriantunez.cloud","permalink":"/blog/users/6057b72b4986ae88640d46262a4be0a0/","section":"用户列表","summary":"","title":"Adri Antunez's Cloud Site","type":"users"},{"content":"","externalUrl":"https://irusukan.com","permalink":"/blog/users/e3f304eacd2f79e31f294cae0ff8162e/","section":"用户列表","summary":"","title":"irusukan","type":"users"},{"content":"","externalUrl":"https://feec-seminar-comp-eng.github.io/","permalink":"/blog/users/405727a6fae1350173ef8915b4c9eb7d/","section":"用户列表","summary":"","title":"FEEC/UNICAMP IA382 - Seminar in Computer Engineering","type":"users"},{"content":"","externalUrl":"https://blog.francescopapini.com","permalink":"/blog/users/a615163aad4c6bb5746a697a9450d563/","section":"用户列表","summary":"","title":"blog.francescopapini.com","type":"users"},{"content":"","externalUrl":"https://heykyo.com","permalink":"/blog/users/9d162f4046cb83c367d8d8ab57240711/","section":"用户列表","summary":"","title":"Kyo's Garden","type":"users"},{"content":"","externalUrl":"https://abantikabhuti.github.io","permalink":"/blog/users/7c98d8b7ba531e032abcd675d4f49c17/","section":"用户列表","summary":"","title":"abantikabhuti.github.io","type":"users"},{"content":"","externalUrl":"https://yag0x1.github.io","permalink":"/blog/users/e4f1c9a4c352ea63707824576d889c8f/","section":"用户列表","summary":"","title":"yag0x1.github.io","type":"users"},{"content":"","externalUrl":"https://caytejohn.xyz","permalink":"/blog/users/bfe9e12b443e96f40b05b584166636f5/","section":"用户列表","summary":"","title":"caytejohn.xyz","type":"users"},{"content":"","date":"2025-09-11","externalUrl":null,"permalink":"/blog/posts/","section":"Posts","summary":"","title":"Posts","type":"posts"},{"content":" 这是 background 的样式示例。 切换 layout \u0026orarr; npx blowfish-tools ","date":"2025-09-11","externalUrl":null,"permalink":"/blog/","section":"欢迎来到 Blowfish! 🎉","summary":"\u003cdiv class=\"flex px-4 py-2 mb-8 text-base rounded-md bg-primary-100 dark:bg-primary-900\"\u003e\n  \u003cspan class=\"flex items-center ltr:pr-3 rtl:pl-3 text-primary-400\"\u003e\n    \u003cspan class=\"relative inline-block align-text-bottom icon\"\u003e\u003csvg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 512 512\"\u003e\u003cpath fill=\"currentColor\" d=\"M506.3 417l-213.3-364c-16.33-28-57.54-28-73.98 0l-213.2 364C-10.59 444.9 9.849 480 42.74 480h426.6C502.1 480 522.6 445 506.3 417zM232 168c0-13.25 10.75-24 24-24S280 154.8 280 168v128c0 13.25-10.75 24-23.1 24S232 309.3 232 296V168zM256 416c-17.36 0-31.44-14.08-31.44-31.44c0-17.36 14.07-31.44 31.44-31.44s31.44 14.08 31.44 31.44C287.4 401.9 273.4 416 256 416z\"/\u003e\u003c/svg\u003e\u003c/span\u003e\n  \u003c/span\u003e\n  \u003cspan class=\"flex items-center justify-between grow dark:text-neutral-300\"\u003e\n    \u003cspan class=\"prose dark:prose-invert\"\u003e 这是 \u003ccode id=\"layout\"\u003ebackground\u003c/code\u003e 的样式示例。\u003c/span\u003e\n    \u003cbutton\n      id=\"switch-layout-button\"\n      class=\"px-4 !text-neutral !no-underline rounded-md bg-primary-600 hover:!bg-primary-500 dark:bg-primary-800 dark:hover:!bg-primary-700\"\n    \u003e\n      切换 layout \u0026orarr;\n    \u003c/button\u003e\n  \u003c/span\u003e\n\u003c/div\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-shell\" data-lang=\"shell\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003enpx blowfish-tools\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003clite-youtube videoid=\"SgXhGb-7QbU\" playlabel=\"SgXhGb-7QbU\" params=\"\"\u003e\u003c/lite-youtube\u003e","title":"欢迎来到 Blowfish! 🎉","type":"page"},{"content":"","date":"2023-10-04","externalUrl":null,"permalink":"/blog/categories/blowfish/","section":"Categories","summary":"","title":"Blowfish","type":"categories"},{"content":"","date":"2023-10-04","externalUrl":null,"permalink":"/blog/tags/blowfish/","section":"标签","summary":"","title":"Blowfish","type":"tags"},{"content":"","date":"2023-10-04","externalUrl":null,"permalink":"/blog/categories/","section":"Categories","summary":"","title":"Categories","type":"categories"},{"content":"","date":"2023-10-04","externalUrl":null,"permalink":"/blog/tags/hugo/","section":"标签","summary":"","title":"Hugo","type":"tags"},{"content":"假装这里有一份 Nuno 的简介。\n","date":"2023-10-04","externalUrl":null,"permalink":"/blog/authors/nunocoracao/","section":"作者列表示例","summary":"\u003cp\u003e假装这里有一份 Nuno 的简介。\u003c/p\u003e","title":"Nuno Coração","type":"authors"},{"content":"","date":"4 October 2023","externalUrl":null,"permalink":"/blog/it/categories/open-source/","section":"Categories","summary":"","title":"Open-Source","type":"categories"},{"content":"","date":"4 October 2023","externalUrl":null,"permalink":"/blog/it/tags/tutorial/","section":"Tag","summary":"","title":"Tutorial","type":"tags"},{"content":"Blowfish 支持基于 Hugo 的所有分类方法。同时，当前的标签预览页也支持展示自定义内容。\n在这里可以为每个分类添加额外的描述信息。查看下面的高级标签页面，了解更多。\n","date":"2023-10-04","externalUrl":null,"permalink":"/blog/tags/","section":"标签","summary":"\u003cp\u003eBlowfish 支持基于 Hugo 的所有分类方法。同时，当前的标签预览页也支持展示自定义内容。\u003c/p\u003e","title":"标签","type":"tags"},{"content":"","date":"2023-10-04","externalUrl":null,"permalink":"/blog/categories/%E5%BC%80%E6%BA%90/","section":"Categories","summary":"","title":"开源","type":"categories"},{"content":"一年前我创建了 Blowfish，这是一个为了打造我的个人主页而精心设计的 Hugo 主题。我决定将其作为一个开源项目。直到今天，Blowfish 已经变成了一个蓬勃发展的开源项目，在 GitHub 上拥有超过900个 star 和数百名用户。在本教程中，我将向你展示如何搭建并在几分钟内让你的网站运行起来。\nnunocoracao/blowfish Personal Website \u0026amp; Blog Theme for Hugo HTML 2328 610 TL;DR # 本指南的目标是指导新用户如何使用 Hugo 快速安装、管理和发布自己的网站。最终的版本可以看这个代码库——如果你想直接跳到结尾的话可以直接看这里。\n视觉风格只是 Blowfish 提供的众多特性之一。想要了解更多，我们鼓励你浏览文档，学习如何根据自己的需求自定义主题。另外，已经有许多其他用户使用该主题并提供了十分优秀的示例，来为你提供灵感。Blowfish 还提供了一些额外的基于 短代码 的功能——你可以在这里查看它们以获取更多灵感。\n设置你的环境 # 让我们从安装工具开始。本指南涵盖了在 Mac 操作系统下的步骤，这些命令可能不适用于你的硬件和操作系统。如果你使用的是 Windows 或 Linux，请参考文档：安装 Hugo 和GitHub CLI。\n无论如何，如果你使用的是 MacOS，那么首先需要安装 brew ——一个专为 MacOS 的包管理器，这将有助于安装和管理其他工具。\n/bin/bash -c \u0026#34;$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)\u0026#34; 安装完成 brew 后，让我们安装 Git, Hugo 和 GitHub CLI。\nbrew install git brew install hugo brew install gh 为你的网站代码创建一个文件夹，并在终端中打开（我在下面创建了 blowfish-tutorial 文件夹，当然你可以将其重命名为任何名称）。\nmkdir blowfish-tutorial cd blowfish-tutorial 进入文件夹后的下一步，就是初始化你本地的 git 仓库。\ngit init -b main 现在，让我们创建并同步本地仓库到 GitHub 仓库，这样你的代码就可以在远程存储。\ngh auth login gh repo create git push --set-upstream origin main 查看下面的图片，这是我的远程仓库的地址。同样地，你也可以随意更改以适应你自己的 GitHub 仓库。\n最后，创建一个 .gitignore 文件，它会自动排除某些文件，以防止这些文件传到远程仓库。下面的例子是我在 .gitignore 文件中添加的文件和文件夹。\n#others node_modules .hugo_build.lock # OS generated files .DS_Store .DS_Store? ._* .Spotlight-V100 .Trashes # Hugo public 最后一步是保存所有更改，并推送到你的远程仓库中。 The last step is to save all the changes to the repo.\ngit add . git commit -m “initial commit” git push 创建并配置站点 # 所有的准备工作就绪后，创建和配置你的站点将会很容易。继续在上一部分你创建的文件夹内，让我们首先创建一个空的 Hugo 网站（不关联任何主题）。\nhugo new site --force . 执行完成后，尝试用下面的命令来运行你的网站。打开浏览器并访问 https://localhost:1313 即可查看你的网站。\nhugo server emmmm… 页面未找到404了，是吧？ 这是预期内的，你创建了一个空白网站，Hugo 不会添加任何默认的页面——换句话说，你的网站还没有任何页面可以显示。\n下一步，让我门使用 git submodules 来安装 Blowfish。通过 git submodules 安装可以让以后管理和升级 Blowfish 主题更加方便。\ngit submodule add -b main https://github.com/nunocoracao/blowfish.git themes/blowfish 接下来，在你的代码根目录下创建 config/_default/ 文件夹。现在你需要下载这些文件，并把它们放在刚刚创建的 _default 文件夹内。最终的文件结构看起来应该是这样的。\nconfig/_default/ ├─ config.toml ├─ languages.en.toml ├─ markup.toml ├─ menus.en.toml └─ params.toml ` 打开 config.toml 并把 theme = \u0026ldquo;blowfish” 这一样的注释取消掉，目前为止你已经准备好了。再次尝试运行网站，并打开浏览器在_https://localhost:1313_查看效果。\nhugo server 你应该能看到下面这样。目前我们还没有添加任何内容，所以还没有页面，但是 Blowfish 主题已经准备就绪，下面只需要配置。\n现在我们来配置主题。\n仅供参考 本指南不会详细介绍 Blowfish 中的所有特性和参数——如果想要了解所有的功能特性和参数，以及如何使用它们，请参考Blowfish 文档。 menus.en.toml # 这个文件定义了你的顶部（banner）和底部（footer）的菜单结构。对于本指南，我们只使用菜单的这两部分：Posts 和 Tags。\nPosts - 用于展示网站中的所有内容条目的完整列表 Tags - 自动生成每篇文章的标签 为了实现这一点，请确保 menus.en.toml 文件中设置了以下参数。完成修改后，重新运行hugo server，你将会看到顶部菜单。\n[[main]] name = \u0026#34;Posts\u0026#34; pageRef = \u0026#34;posts\u0026#34; weight = 10 [[main]] name = \u0026#34;Tags\u0026#34; pageRef = \u0026#34;tags\u0026#34; weight = 30 languages.en.toml # 这个文件配置了网站作者的详细信息。修改下面的内容来定义你自己的信息。\n[author] name = \u0026#34;名字在这\u0026#34; image = \u0026#34;profile.jpg\u0026#34; headline = \u0026#34;我是个好人\u0026#34; bio = \u0026#34;关于我的二三事\u0026#34; # 出现在每篇文章的作者卡片中 网站的图片需要防止在 assets 文件夹内。针对这一步，请将一张你的个人图片添加到这个文件夹，并命名为 profile.jpg。 你可以修改这个文件名，确保文件名和上面个人信息中 image 的参数值对应就行。如果你没有个人图片可用，你可以使用下面的图片继续教程。\nassets/profile.jpg 最后一步是配置你的链接——社交媒体、GitHub 等等。该文件包含了所有支持的链接选项，不过他们被注释掉了。你可以将你希望展示的个人链接的配置项接触注释，也可以替换他们的展示顺序。\nparams.toml # 这个文件是 Blowfish 的配置文件。大部分的视觉选项或自定义的选项可以通过它进行配置，它涵盖了 Blowfish 主题的多个功能特性。 对于本指南，我决定使用 background 布局，你也可以查看Blowfish主题其他的主页布局；同时使用了 Neon 颜色方案，你可以查看完整的颜色方案列表或者创建自己的颜色方案。\n将 image.jpg 文件添加到 assets 文件夹，它将会作为网站的背景。你可以挑选自己喜欢的，当然也可以用本指南中使用的这张图。\nassets/image.jpg 现在让我们打开 params.toml 并开始配置。在这里我只会关注需要修改的值，不要再没看文档的情况下，删除此文件的其余部分。\n首先让我们确保上面提到的正确的颜色方案，开启图片优化，并设置默认背景图片。\ncolorScheme = \u0026#34;neon\u0026#34; disableImageOptimization = false defaultBackgroundImage = \u0026#34;image.jpg\u0026#34; # used as default for background images 接下来，让我们配置首页。我们选择了 background 布局，配置首页图片和最近文章。此外，可以使用 card view 卡片展示的方式来展现最新文章。最后让我们配置头部固定。\n[homepage] layout = \u0026#34;background\u0026#34; # valid options: page, profile, hero, card, background, custom homepageImage = \u0026#34;image.jpg\u0026#34; # used in: hero, and card showRecent = true showRecentItems = 6 showMoreLink = true showMoreLinkDest = \u0026#34;/posts/\u0026#34; cardView = true cardViewScreenWidth = false layoutBackgroundBlur = true # only used when layout equals background [header] layout = \u0026#34;fixed\u0026#34; 现在配置文章和列表页面的展示。下面是他们的配置。\n[article] showHero = true heroStyle = \u0026#34;background\u0026#34; showSummary = true showTableOfContents = true showRelatedContent = true relatedContentLimit = 3 [list] showCards = true groupByYear = false cardView = true 如果你再次运行hugo server，你会看到类似下面这张图的效果。 If you run hugo server again, you should see something like the image below.\n在你的网站中添加内容 # 创建一个文件夹/content/posts，在这个文件夹下添加你的帖子或文章。这也是你在菜单所配置的所有文章的根目录。在这个文件夹内，让我们创建一个新目录并命名为 myfirstpost。在这个目录中创建一个index.md文件作为你的文章，同样也在这个目录中添加featured.jpg或featured.png作为文章的缩略图。 参考下面这个示例。文件中的前几行是扉页参数（Front Matter），它定义了 Hugo 如何展示文章，更多的参数可以参考这里。\n--- title: \u0026#34;我的第一篇帖子\u0026#34; date: 2023-08-14 draft: false summary: \u0026#34;这是网站的第一篇你帖子\u0026#34; tags: [\u0026#34;space\u0026#34;] --- ## 一个副标题 Lorem ipsum dolor sit amet, consectetur adipiscing elit. Morbi nibh nisl, vulputate eu lacus vitae, maximus molestie libero. Vestibulum laoreet, odio et sollicitudin sollicitudin, quam ligula tempus urna, sed sagittis eros eros ac felis. In tristique tortor vitae lacinia commodo. Mauris venenatis ultrices purus nec fermentum. Nunc sit amet aliquet metus. Morbi nisl felis, gravida ac consequat vitae, blandit eu libero. Curabitur porta est in dui elementum porttitor. Maecenas fermentum, tortor ac feugiat fringilla, orci sem sagittis massa, a congue risus ipsum vel massa. Aliquam sit amet nunc vulputate, facilisis neque in, faucibus nisl. 你可以创建其他文章，来查看和验证站点的效果。你的网站应该像下面的图片一样。 主页显示最近的文章，每篇文章通过相关部分自动关联其他文章，有标签聚合和全文搜索。\n发布它 # 现在只剩下发布你的网站了。我将会使用 Firebase 作为托管服务——这是一个免费的替代方案，如果你创建了更复杂的东西，它提供了高级功能。前往 Firebase 创建一个新项目，然后我们切换到 CLI 终端，这将是配置 Firebase 更加简单。\n让我们安装 Firebase CLI 工具 —— 如果你不是 MacOS，请查看 Firebase安装指南。\nbrew install firebase 现在登录并为你的项目初始化firebase托管服务。\nfirebase login firebase init 选择托管并继续。\n按照下面的图片进行，这是我推荐的方式。确保设置了 GitHub actions 工作流文件。这将保证你的 GitHub 仓库一旦有变化，就会立刻同步部署。\n然而，这些文件不会立刻开始运行，因为 Hugo 需要额外的步骤来提前构建。将下面的代码复制并粘贴到 .github 文件夹，同时保留文件中 firebase 生成的projectId。\nfirebase-hosting-merge.yml # # This file was auto-generated by the Firebase CLI # https://github.com/firebase/firebase-tools name: Deploy to Firebase Hosting on merge \u0026#39;on\u0026#39;: push: branches: - main jobs: build_and_deploy: runs-on: ubuntu-latest steps: - name: Hugo setup uses: peaceiris/actions-hugo@v2.6.0 env: ACTIONS_ALLOW_UNSECURE_COMMANDS: \u0026#39;true\u0026#39; - name: Check out code into the Go module directory uses: actions/checkout@v4 with: submodules: true # Fetch Hugo themes (true OR recursive) fetch-depth: 0 # Fetch all history for .GitInfo and .Lastmod - name: Build with Hugo env: # For maximum backward compatibility with Hugo modules HUGO_ENVIRONMENT: production HUGO_ENV: production run: hugo -E -F --minify -d public - name: Deploy Production uses: FirebaseExtended/action-hosting-deploy@v0 with: repoToken: \u0026#39;${{ secrets.GITHUB_TOKEN }}\u0026#39; firebaseServiceAccount: \u0026#39;${{ secrets.FIREBASE_SERVICE_ACCOUNT_BLOWFISH_TUTORIAL }}\u0026#39; channelId: live projectId: blowfish-tutorial firebase-hosting-pull-request.yml # # This file was auto-generated by the Firebase CLI # https://github.com/firebase/firebase-tools name: Deploy to Firebase Hosting on PR \u0026#39;on\u0026#39;: pull_request jobs: build_and_preview: if: \u0026#39;${{ github.event.pull_request.head.repo.full_name == github.repository }}\u0026#39; runs-on: ubuntu-latest steps: - name: Hugo setup uses: peaceiris/actions-hugo@v2.6.0 env: ACTIONS_ALLOW_UNSECURE_COMMANDS: \u0026#39;true\u0026#39; - name: Check out code into the Go module directory uses: actions/checkout@v4 with: submodules: true # Fetch Hugo themes (true OR recursive) fetch-depth: 0 # Fetch all history for .GitInfo and .Lastmod - name: Build with Hugo env: # For maximum backward compatibility with Hugo modules HUGO_ENVIRONMENT: production HUGO_ENV: production run: hugo -E -F --minify -d public - name: Deploy preview uses: FirebaseExtended/action-hosting-deploy@v0 with: repoToken: \u0026#39;${{ secrets.GITHUB_TOKEN }}\u0026#39; firebaseServiceAccount: \u0026#39;${{ secrets.FIREBASE_SERVICE_ACCOUNT_BLOWFISH_TUTORIAL }}\u0026#39; expires: 30d channelId: preview-${{ github.event.number }} projectId: blowfish-tutorial 最后一步是将你的代码提交到 GitHub，提交成功后 GitHub actions 工作流将会自动触发，并构建和部署你的网站。\ngit add . git commit -m \u0026#34;add github actions workflows\u0026#34; git push 你的 GitHub 仓库中的 actions 模块，将会显示类似下图的内容。\n当所有步骤完成之后，你的 Firebase 控制台将会显示类似下图的内容，包括一个可以查看网站的链接。我在https://blowfish-tutorial.web.app/中运行了这个教程。 Once all the steps finish, your Firebase console should show something like the image below - including the links to see your app – I got a version of this tutorial running on https://blowfish-tutorial.web.app/.\n结论和下一步 # 现在你有了主页的第一个版本。你可以在本地进行更改，只要你提交代码，将会自动展示在你的网站中。 那么接下来要做什么呢？我给你留了一下链接，相信会对你有所帮你，其它这些链接会让你获得灵感并了解更多 Blowfish 和 Hugo 的内容。 Now you have your first version of your homepage. You can make changes locally and once you commit your code they will automatically be reflected online. What shall you do next? I’ll leave you with some useful links to get you inspired and learn more about Blowfish and Hugo.\nhttps://blowfish.page/docs/ https://blowfish.page/docs/configuration/ https://blowfish.page/docs/shortcodes/ https://blowfish.page/examples/ https://blowfish.page/users/ https://gohugo.io/documentation/ ","date":"2023-10-04","externalUrl":"https://n9o.xyz/posts/202310-blowfish-tutorial/","permalink":"/blog/guides/202310-blowfish-tutorial/","section":"使用指南","summary":"一年前我创建了 Blowfish，这是一个为了打造我的个人主页而精心设计的 Hugo 主题。我决定将其作为一个开源项目。直到今天，Blowfish 已经变成了一个蓬勃发展的开源项目，在 GitHub 上拥有超过900个 star 和数百名用户。在本教程中，我将向你展示如何搭建并在几分钟内让你的网站运行起来。","title":"使用 Blowfish和 Hugo 构建你的主页","type":"guides"},{"content":" Blowfish 的使用指南和教程 您是 Blowfish 的用户吗? 要将您自己编写的指南添加到此列表，请查看参考模板。\n本部分包含有关如何配置主题的各种指南。如果您是新用户，请查看 安装 指南或查看 示例 部分来了解 Blowfish 能做出什么效果的网页。\n","date":"2023-10-04","externalUrl":null,"permalink":"/blog/guides/","section":"使用指南","summary":"\u003cdiv class=\"lead text-neutral-500 dark:text-neutral-400 !mb-9 text-xl\"\u003e\n  Blowfish 的使用指南和教程\n\u003c/div\u003e\n\n\u003cp\u003e\u003cstrong\u003e您是 Blowfish 的用户吗?\u003c/strong\u003e 要将您自己编写的指南添加到此列表，请查看\u003ca\n  href=\"/guides/template/\"\u003e参考模板\u003c/a\u003e。\u003c/p\u003e","title":"使用指南","type":"guides"},{"content":"","date":"2023-10-04","externalUrl":null,"permalink":"/blog/tags/%E6%8C%87%E5%8D%97/","section":"标签","summary":"","title":"指南","type":"tags"},{"content":"在你的文章中添加不同作者的简单示例。\n","date":"2023-10-04","externalUrl":null,"permalink":"/blog/authors/","section":"作者列表示例","summary":"\u003cp\u003e在你的文章中添加不同作者的简单示例。\u003c/p\u003e","title":"作者列表示例","type":"authors"},{"content":"","date":"2023-10-02","externalUrl":"https://blowfish-tutorial.web.app/","permalink":"/blog/examples/blowfish-tutorial/","section":"Showcase","summary":"","title":"Blowfish Tutorial","type":"examples"},{"content":" See what\u0026rsquo;s possible with Blowfish. This section contains links to example templates and pages created using Blowfish to get you inspired.\n","date":"2023-10-02","externalUrl":null,"permalink":"/blog/examples/","section":"Showcase","summary":"\u003cdiv class=\"lead text-neutral-500 dark:text-neutral-400 !mb-9 text-xl\"\u003e\n  See what\u0026rsquo;s possible with Blowfish.\n\u003c/div\u003e\n\n\u003cp\u003eThis section contains links to example templates and pages created using Blowfish to get you inspired.\u003c/p\u003e\n\u003chr\u003e","title":"Showcase","type":"examples"},{"content":"","date":"2023-10-01","externalUrl":"https://github.com/nunocoracao/blowfish-tutorial","permalink":"/blog/examples/repo-blowfish-tutorial/","section":"Showcase","summary":"","title":"Blowfish Tutorial - Repo","type":"examples"},{"content":"","date":"2022-11-07","externalUrl":"https://nunocoracao.github.io/blowfish_lite/","permalink":"/blog/examples/blowfish-lite/","section":"Showcase","summary":"","title":"Blowfish Lite","type":"examples"},{"content":"","date":"2022-11-06","externalUrl":"https://nunocoracao.github.io/blowfish_artist/","permalink":"/blog/examples/blowfish-artist/","section":"Showcase","summary":"","title":"Blowfish Artist","type":"examples"},{"content":"","date":"2022-11-06","externalUrl":"https://nunocoracao.github.io/blowfish_lowkey/","permalink":"/blog/examples/blowfish-lowkey/","section":"Showcase","summary":"","title":"Blowfish Lowkey","type":"examples"},{"content":"","date":"12 October 2022","externalUrl":null,"permalink":"/blog/it/tags/authors/","section":"Tag","summary":"","title":"Authors","type":"tags"},{"content":"假装这里有一份第二位作者的简介。\n","date":"2022-10-12","externalUrl":null,"permalink":"/blog/authors/secondauthor/","section":"作者列表示例","summary":"\u003cp\u003e假装这里有一份第二位作者的简介。\u003c/p\u003e","title":"Dummy Second Author","type":"authors"},{"content":"","date":"12 October 2022","externalUrl":null,"permalink":"/blog/it/tags/sample/","section":"Tag","summary":"","title":"Sample","type":"tags"},{"content":"这是具有多个作者的文章的示例。\n","date":"2022-10-12","externalUrl":null,"permalink":"/blog/samples/multiple-authors/","section":"示例","summary":"如何使用多个作者的简单示例。","title":"多作者","type":"sample"},{"content":" Blowfish 让你的内容栩栩如生。 \u0026#x1f60d; 本节包含一些示例页面，展示了Blowfish如何呈现不同类型的内容。你还可以参考标签页面的示例。\n旁注： 这个页面只是一个标准的Blowfish文章列表，并且已经配置了Hugo来生成一个 samples 内容类型并显示文章摘要。\n","date":"2022-10-12","externalUrl":null,"permalink":"/blog/samples/","section":"示例","summary":"\u003cdiv class=\"lead text-neutral-500 dark:text-neutral-400 !mb-9 text-xl\"\u003e\n  Blowfish 让你的内容栩栩如生。 \u0026#x1f60d;\n\u003c/div\u003e\n\n\u003cp\u003e本节包含一些示例页面，展示了Blowfish如何呈现不同类型的内容。你还可以参考\u003ca\n  href=\"https://michaelyang628.github.io/blog/tags/\"\u003e标签\u003c/a\u003e页面的示例。\u003c/p\u003e","title":"示例","type":"samples"},{"content":"","date":"2022-10-12","externalUrl":null,"permalink":"/blog/tags/%E7%A4%BA%E4%BE%8B/","section":"标签","summary":"","title":"示例","type":"tags"},{"content":"","date":"2022-10-12","externalUrl":null,"permalink":"/blog/tags/%E4%BD%9C%E8%80%85/","section":"标签","summary":"","title":"作者","type":"tags"},{"content":"","date":"26 September 2022","externalUrl":null,"permalink":"/blog/it/tags/thumbnail/","section":"Tag","summary":"","title":"Thumbnail","type":"tags"},{"content":"这是一个在你的文章使用缩略图的快速示例。\n如果你的文章目录看起来像这样： If your average directory for an article looks like this:\ncontent └── awesome_article.md 你需要将他从单个 markdown 文件更改为一个同名文件夹。创建一个与文章同名的目录，并在此目录中添加一个 index.md 文件。目录结构如下所示：\ncontent └── awesome_article └── featured.png 在文件夹内部，你可以添加一个 feature* 开头的特征图片（支持几乎所有格式，但推荐使用 .png 或 .jpg）。目录结构如下所示：\ncontent └── awesome_article ├── index.md └── featured.png 这将告诉 Blowfish 这篇文章有一个特征图片，这个图片可以在网站作为缩略图使用，也可以用于社交平台上的 oEmbed 卡片。 作为一个示例，你可以尝试将这篇文章的 URL 复制粘贴到一个可以显示 oEmbeds 的平台，如 Twitter、WhatsApp、Telegram等等。\n","date":"2022-09-26","externalUrl":null,"permalink":"/blog/samples/thumbnail_sample/","section":"示例","summary":"一个展示如何在你的文章中开始使用缩略图的快速示例。","title":"缩略图","type":"sample"},{"content":"","date":"2022-09-26","externalUrl":null,"permalink":"/blog/tags/%E7%BC%A9%E7%95%A5%E5%9B%BE/","section":"标签","summary":"","title":"缩略图","type":"tags"},{"content":"","date":"2021-11-07","externalUrl":"https://github.com/nunocoracao/blowfish_lite/","permalink":"/blog/examples/repo-blowfish-lite/","section":"Showcase","summary":"","title":"Blowfish Lite - Repo","type":"examples"},{"content":"","date":"2021-11-06","externalUrl":"https://github.com/nunocoracao/blowfish_artist/","permalink":"/blog/examples/repo-blowfish-artist/","section":"Showcase","summary":"","title":"Blowfish Artist - Repo","type":"examples"},{"content":"","date":"2021-11-06","externalUrl":"https://github.com/nunocoracao/blowfish_lowkey/","permalink":"/blog/examples/repo-blowfish-lowkey/","section":"Showcase","summary":"","title":"Blowfish Lowkey - Repo","type":"examples"},{"content":"","date":"2020-11-06","externalUrl":"https://nunocoracao.github.io/blowfish_template/","permalink":"/blog/examples/blowfish-template/","section":"Showcase","summary":"","title":"Blowfish Template","type":"examples"},{"content":"","date":"2020-11-06","externalUrl":"https://github.com/nunocoracao/blowfish_template","permalink":"/blog/examples/blowfish-template-repo/","section":"Showcase","summary":"","title":"Blowfish Template - GitHub Repo","type":"examples"},{"content":"","date":"14 August 2020","externalUrl":null,"permalink":"/blog/it/tags/config/","section":"Tag","summary":"","title":"Config","type":"tags"},{"content":"","date":"14 August 2020","externalUrl":null,"permalink":"/blog/it/tags/docs/","section":"Tag","summary":"","title":"Docs","type":"tags"},{"content":"","date":"14 August 2020","externalUrl":null,"permalink":"/blog/it/series/documentazione/","section":"Series","summary":"","title":"Documentazione","type":"series"},{"content":"","date":"14 August 2020","externalUrl":null,"permalink":"/blog/it/tags/icons/","section":"Tag","summary":"","title":"Icons","type":"tags"},{"content":"","date":"14 August 2020","externalUrl":null,"permalink":"/blog/it/tags/shortcodes/","section":"Tag","summary":"","title":"Shortcodes","type":"tags"},{"content":"","date":"14 August 2020","externalUrl":null,"permalink":"/blog/it/tags/users/","section":"Tag","summary":"","title":"Users","type":"tags"},{"content":"","date":"2020-08-14","externalUrl":null,"permalink":"/blog/tags/%E7%AE%80%E7%A0%81/","section":"标签","summary":"","title":"简码","type":"tags"},{"content":"Blowfish 内置了许多 FontAwesome 6 中的图标。你可以使用 图标部分或者图标短代码将这些图标包含在你的网站中。\n当然，Blowfish 完全支持自定义图标。只需要将自己的 SVG 文件放在 assets/icons/ 目录下即可。图标目录中的任何图标可以在整个主题中使用。为了实现自动填充颜色，每个 SVG 图标源码中必须添加 fill=\u0026quot;currentColor\u0026quot; 属性。\n下面是所有的内置图标及其名称。\n图标名称 预览 amazon apple bars bell blogger bluesky bomb bug check circle-info code codeberg \u003c?xml version=\"1.0\" encoding=\"utf-8\"?\u003e codepen comment dev discourse docker download dribbble edit email envelope expand eye facebook fire flickr fork foursquare ghost github gitlab globe goodreads google google-scholar graduation-cap hackernews hashnode heart-empty heart image instagram itch-io keybase kickstarter ko-fi \u003c?xml version=\"1.0\" encoding=\"UTF-8\"?\u003e language lastfm lightbulb line link linkedin list location-dot lock mastodon medium microsoft moon mug-hot music orcid patreon paypal peertube pencil pgpkey phone pinterest pixelfed poo reddit researchgate rss rss-square scale-balanced search shield skull-crossbones slack snapchat soundcloud spotify stack-overflow star steam stripe substack sun tag telegram threads tiktok triangle-exclamation tumblr twitch twitter wand-magic-sparkles whatsapp x-twitter xing Xing xmark youtube ","date":"2020-08-14","externalUrl":null,"permalink":"/blog/samples/icons/","section":"示例","summary":"\u003cp\u003eBlowfish 内置了许多 \u003ca\n  href=\"https://fontawesome.com/icons\"\n    target=\"_blank\"\n  \u003eFontAwesome 6\u003c/a\u003e 中的图标。你可以使用 \u003ca\n  href=\"https://michaelyang628.github.io/blog/docs/partials/#icon\"\u003e图标部分\u003c/a\u003e或者\u003ca\n  href=\"https://michaelyang628.github.io/blog/docs/shortcodes/#icon\"\u003e图标短代码\u003c/a\u003e将这些图标包含在你的网站中。\u003c/p\u003e\n\u003cp\u003e当然，Blowfish 完全支持自定义图标。只需要将自己的 SVG 文件放在 \u003ccode\u003eassets/icons/\u003c/code\u003e 目录下即可。图标目录中的任何图标可以在整个主题中使用。为了实现自动填充颜色，每个 SVG 图标源码中必须添加 \u003ccode\u003efill=\u0026quot;currentColor\u0026quot;\u003c/code\u003e 属性。\u003c/p\u003e","title":"图标","type":"sample"},{"content":"","date":"2020-08-14","externalUrl":null,"permalink":"/blog/tags/%E5%9B%BE%E6%A0%87/","section":"标签","summary":"","title":"图标","type":"tags"},{"content":"这里有使用 Blowfish 构建的网站实例。点击这里以 JSON 形式查看完整列表。\n您也是 Blowfish 用户？ 提交 PR来把你的网站加入此列表。 ","date":"2020-08-14","externalUrl":null,"permalink":"/blog/users/","section":"用户列表","summary":"\u003cp\u003e这里有使用 Blowfish 构建的网站实例。点击\u003ca\n  href=\"/users/users.json\"\u003e这里\u003c/a\u003e以 JSON 形式查看完整列表。\u003c/p\u003e\n\n  \n\n\n\n\u003cdiv\n  \n    class=\"flex px-4 py-3 rounded-md bg-primary-100 dark:bg-primary-900\"\n  \n  \u003e\n  \u003cspan\n    \n      class=\"text-primary-400 ltr:pr-3 rtl:pl-3 flex items-center\"\n    \n    \u003e\n    \u003cspan class=\"relative block icon\"\u003e\u003csvg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 512 512\"\u003e\u003cpath fill=\"currentColor\" d=\"M506.3 417l-213.3-364c-16.33-28-57.54-28-73.98 0l-213.2 364C-10.59 444.9 9.849 480 42.74 480h426.6C502.1 480 522.6 445 506.3 417zM232 168c0-13.25 10.75-24 24-24S280 154.8 280 168v128c0 13.25-10.75 24-23.1 24S232 309.3 232 296V168zM256 416c-17.36 0-31.44-14.08-31.44-31.44c0-17.36 14.07-31.44 31.44-31.44s31.44 14.08 31.44 31.44C287.4 401.9 273.4 416 256 416z\"/\u003e\u003c/svg\u003e\n\u003c/span\u003e\n  \u003c/span\u003e\n\n  \u003cspan\n    \n      class=\"dark:text-neutral-300\"\n    \n    \u003e\u003cstrong\u003e您也是 Blowfish 用户？\u003c/strong\u003e \u003ca\n  href=\"https://github.com/nunocoracao/blowfish/blob/dev/exampleSite/content/users/users.json\"\n    target=\"_blank\"\n  \u003e提交 PR\u003c/a\u003e来把你的网站加入此列表。\u003c/span\u003e\n\u003c/div\u003e\n\n\u003c/BR\u003e","title":"用户列表","type":"users"},{"content":"","date":"2020-08-14","externalUrl":null,"permalink":"/blog/tags/%E5%8F%8B%E9%93%BE/","section":"标签","summary":"","title":"友链","type":"tags"},{"content":"","date":"2019-03-11","externalUrl":null,"permalink":"/blog/tags/css/","section":"标签","summary":"","title":"Css","type":"tags"},{"content":"","date":"2019-03-11","externalUrl":null,"permalink":"/blog/tags/html/","section":"标签","summary":"","title":"Html","type":"tags"},{"content":"本文提供了可在 Blowfish 中使用的基本 Markdown 格式示例，还展示了如何加入一些基本 HTML 元素。\n标题 # 以下 HTML 元素 \u0026lt;h1\u0026gt;—\u0026lt;h6\u0026gt; 表示六个级别的标题。 \u0026lt;h1\u0026gt; 是最高的标题级别，而 \u0026lt;h6\u0026gt; 是最低的。\nH1 # H2 # H3 # H4 # H5 # H6 # 段落 # Xerum, quo qui aut unt expliquam qui dolut labo. Aque venitatiusda cum, voluptionse latur sitiae dolessi aut parist aut dollo enim qui voluptate ma dolestendit peritin re plis aut quas inctum laceat est volestemque commosa as cus endigna tectur, offic to cor sequas etum rerum idem sintibus eiur? Quianimin porecus evelectur, cum que nis nust voloribus ratem aut omnimi, sitatur? Quiatem. Nam, omnis sum am facea corem alique molestrunt et eos evelece arcillit ut aut eos eos nus, sin conecerem erum fuga. Ri oditatquam, ad quibus unda veliamenimin cusam et facea ipsamus es exerum sitate dolores editium rerore eost, temped molorro ratiae volorro te reribus dolorer sperchicium faceata tiustia prat.\nItatur? Quiatae cullecum rem ent aut odis in re eossequodi nonsequ idebis ne sapicia is sinveli squiatum, core et que aut hariosam ex eat.\n块引用 # 块引用表示从其他来源引用的内容，可以用于位于 footer 或 cite 元素内的引文，并且可以表示一些补充说明（例如注释和缩写）。\n没有参考链接的块引用 # Tiam, ad mint andaepu dandae nostion secatur sequo quae. Note that you can use Markdown syntax within a blockquote.\n有参考链接的块引用 # Don\u0026rsquo;t communicate by sharing memory, share memory by communicating.\n— Rob Pike1\n表格 # 表格不是核心 Markdown 规范的一部分，但 Hugo 支持渲染。\nName Age Bob 27 Alice 23 表格内内联 Markdown # Italics Bold Code italics bold code 代码块 # 带反引号的代码块 # \u0026lt;!DOCTYPE html\u0026gt; \u0026lt;html lang=\u0026#34;en\u0026#34;\u0026gt; \u0026lt;head\u0026gt; \u0026lt;meta charset=\u0026#34;utf-8\u0026#34; /\u0026gt; \u0026lt;title\u0026gt;Example HTML5 Document\u0026lt;/title\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;p\u0026gt;Test\u0026lt;/p\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; 缩进四个空格的代码块 # \u0026lt;!DOCTYPE html\u0026gt; \u0026lt;html lang=\u0026quot;en\u0026quot;\u0026gt; \u0026lt;head\u0026gt; \u0026lt;meta charset=\u0026quot;utf-8\u0026quot;\u0026gt; \u0026lt;title\u0026gt;Example HTML5 Document\u0026lt;/title\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;p\u0026gt;Test\u0026lt;/p\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; 带有 Hugo 内部高亮简码的代码块 # 1 2 3 4 5 6 7 8 9 10 \u0026lt;!DOCTYPE html\u0026gt; \u0026lt;html lang=\u0026#34;en\u0026#34;\u0026gt; \u0026lt;head\u0026gt; \u0026lt;meta charset=\u0026#34;utf-8\u0026#34;\u0026gt; \u0026lt;title\u0026gt;Example HTML5 Document\u0026lt;/title\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;p\u0026gt;Test\u0026lt;/p\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; 列表 # 有序列表 # First item Second item Third item 无序列表 # List item Another item And another item 嵌套列表 # Fruit Apple Orange Banana Dairy Milk Cheese 其他元素 — abbr、sub、sup、kbd、mark # GIF is a bitmap image format.\nH2O\nXn + Yn = Zn\nPress CTRL+ALT+Delete to end the session.\nMost salamanders are nocturnal, and hunt for insects, worms, and other small creatures.\n上述引文摘自 Rob Pike 在 2015 年 11 月 18 日 Gopherfest 期间的谈论“什么都没有”。\u0026#160;\u0026#x21a9;\u0026#xfe0e;\n","date":"2019-03-11","externalUrl":null,"permalink":"/blog/samples/markdown/","section":"示例","summary":"\u003cp\u003e本文提供了可在 Blowfish 中使用的基本 Markdown 格式示例，还展示了如何加入一些基本 HTML 元素。\u003c/p\u003e","title":"Markdown","type":"sample"},{"content":"","date":"2019-03-11","externalUrl":null,"permalink":"/blog/tags/markdown/","section":"标签","summary":"","title":"Markdown","type":"tags"},{"content":"","date":"2019-03-10","externalUrl":null,"permalink":"/blog/tags/gist/","section":"标签","summary":"","title":"Gist","type":"tags"},{"content":"","date":"10 March 2019","externalUrl":null,"permalink":"/blog/it/tags/privacy/","section":"Tag","summary":"","title":"Privacy","type":"tags"},{"content":"","date":"2019-03-10","externalUrl":null,"permalink":"/blog/tags/twitter/","section":"标签","summary":"","title":"Twitter","type":"tags"},{"content":"","date":"2019-03-10","externalUrl":null,"permalink":"/blog/tags/vimeo/","section":"标签","summary":"","title":"Vimeo","type":"tags"},{"content":"","date":"2019-03-10","externalUrl":null,"permalink":"/blog/tags/youtube/","section":"标签","summary":"","title":"Youtube","type":"tags"},{"content":"Hugo 附带了几个用于丰富内容的内置简码，以及一个隐私配置 和一组干练的简码，支持各种社交媒体嵌入的静态窗口。\nYouTube # 下面是一个使用内置 youtube 简码的示例。\nTwitter # 此示例使用 x 简码来显示推文。它需要两个参数 user 和 id 。\n“In addition to being more logical, asymmetry has the advantage that its complete appearance is far more optically effective than symmetry.”\n— Jan Tschichold pic.twitter.com/gcv7SrhvJb\n\u0026mdash; Design Reviewed | Graphic Design History (@DesignReviewed) January 17, 2019 或者，tweet 简码可用于生成嵌入式的 Twitter 卡片。\nGist # gist 简码可用于嵌入 GitHub Gist。它需要两个参数：Gist 的用户名和 ID。\nVimeo # vimeo_simple 简码将生成一个嵌入式的 Vimeo 播放器。\n","date":"2019-03-10","externalUrl":null,"permalink":"/blog/samples/rich-content/","section":"示例","summary":"这是\u003cstrong\u003e简码\u003c/strong\u003e内容的示例。","title":"简码示例","type":"sample"},{"content":"","date":"2019-03-10","externalUrl":null,"permalink":"/blog/tags/%E9%9A%90%E7%A7%81/","section":"标签","summary":"","title":"隐私","type":"tags"},{"content":"","date":"9 March 2019","externalUrl":null,"permalink":"/blog/it/tags/latin/","section":"Tag","summary":"","title":"Latin","type":"tags"},{"content":"","date":"9 March 2019","externalUrl":null,"permalink":"/blog/it/tags/text/","section":"Tag","summary":"","title":"Text","type":"tags"},{"content":"","date":"2019-03-09","externalUrl":null,"permalink":"/blog/tags/%E6%8B%89%E4%B8%81%E8%AF%AD/","section":"标签","summary":"","title":"拉丁语","type":"tags"},{"content":"","date":"2019-03-09","externalUrl":null,"permalink":"/blog/tags/%E6%96%87%E6%9C%AC/","section":"标签","summary":"","title":"文本","type":"tags"},{"content":"Lorem est tota propiore conpellat pectoribus de pectora summo.\nRedit teque digerit hominumque toris verebor lumina non cervice subde tollit usus habet Arctonque, furores quas nec ferunt. Quoque montibus nunc caluere tempus inhospita parcite confusaque translucet patri vestro qui optatis lumine cognoscere flos nubis! Fronde ipsamque patulos Dryopen deorum.\nExierant elisi ambit vivere dedere Duce pollice Eris modo Spargitque ferrea quos palude Rursus nulli murmur; hastile inridet ut ab gravi sententia! Nomine potitus silentia flumen, sustinet placuit petis in dilapsa erat sunt. Atria tractus malis.\nComas hunc haec pietate fetum procerum dixit Post torum vates letum Tiresia Flumen querellas Arcanaque montibus omnes Quidem et Vagus elidunt # The Van de Graaf Canon\nMane refeci capiebant unda mulcebat # Victa caducifer, malo vulnere contra dicere aurato, ludit regale, voca! Retorsit colit est profanae esse virescere furit nec; iaculi matertera et visa est, viribus. Divesque creatis, tecta novat collumque vulnus est, parvas. Faces illo pepulere tempus adest. Tendit flamma, ab opes virum sustinet, sidus sequendo urbis.\nIubar proles corpore raptos vero auctor imperium; sed et huic: manus caeli Lelegas tu lux. Verbis obstitit intus oblectamina fixis linguisque ausus sperare Echionides cornuaque tenent clausit possit. Omnia putatur. Praeteritae refert ausus; ferebant e primus lora nutat, vici quae mea ipse. Et iter nil spectatae vulnus haerentia iuste et exercebat, sui et.\nEurytus Hector, materna ipsumque ut Politen, nec, nate, ignari, vernum cohaesit sequitur. Vel mitis temploque vocatus, inque alis, oculos nomen non silvis corpore coniunx ne displicet illa. Crescunt non unus, vidit visa quantum inmiti flumina mortis facto sic: undique a alios vincula sunt iactata abdita! Suspenderat ego fuit tendit: luna, ante urbem Propoetides parte.\n","date":"2019-03-09","externalUrl":null,"permalink":"/blog/samples/placeholder-text/","section":"示例","summary":"\u003cp\u003eLorem est tota propiore conpellat pectoribus de pectora summo.\u003c/p\u003e","title":"文本占位符","type":"sample"},{"content":"","date":"2019-03-08","externalUrl":null,"permalink":"/blog/tags/katex/","section":"标签","summary":"","title":"Katex","type":"tags"},{"content":"","date":"8 March 2019","externalUrl":null,"permalink":"/blog/it/tags/maths/","section":"Tag","summary":"","title":"Maths","type":"tags"},{"content":"","date":"2019-03-08","externalUrl":null,"permalink":"/blog/tags/%E6%95%B0%E5%AD%A6/","section":"标签","summary":"","title":"数学","type":"tags"},{"content":"KaTeX 可用于在文章中呈现数学表达式。\n如果您想要使用数学符号，Blowfish 会将 KaTeX 自动加入到您的项目中。只需在文章中包含 katex 短代码 即可。参考下面的例子：\n{{\u0026lt; katex \u0026gt;}} 该页面上的任何 KaTeX 语法都会自动渲染。使用支持的 TeX 函数 的在线参考来获取可用语法。\n内联表示法 # 可以通过将表达式包装在 \\( 和 \\) 分隔符中来生成内联表示法。\n例如：\n% KaTeX inline notation Inline notation: \\(\\varphi = \\dfrac{1+\\sqrt5}{2}= 1.6180339887…\\) Inline notation: \\(\\varphi = \\dfrac{1+\\sqrt5}{2}= 1.6180339887…\\)\n表达式块 # 可以使用 $$ 分隔符生成表达式块。这将在其 HTML 块中输出表达式。\n例如：\n% KaTeX block notation $$ \\varphi = 1+\\frac{1} {1+\\frac{1} {1+\\frac{1} {1+\\cdots} } } $$ $$ \\varphi = 1+\\frac{1} {1+\\frac{1} {1+\\frac{1} {1+\\cdots} } } $$","date":"2019-03-08","externalUrl":null,"permalink":"/blog/samples/mathematical-notation/","section":"示例","summary":"\u003cp\u003eKaTeX 可用于在文章中呈现数学表达式。\u003c/p\u003e","title":"数学表达式","type":"sample"},{"content":"","date":"6 March 2019","externalUrl":null,"permalink":"/blog/it/tags/chart/","section":"Tag","summary":"","title":"Chart","type":"tags"},{"content":"","date":"6 March 2019","externalUrl":null,"permalink":"/blog/it/tags/diagram/","section":"Tag","summary":"","title":"Diagram","type":"tags"},{"content":"","date":"6 March 2019","externalUrl":null,"permalink":"/blog/it/tags/graph/","section":"Tag","summary":"","title":"Graph","type":"tags"},{"content":"","date":"2019-03-06","externalUrl":null,"permalink":"/blog/tags/mermaid/","section":"标签","summary":"","title":"Mermaid","type":"tags"},{"content":"","date":"2019-03-06","externalUrl":null,"permalink":"/blog/tags/%E8%A1%A8%E6%A0%BC/","section":"标签","summary":"","title":"表格","type":"tags"},{"content":"","date":"2019-03-06","externalUrl":null,"permalink":"/blog/tags/%E6%B5%81%E7%A8%8B%E5%9B%BE/","section":"标签","summary":"","title":"流程图","type":"tags"},{"content":"Blowfish 使用 mermaid 简码可以调用。Blowfish 会根据配置的 colorScheme 参数自动调用 Mermaid 生成流程图或者思维导图。\n有关更多详细信息，请参阅 Mermaid 简码 文档。\n下面的示例是从官方 Mermaid 文档 中选取的一小部分。您还可以在 GitHub 上查看页面源代码 查看书写方法。\n流程图 # graph TD A[Christmas] --\u003e|Get money| B(Go shopping) B --\u003e C{Let me think} B --\u003e G[/Another/] C ==\u003e|One| D[Laptop] C --\u003e|Two| E[iPhone] C --\u003e|Three| F[Car] subgraph Section C D E F G end 时序图 # sequenceDiagram autonumber par Action 1 Alice-\u003e\u003eJohn: Hello John, how are you? and Action 2 Alice-\u003e\u003eBob: Hello Bob, how are you? end Alice-\u003e\u003e+John: Hello John, how are you? Alice-\u003e\u003e+John: John, can you hear me? John--\u003e\u003e-Alice: Hi Alice, I can hear you! Note right of John: John is perceptive John--\u003e\u003e-Alice: I feel great! loop Every minute John--\u003eAlice: Great! end 类图 # classDiagram Animal \"1\" \u003c|-- Duck Animal \u003c|-- Fish Animal \u003c--o Zebra Animal : +int age Animal : +String gender Animal: +isMammal() Animal: +mate() class Duck{ +String beakColor +swim() +quack() } class Fish{ -int sizeInFeet -canEat() } class Zebra{ +bool is_wild +run() } 实体关系图 # erDiagram CUSTOMER }|..|{ DELIVERY-ADDRESS : has CUSTOMER ||--o{ ORDER : places CUSTOMER ||--o{ INVOICE : \"liable for\" DELIVERY-ADDRESS ||--o{ ORDER : receives INVOICE ||--|{ ORDER : covers ORDER ||--|{ ORDER-ITEM : includes PRODUCT-CATEGORY ||--|{ PRODUCT : contains PRODUCT ||--o{ ORDER-ITEM : \"ordered in\" ","date":"2019-03-06","externalUrl":null,"permalink":"/blog/samples/diagrams-flowcharts/","section":"示例","summary":"使用 Mermaid 可以轻松地将图表和流程图添加到文章中。","title":"流程图和思维导图","type":"sample"},{"content":"Blowfish 使用 chart 简码来调用 Chart.js。Blowfish 会自动为图表设置主题以匹配配置的 colorScheme 参数，但是可以使用 Chart.js 语法来自定义图表颜色。\n有关更多详细信息，请参阅 图表简码 文档。\n下面的示例是从 Chart.js 官方文档 中选取的一小部分。您还可以在 GitHub 上查看页面源代码 查看书写方式。\n柱形图 # 折线图 # 扇形图 # ","date":"2019-03-06","externalUrl":null,"permalink":"/blog/samples/charts/","section":"示例","summary":"Blowfish 包含 Chart.js，可实现强大的图表和数据可视化。","title":"图表","type":"sample"},{"content":"","date":"2019-03-06","externalUrl":null,"permalink":"/blog/tags/%E5%9B%BE%E7%89%87/","section":"标签","summary":"","title":"图片","type":"tags"},{"content":"","date":"2019-03-05","externalUrl":null,"permalink":"/blog/tags/emoji/","section":"标签","summary":"","title":"Emoji","type":"tags"},{"content":"Blowfish 支持 Emoji 表情符号。Emoji 表情符号可用于标题、菜单项和文章内容。\n注意: Emoji 的显示效果取决于您的浏览器和操作系统。要设置统一的表情符号样式，您可以使用第三方 Emoji 表情符号字体。 Blowfish 会自动的进行表情符号渲染，因此您可以在内容和 frontmatter 中使用 Emoji 表情代码，它们将在构建时转换为相应的 Emoji。\n例如： see_no_evil \u0026#x1f648;, hear_no_evil \u0026#x1f649;, speak_no_evil \u0026#x1f64a;.\nEmoji 清单 可以很方便的查找 Emoji 对应的表情代码。\n","date":"2019-03-05","externalUrl":null,"permalink":"/blog/samples/emoji/","section":"示例","summary":"📖🏞️🧗🏽🐉🧙🏽‍♂️🧚🏽👸","title":"Emoji 表情符号 🪂","type":"sample"},{"content":"","date":"22 December 1987","externalUrl":null,"permalink":"/blog/it/tags/template/","section":"Tag","summary":"","title":"Template","type":"tags"},{"content":"","date":"1987-12-22","externalUrl":null,"permalink":"/blog/tags/%E6%A8%A1%E6%9D%BF/","section":"标签","summary":"","title":"模板","type":"tags"},{"content":"感谢您愿意为 Blowfish 社区做出贡献。\n如何开始？ # 这是一篇模板文章，将解释如何为 Blowfish 的指南部分创建新文章。\nClone Blowfish 仓库 # 使用以下命令 clone 此仓库：\ngit clone https://github.com/nunocoracao/blowfish.git 配置您的文档 # 复制并粘贴您要创建的 .md 文档所在的整个文件夹。 使用 YYYYMM-\u0026lt;英文标题\u0026gt; 的格式（例如：200601-tutorial）命名文档，不允许有空格。\n编写您的指南 # 编写您的指南 :)\n在 img 文件夹中储存图像并按下述格式引用它们：\n![]() Image caption 提交 PR # 提交您的 PR ，Blowfish 团队在这里提前感谢您对我们这个项目的贡献。\n","date":"1987-12-22","externalUrl":null,"permalink":"/blog/guides/template/","section":"使用指南","summary":"\u003cp\u003e感谢您愿意为 Blowfish 社区做出贡献。\u003c/p\u003e\n\n\u003ch2 class=\"relative group\"\u003e如何开始？ \n    \u003cdiv id=\"如何开始\" class=\"anchor\"\u003e\u003c/div\u003e\n    \n    \u003cspan\n        class=\"absolute top-0 w-6 transition-opacity opacity-0 ltr:-left-6 rtl:-right-6 not-prose group-hover:opacity-100 select-none\"\u003e\n        \u003ca class=\"group-hover:text-primary-300 dark:group-hover:text-neutral-700 !no-underline\" href=\"#%e5%a6%82%e4%bd%95%e5%bc%80%e5%a7%8b\" aria-label=\"锚点\"\u003e#\u003c/a\u003e\n    \u003c/span\u003e        \n    \n\u003c/h2\u003e\n\u003cp\u003e这是一篇模板文章，将解释如何为 Blowfish 的指南部分创建新文章。\u003c/p\u003e","title":"使用指南模板","type":"guides"},{"content":"","externalUrl":null,"permalink":"/blog/it/tags/accademico/","section":"Tag","summary":"","title":"Accademico","type":"tags"},{"content":"","externalUrl":null,"permalink":"/blog/tags/ai/","section":"标签","summary":"","title":"AI","type":"tags"},{"content":"","externalUrl":null,"permalink":"/blog/it/tags/analytics/","section":"Tag","summary":"","title":"Analytics","type":"tags"},{"content":"","externalUrl":null,"permalink":"/blog/it/tags/autore/","section":"Tag","summary":"","title":"Autore","type":"tags"},{"content":"","externalUrl":null,"permalink":"/blog/it/tags/autore-del-tema/","section":"Tag","summary":"","title":"Autore Del Tema","type":"tags"},{"content":"","externalUrl":null,"permalink":"/blog/it/tags/blog/","section":"Tag","summary":"","title":"Blog","type":"tags"},{"content":"","externalUrl":null,"permalink":"/blog/it/tags/blog-allaperto/","section":"Tag","summary":"","title":"Blog All'aperto","type":"tags"},{"content":"","externalUrl":null,"permalink":"/blog/it/tags/blog-personale/","section":"Tag","summary":"","title":"Blog Personale","type":"tags"},{"content":"","externalUrl":null,"permalink":"/blog/it/tags/blog-tecnologico/","section":"Tag","summary":"","title":"Blog Tecnologico","type":"tags"},{"content":"","externalUrl":null,"permalink":"/blog/it/tags/classe/","section":"Tag","summary":"","title":"Classe","type":"tags"},{"content":"","externalUrl":null,"permalink":"/blog/it/tags/comments/","section":"Tag","summary":"","title":"Comments","type":"tags"},{"content":"","externalUrl":null,"permalink":"/blog/it/tags/content/","section":"Tag","summary":"","title":"Content","type":"tags"},{"content":"","externalUrl":null,"permalink":"/blog/it/tags/cv/","section":"Tag","summary":"","title":"Cv","type":"tags"},{"content":"","externalUrl":null,"permalink":"/blog/it/tags/deployment/","section":"Tag","summary":"","title":"Deployment","type":"tags"},{"content":"","externalUrl":null,"permalink":"/blog/it/series/documentation/","section":"Series","summary":"","title":"Documentation","type":"series"},{"content":"","externalUrl":null,"permalink":"/blog/it/tags/documentazione/","section":"Tag","summary":"","title":"Documentazione","type":"tags"},{"content":"","externalUrl":null,"permalink":"/blog/it/tags/documenti/","section":"Tag","summary":"","title":"Documenti","type":"tags"},{"content":"","externalUrl":null,"permalink":"/blog/it/tags/example/","section":"Tag","summary":"","title":"Example","type":"tags"},{"content":"","externalUrl":null,"permalink":"/blog/it/tags/favicons/","section":"Tag","summary":"","title":"Favicons","type":"tags"},{"content":"","externalUrl":null,"permalink":"/blog/tags/firebase/","section":"标签","summary":"","title":"Firebase","type":"tags"},{"content":"","externalUrl":null,"permalink":"/blog/it/tags/fotografia-delle-bambole/","section":"Tag","summary":"","title":"Fotografia Delle Bambole","type":"tags"},{"content":"","externalUrl":null,"permalink":"/blog/tags/front-matter/","section":"标签","summary":"","title":"Front Matter","type":"tags"},{"content":"","externalUrl":null,"permalink":"/blog/it/tags/giardino-digitale/","section":"Tag","summary":"","title":"Giardino Digitale","type":"tags"},{"content":"","externalUrl":null,"permalink":"/blog/tags/github/","section":"标签","summary":"","title":"Github","type":"tags"},{"content":"","externalUrl":null,"permalink":"/blog/it/tags/homepage/","section":"Tag","summary":"","title":"Homepage","type":"tags"},{"content":"","externalUrl":null,"permalink":"/blog/it/tags/hosting/","section":"Tag","summary":"","title":"Hosting","type":"tags"},{"content":"","externalUrl":null,"permalink":"/blog/it/tags/icon/","section":"Tag","summary":"","title":"Icon","type":"tags"},{"content":"","externalUrl":null,"permalink":"/blog/ja/tags/installation/","section":"タグ","summary":"","title":"Installation","type":"tags"},{"content":"","externalUrl":null,"permalink":"/blog/it/tags/installazione/","section":"Tag","summary":"","title":"Installazione","type":"tags"},{"content":"","externalUrl":null,"permalink":"/blog/tags/jazzy-jalisco/","section":"标签","summary":"","title":"Jazzy Jalisco","type":"tags"},{"content":"","externalUrl":null,"permalink":"/blog/it/tags/layouts/","section":"Tag","summary":"","title":"Layouts","type":"tags"},{"content":"","externalUrl":null,"permalink":"/blog/it/tags/lead/","section":"Tag","summary":"","title":"Lead","type":"tags"},{"content":"","externalUrl":null,"permalink":"/blog/it/tags/libro/","section":"Tag","summary":"","title":"Libro","type":"tags"},{"content":"","externalUrl":null,"permalink":"/blog/it/tags/likes/","section":"Tag","summary":"","title":"Likes","type":"tags"},{"content":"","externalUrl":null,"permalink":"/blog/it/tags/modellatore/","section":"Tag","summary":"","title":"Modellatore","type":"tags"},{"content":"","externalUrl":null,"permalink":"/blog/tags/moveit2/","section":"标签","summary":"","title":"MoveIt2","type":"tags"},{"content":"","externalUrl":null,"permalink":"/blog/tags/netlify/","section":"标签","summary":"","title":"Netlify","type":"tags"},{"content":"","externalUrl":null,"permalink":"/blog/ja/tags/new/","section":"タグ","summary":"","title":"New","type":"tags"},{"content":"","externalUrl":null,"permalink":"/blog/it/tags/notizie-che-contano-il-blog/","section":"Tag","summary":"","title":"Notizie Che Contano Il Blog","type":"tags"},{"content":"","externalUrl":null,"permalink":"/blog/it/tags/novit%C3%A0/","section":"Tag","summary":"","title":"Novità","type":"tags"},{"content":"","externalUrl":null,"permalink":"/blog/tags/partials/","section":"标签","summary":"","title":"Partials","type":"tags"},{"content":"","externalUrl":null,"permalink":"/blog/it/tags/portfolio/","section":"Tag","summary":"","title":"Portfolio","type":"tags"},{"content":"","externalUrl":null,"permalink":"/blog/it/tags/render/","section":"Tag","summary":"","title":"Render","type":"tags"},{"content":"","externalUrl":null,"permalink":"/blog/tags/ros2/","section":"标签","summary":"","title":"ROS2","type":"tags"},{"content":"","externalUrl":null,"permalink":"/blog/it/tags/seminari/","section":"Tag","summary":"","title":"Seminari","type":"tags"},{"content":"","externalUrl":null,"permalink":"/blog/series/","section":"Series","summary":"","title":"Series","type":"series"},{"content":"","externalUrl":null,"permalink":"/blog/it/tags/series/","section":"Tag","summary":"","title":"Series","type":"tags"},{"content":"","externalUrl":null,"permalink":"/blog/it/tags/sito-aziendale/","section":"Tag","summary":"","title":"Sito Aziendale","type":"tags"},{"content":"","externalUrl":null,"permalink":"/blog/it/tags/sito-commerciale/","section":"Tag","summary":"","title":"Sito Commerciale","type":"tags"},{"content":"","externalUrl":null,"permalink":"/blog/it/tags/sito-del-club-universitario/","section":"Tag","summary":"","title":"Sito Del Club Universitario","type":"tags"},{"content":"","externalUrl":null,"permalink":"/blog/it/tags/sito-dellautore/","section":"Tag","summary":"","title":"Sito Dell'autore","type":"tags"},{"content":"","externalUrl":null,"permalink":"/blog/it/tags/sito-dellorganizzazione/","section":"Tag","summary":"","title":"Sito Dell'organizzazione","type":"tags"},{"content":"","externalUrl":null,"permalink":"/blog/it/tags/sito-di-app/","section":"Tag","summary":"","title":"Sito Di App","type":"tags"},{"content":"","externalUrl":null,"permalink":"/blog/it/tags/sito-di-fumetti/","section":"Tag","summary":"","title":"Sito Di Fumetti","type":"tags"},{"content":"","externalUrl":null,"permalink":"/blog/it/tags/sito-di-giochi/","section":"Tag","summary":"","title":"Sito Di Giochi","type":"tags"},{"content":"","externalUrl":null,"permalink":"/blog/it/tags/sito-di-gioco/","section":"Tag","summary":"","title":"Sito Di Gioco","type":"tags"},{"content":"","externalUrl":null,"permalink":"/blog/it/tags/sito-di-portafoglio/","section":"Tag","summary":"","title":"Sito Di Portafoglio","type":"tags"},{"content":"","externalUrl":null,"permalink":"/blog/it/tags/sito-di-progetto/","section":"Tag","summary":"","title":"Sito Di Progetto","type":"tags"},{"content":"","externalUrl":null,"permalink":"/blog/it/tags/sito-personale/","section":"Tag","summary":"","title":"Sito Personale","type":"tags"},{"content":"","externalUrl":null,"permalink":"/blog/it/tags/sito-web-personale/","section":"Tag","summary":"","title":"Sito Web Personale","type":"tags"},{"content":"","externalUrl":null,"permalink":"/blog/it/tags/sviluppatore-del-software/","section":"Tag","summary":"","title":"Sviluppatore Del Software","type":"tags"},{"content":"","externalUrl":null,"permalink":"/blog/it/tags/sviluppatore-di-videogiochi/","section":"Tag","summary":"","title":"Sviluppatore Di Videogiochi","type":"tags"},{"content":"","externalUrl":null,"permalink":"/blog/it/tags/views/","section":"Tag","summary":"","title":"Views","type":"tags"},{"content":"","externalUrl":null,"permalink":"/blog/ja/tags/%E3%82%A2%E3%82%AB%E3%83%87%E3%83%9F%E3%82%A2/","section":"タグ","summary":"","title":"アカデミア","type":"tags"},{"content":"","externalUrl":null,"permalink":"/blog/ja/tags/%E3%82%A2%E3%83%97%E3%83%AA%E3%82%B5%E3%82%A4%E3%83%88/","section":"タグ","summary":"","title":"アプリサイト","type":"tags"},{"content":"","externalUrl":null,"permalink":"/blog/ja/tags/%E3%82%AB%E3%83%AC%E3%83%83%E3%82%B8%E3%82%AF%E3%83%A9%E3%83%96%E3%82%B5%E3%82%A4%E3%83%88/","section":"タグ","summary":"","title":"カレッジクラブサイト","type":"tags"},{"content":"","externalUrl":null,"permalink":"/blog/ja/tags/%E3%82%AF%E3%83%A9%E3%82%B9/","section":"タグ","summary":"","title":"クラス","type":"tags"},{"content":"","externalUrl":null,"permalink":"/blog/ja/tags/%E3%82%B2%E3%83%BC%E3%83%A0%E3%82%B5%E3%82%A4%E3%83%88/","section":"タグ","summary":"","title":"ゲームサイト","type":"tags"},{"content":"","externalUrl":null,"permalink":"/blog/ja/tags/%E3%82%B3%E3%83%9F%E3%83%83%E3%82%AF%E3%82%B5%E3%82%A4%E3%83%88/","section":"タグ","summary":"","title":"コミックサイト","type":"tags"},{"content":"","externalUrl":null,"permalink":"/blog/ja/tags/%E3%82%BB%E3%83%9F%E3%83%8A%E3%83%BC/","section":"タグ","summary":"","title":"セミナー","type":"tags"},{"content":"","externalUrl":null,"permalink":"/blog/ja/tags/%E3%82%BD%E3%83%95%E3%83%88%E3%82%A6%E3%82%A7%E3%82%A2%E9%96%8B%E7%99%BA%E8%80%85/","section":"タグ","summary":"","title":"ソフトウェア開発者","type":"tags"},{"content":"","externalUrl":null,"permalink":"/blog/ja/tags/%E3%83%86%E3%83%BC%E3%83%9E%E8%91%97%E8%80%85/","section":"タグ","summary":"","title":"テーマ著者","type":"tags"},{"content":"","externalUrl":null,"permalink":"/blog/ja/tags/%E3%83%86%E3%82%AF%E3%83%8E%E3%83%AD%E3%82%B8%E3%83%BC%E3%83%96%E3%83%AD%E3%82%B0/","section":"タグ","summary":"","title":"テクノロジーブログ","type":"tags"},{"content":"","externalUrl":null,"permalink":"/blog/ja/tags/%E3%83%87%E3%82%B8%E3%82%BF%E3%83%AB%E3%82%AC%E3%83%BC%E3%83%87%E3%83%B3/","section":"タグ","summary":"","title":"デジタルガーデン","type":"tags"},{"content":"","externalUrl":null,"permalink":"/blog/ja/tags/%E3%83%89%E3%82%AD%E3%83%A5%E3%83%A1%E3%83%B3%E3%83%88/","section":"タグ","summary":"","title":"ドキュメント","type":"tags"},{"content":"","externalUrl":null,"permalink":"/blog/ja/tags/%E3%83%91%E3%83%BC%E3%82%BD%E3%83%8A%E3%83%AB%E3%82%B5%E3%82%A4%E3%83%88/","section":"タグ","summary":"","title":"パーソナルサイト","type":"tags"},{"content":"","externalUrl":null,"permalink":"/blog/ja/tags/%E3%83%93%E3%82%B8%E3%83%8D%E3%82%B9%E3%82%B5%E3%82%A4%E3%83%88/","section":"タグ","summary":"","title":"ビジネスサイト","type":"tags"},{"content":"","externalUrl":null,"permalink":"/blog/ja/tags/%E3%83%93%E3%83%87%E3%82%AA%E3%82%B2%E3%83%BC%E3%83%A0%E9%96%8B%E7%99%BA%E8%80%85/","section":"タグ","summary":"","title":"ビデオゲーム開発者","type":"tags"},{"content":"","externalUrl":null,"permalink":"/blog/ja/tags/%E3%83%96%E3%83%AD%E3%82%B0/","section":"タグ","summary":"","title":"ブログ","type":"tags"},{"content":"","externalUrl":null,"permalink":"/blog/ja/tags/%E3%83%97%E3%83%AD%E3%82%B8%E3%82%A7%E3%82%AF%E3%83%88%E3%82%B5%E3%82%A4%E3%83%88/","section":"タグ","summary":"","title":"プロジェクトサイト","type":"tags"},{"content":"","externalUrl":null,"permalink":"/blog/ja/tags/%E3%83%9D%E3%83%BC%E3%83%88%E3%83%95%E3%82%A9%E3%83%AA%E3%82%AA/","section":"タグ","summary":"","title":"ポートフォリオ","type":"tags"},{"content":"","externalUrl":null,"permalink":"/blog/ja/tags/%E3%83%9D%E3%83%BC%E3%83%88%E3%83%95%E3%82%A9%E3%83%AA%E3%82%AA%E3%82%B5%E3%82%A4%E3%83%88/","section":"タグ","summary":"","title":"ポートフォリオサイト","type":"tags"},{"content":"","externalUrl":null,"permalink":"/blog/ja/tags/%E3%83%A2%E3%83%87%E3%83%A9%E3%83%BC/","section":"タグ","summary":"","title":"モデラー","type":"tags"},{"content":"","externalUrl":null,"permalink":"/blog/tags/%E5%AE%89%E8%A3%85/","section":"标签","summary":"","title":"安装","type":"tags"},{"content":"","externalUrl":null,"permalink":"/blog/tags/%E7%8F%AD%E7%BA%A7/","section":"标签","summary":"","title":"班级","type":"tags"},{"content":"","externalUrl":null,"permalink":"/blog/ja/tags/%E6%9C%AC/","section":"タグ","summary":"","title":"本","type":"tags"},{"content":"","externalUrl":null,"permalink":"/blog/tags/%E5%8D%9A%E5%AE%A2/","section":"标签","summary":"","title":"博客","type":"tags"},{"content":"","externalUrl":null,"permalink":"/blog/tags/%E5%B8%83%E5%B1%80/","section":"标签","summary":"","title":"布局","type":"tags"},{"content":"","externalUrl":null,"permalink":"/blog/tags/%E9%83%A8%E7%BD%B2/","section":"标签","summary":"","title":"部署","type":"tags"},{"content":"","externalUrl":null,"permalink":"/blog/series/%E9%83%A8%E7%BD%B2%E6%95%99%E7%A8%8B/","section":"Series","summary":"","title":"部署教程","type":"series"},{"content":"","externalUrl":null,"permalink":"/blog/series/%E5%A4%A7%E6%A8%A1%E5%9E%8B%E9%83%A8%E7%BD%B2%E6%95%99%E7%A8%8B/","section":"Series","summary":"","title":"大模型部署教程","type":"series"},{"content":"","externalUrl":null,"permalink":"/blog/tags/%E5%A4%A7%E5%AD%A6%E4%BF%B1%E4%B9%90%E9%83%A8%E7%BD%91%E7%AB%99/","section":"标签","summary":"","title":"大学俱乐部网站","type":"tags"},{"content":"","externalUrl":null,"permalink":"/blog/tags/%E7%82%B9%E8%B5%9E%E9%87%8F/","section":"标签","summary":"","title":"点赞量","type":"tags"},{"content":"","externalUrl":null,"permalink":"/blog/tags/%E7%94%B5%E5%AD%90%E6%B8%B8%E6%88%8F%E5%BC%80%E5%8F%91%E4%BA%BA%E5%91%98/","section":"标签","summary":"","title":"电子游戏开发人员","type":"tags"},{"content":"这是高级标记。类似其他 Blowfish 中的其他列表页面，你可以在分类列表页添加自定义内容，这部分内容会显示在顶部。\u0026#x1f680;\n你也可以用这些内容来定义 Hugo 的元数据，比如标题和描述。这些内容可以被用来增强 SEO 或其他目的。\n","externalUrl":null,"permalink":"/blog/tags/advanced/","section":"标签","summary":"\u003cp\u003e这是高级标记。类似其他 Blowfish 中的其他列表页面，你可以在分类列表页添加自定义内容，这部分内容会显示在顶部。\u0026#x1f680;\u003c/p\u003e","title":"高级","type":"tags"},{"content":"","externalUrl":null,"permalink":"/blog/tags/%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/","section":"标签","summary":"","title":"个人博客","type":"tags"},{"content":"","externalUrl":null,"permalink":"/blog/tags/%E4%B8%AA%E4%BA%BA%E7%BD%91%E7%AB%99/","section":"标签","summary":"","title":"个人网站","type":"tags"},{"content":"","externalUrl":null,"permalink":"/blog/ja/tags/%E5%80%8B%E4%BA%BA%E7%9A%84%E3%81%AA%E3%82%A6%E3%82%A7%E3%83%96%E3%82%B5%E3%82%A4%E3%83%88/","section":"タグ","summary":"","title":"個人的なウェブサイト","type":"tags"},{"content":"","externalUrl":null,"permalink":"/blog/ja/tags/%E5%80%8B%E4%BA%BA%E7%9A%84%E3%81%AA%E3%83%96%E3%83%AD%E3%82%B0/","section":"タグ","summary":"","title":"個人的なブログ","type":"tags"},{"content":"","externalUrl":null,"permalink":"/blog/tags/%E5%85%AC%E5%8F%B8%E7%BD%91%E7%AB%99/","section":"标签","summary":"","title":"公司网站","type":"tags"},{"content":"","externalUrl":null,"permalink":"/blog/tags/%E6%88%B7%E5%A4%96%E5%8D%9A%E5%AE%A2/","section":"标签","summary":"","title":"户外博客","type":"tags"},{"content":"","externalUrl":null,"permalink":"/blog/ja/tags/%E4%BC%9A%E7%A4%BE%E3%81%AE%E3%82%B5%E3%82%A4%E3%83%88/","section":"タグ","summary":"","title":"会社のサイト","type":"tags"},{"content":"","externalUrl":null,"permalink":"/blog/tags/%E6%9C%BA%E5%99%A8%E4%BA%BA/","section":"标签","summary":"","title":"机器人","type":"tags"},{"content":"","externalUrl":null,"permalink":"/blog/series/%E6%9C%BA%E5%99%A8%E4%BA%BA%E5%BC%80%E5%8F%91%E6%95%99%E7%A8%8B/","section":"Series","summary":"","title":"机器人开发教程","type":"series"},{"content":"","externalUrl":null,"permalink":"/blog/tags/%E6%8A%80%E6%9C%AF%E5%8D%9A%E5%AE%A2/","section":"标签","summary":"","title":"技术博客","type":"tags"},{"content":"","externalUrl":null,"permalink":"/blog/ja/tags/%E6%8A%80%E8%A1%93%E3%83%96%E3%83%AD%E3%82%B0/","section":"タグ","summary":"","title":"技術ブログ","type":"tags"},{"content":"","externalUrl":null,"permalink":"/blog/series/%E5%AE%B6%E7%94%A8%E6%9C%8D%E5%8A%A1%E5%99%A8%E6%90%AD%E5%BB%BA%E6%95%99%E7%A8%8B/","section":"Series","summary":"","title":"家用服务器搭建教程","type":"series"},{"content":"","externalUrl":null,"permalink":"/blog/tags/%E7%AE%80%E5%8E%86/","section":"标签","summary":"","title":"简历","type":"tags"},{"content":"","externalUrl":null,"permalink":"/blog/tags/%E5%BB%BA%E6%A8%A1%E5%99%A8/","section":"标签","summary":"","title":"建模器","type":"tags"},{"content":"","externalUrl":null,"permalink":"/blog/tags/%E6%95%99%E7%A8%8B/","section":"标签","summary":"","title":"教程","type":"tags"},{"content":"","externalUrl":null,"permalink":"/blog/tags/%E5%BC%80%E5%8F%91/","section":"标签","summary":"","title":"开发","type":"tags"},{"content":"","externalUrl":null,"permalink":"/blog/series/%E5%BC%80%E5%8F%91%E6%9C%BA%E5%99%A8%E4%BA%BA%E6%95%99%E7%A8%8B/","section":"Series","summary":"","title":"开发机器人教程","type":"series"},{"content":"","externalUrl":null,"permalink":"/blog/tags/%E6%BC%AB%E7%94%BB%E7%BD%91%E7%AB%99/","section":"标签","summary":"","title":"漫画网站","type":"tags"},{"content":"","externalUrl":null,"permalink":"/blog/tags/%E9%85%8D%E7%BD%AE/","section":"标签","summary":"","title":"配置","type":"tags"},{"content":"","externalUrl":null,"permalink":"/blog/tags/%E8%AF%84%E8%AE%BA/","section":"标签","summary":"","title":"评论","type":"tags"},{"content":"","externalUrl":null,"permalink":"/blog/tags/%E4%BA%BA%E5%B7%A5%E6%99%BA%E8%83%BD/","section":"标签","summary":"","title":"人工智能","type":"tags"},{"content":"","externalUrl":null,"permalink":"/blog/ja/tags/%E4%BA%BA%E5%BD%A2%E3%81%AE%E5%86%99%E7%9C%9F/","section":"タグ","summary":"","title":"人形の写真","type":"tags"},{"content":"","externalUrl":null,"permalink":"/blog/tags/%E8%BD%AF%E4%BB%B6%E5%BC%80%E5%8F%91%E4%BA%BA%E5%91%98/","section":"标签","summary":"","title":"软件开发人员","type":"tags"},{"content":"","externalUrl":null,"permalink":"/blog/tags/%E5%95%86%E4%B8%9A%E7%BD%91%E7%AB%99/","section":"标签","summary":"","title":"商业网站","type":"tags"},{"content":"","externalUrl":null,"permalink":"/blog/tags/%E4%B9%A6/","section":"标签","summary":"","title":"书","type":"tags"},{"content":"","externalUrl":null,"permalink":"/blog/tags/%E6%95%B0%E5%AD%97%E8%8A%B1%E5%9B%AD/","section":"标签","summary":"","title":"数字花园","type":"tags"},{"content":"","externalUrl":null,"permalink":"/blog/tags/%E7%BB%9F%E8%AE%A1%E6%9C%8D%E5%8A%A1/","section":"标签","summary":"","title":"统计服务","type":"tags"},{"content":"","externalUrl":null,"permalink":"/blog/tags/%E6%8A%95%E8%B5%84%E7%BB%84%E5%90%88%E7%BD%91%E7%AB%99/","section":"标签","summary":"","title":"投资组合网站","type":"tags"},{"content":"","externalUrl":null,"permalink":"/blog/tags/%E6%89%98%E7%AE%A1/","section":"标签","summary":"","title":"托管","type":"tags"},{"content":"","externalUrl":null,"permalink":"/blog/tags/%E5%A8%83%E5%A8%83%E6%91%84%E5%BD%B1/","section":"标签","summary":"","title":"娃娃摄影","type":"tags"},{"content":"","externalUrl":null,"permalink":"/blog/tags/%E7%BD%91%E7%AB%99%E5%9B%BE%E6%A0%87/","section":"标签","summary":"","title":"网站图标","type":"tags"},{"content":" 了解如何使用简单而强大的 Blowfish。 本章节包含了你需要了解的有关 Blowfish 的所有信息。如果你是新用户，请查阅安装 指南，或者访问示例 来了解 Blowfish 能做什么。\n","externalUrl":null,"permalink":"/blog/docs/","section":"文档","summary":"\u003cdiv class=\"lead text-neutral-500 dark:text-neutral-400 !mb-9 text-xl\"\u003e\n  了解如何使用简单而强大的 Blowfish。\n\u003c/div\u003e\n\n\u003cp\u003e本章节包含了你需要了解的有关 Blowfish 的所有信息。如果你是新用户，请查阅\u003ca\n  href=\"https://michaelyang628.github.io/blog/docs/installation/\"\u003e安装\u003c/a\u003e 指南，或者访问\u003ca\n  href=\"https://michaelyang628.github.io/blog/samples/\"\u003e示例\u003c/a\u003e 来了解 Blowfish 能做什么。\u003c/p\u003e","title":"文档","type":"docs"},{"content":"","externalUrl":null,"permalink":"/blog/tags/%E6%96%87%E6%A1%A3/","section":"标签","summary":"","title":"文档","type":"tags"},{"content":"","externalUrl":null,"permalink":"/blog/tags/%E6%96%87%E4%BB%B6%E5%A4%B9/","section":"标签","summary":"","title":"文件夹","type":"tags"},{"content":"","externalUrl":null,"permalink":"/blog/ja/tags/%E5%B1%8B%E5%A4%96%E3%83%96%E3%83%AD%E3%82%B0/","section":"タグ","summary":"","title":"屋外ブログ","type":"tags"},{"content":"","externalUrl":null,"permalink":"/blog/tags/%E7%B3%BB%E5%88%97/","section":"标签","summary":"","title":"系列","type":"tags"},{"content":"","externalUrl":null,"permalink":"/blog/tags/%E9%A1%B9%E7%9B%AE%E7%AB%99%E7%82%B9/","section":"标签","summary":"","title":"项目站点","type":"tags"},{"content":"","externalUrl":null,"permalink":"/blog/tags/%E6%B8%B2%E6%9F%93%E5%99%A8/","section":"标签","summary":"","title":"渲染器","type":"tags"},{"content":"","externalUrl":null,"permalink":"/blog/tags/%E5%AD%A6%E6%9C%AF%E7%95%8C/","section":"标签","summary":"","title":"学术界","type":"tags"},{"content":"","externalUrl":null,"permalink":"/blog/tags/%E7%A0%94%E8%AE%A8%E4%BC%9A/","section":"标签","summary":"","title":"研讨会","type":"tags"},{"content":"","externalUrl":null,"permalink":"/blog/tags/%E5%BA%94%E7%94%A8%E7%BD%91%E7%AB%99/","section":"标签","summary":"","title":"应用网站","type":"tags"},{"content":"","externalUrl":null,"permalink":"/blog/tags/%E6%B8%B8%E6%88%8F%E7%BD%91%E7%AB%99/","section":"标签","summary":"","title":"游戏网站","type":"tags"},{"content":"","externalUrl":null,"permalink":"/blog/tags/%E9%98%85%E8%AF%BB%E9%87%8F/","section":"标签","summary":"","title":"阅读量","type":"tags"},{"content":"","externalUrl":null,"permalink":"/blog/ja/tags/%E8%91%97%E8%80%85/","section":"タグ","summary":"","title":"著者","type":"tags"},{"content":"","externalUrl":null,"permalink":"/blog/ja/tags/%E8%91%97%E8%80%85%E3%82%B5%E3%82%A4%E3%83%88/","section":"タグ","summary":"","title":"著者サイト","type":"tags"},{"content":"","externalUrl":null,"permalink":"/blog/ja/tags/%E9%87%8D%E8%A6%81%E3%81%AA%E3%83%8B%E3%83%A5%E3%83%BC%E3%82%B9%E3%83%96%E3%83%AD%E3%82%B0/","section":"タグ","summary":"","title":"重要なニュースブログ","type":"tags"},{"content":"","externalUrl":null,"permalink":"/blog/tags/%E9%87%8D%E8%A6%81%E5%8D%9A%E5%AE%A2%E7%9A%84%E6%96%B0%E9%97%BB/","section":"标签","summary":"","title":"重要博客的新闻","type":"tags"},{"content":"","externalUrl":null,"permalink":"/blog/tags/%E4%B8%BB%E9%A2%98%E4%BD%9C%E8%80%85/","section":"标签","summary":"","title":"主题作者","type":"tags"},{"content":"","externalUrl":null,"permalink":"/blog/tags/%E4%B8%BB%E9%A1%B5/","section":"标签","summary":"","title":"主页","type":"tags"},{"content":"","externalUrl":null,"permalink":"/blog/tags/%E7%BB%84%E7%BB%87%E7%BD%91%E7%AB%99/","section":"标签","summary":"","title":"组织网站","type":"tags"},{"content":"","externalUrl":null,"permalink":"/blog/ja/tags/%E7%B5%84%E7%B9%94%E3%82%B5%E3%82%A4%E3%83%88/","section":"タグ","summary":"","title":"組織サイト","type":"tags"},{"content":"","externalUrl":null,"permalink":"/blog/tags/%E4%BD%9C%E8%80%85%E7%BD%91%E7%AB%99/","section":"标签","summary":"","title":"作者网站","type":"tags"}]